
TempControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000154a  000015de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000154a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800132  00800132  00001610  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000166c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000241d  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001008  00000000  00000000  00003c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000122e  00000000  00000000  00004c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a4  00000000  00000000  00005ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000830  00000000  00000000  00006468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a70  00000000  00000000  00006c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00008708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__vector_19>
      50:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__vector_20>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_23>
      60:	0c 94 85 04 	jmp	0x90a	; 0x90a <__vector_24>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ea e4       	ldi	r30, 0x4A	; 74
      84:	f5 e1       	ldi	r31, 0x15	; 21
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a2 33       	cpi	r26, 0x32	; 50
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	a2 e3       	ldi	r26, 0x32	; 50
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a6 35       	cpi	r26, 0x56	; 86
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 46 01 	call	0x28c	; 0x28c <main>
      a6:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <buffer_create>:
	}
}

void buffer_clear(buffer_t buffer)
{
	buffer->tail = buffer->head = 0;
      ae:	0f 93       	push	r16
      b0:	1f 93       	push	r17
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	8c 01       	movw	r16, r24
      b8:	68 e0       	ldi	r22, 0x08	; 8
      ba:	70 e0       	ldi	r23, 0x00	; 0
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 70 06 	call	0xce0	; 0xce0 <calloc>
      c4:	ec 01       	movw	r28, r24
      c6:	b8 01       	movw	r22, r16
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 70 06 	call	0xce0	; 0xce0 <calloc>
      d0:	9f 83       	std	Y+7, r25	; 0x07
      d2:	8e 83       	std	Y+6, r24	; 0x06
      d4:	1d 83       	std	Y+5, r17	; 0x05
      d6:	0c 83       	std	Y+4, r16	; 0x04
      d8:	ce 01       	movw	r24, r28
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	1f 91       	pop	r17
      e0:	0f 91       	pop	r16
      e2:	08 95       	ret

000000e4 <buffer_write>:
      e4:	fc 01       	movw	r30, r24
      e6:	a6 81       	ldd	r26, Z+6	; 0x06
      e8:	b7 81       	ldd	r27, Z+7	; 0x07
      ea:	80 81       	ld	r24, Z
      ec:	91 81       	ldd	r25, Z+1	; 0x01
      ee:	a8 0f       	add	r26, r24
      f0:	b9 1f       	adc	r27, r25
      f2:	6c 93       	st	X, r22
      f4:	80 81       	ld	r24, Z
      f6:	91 81       	ldd	r25, Z+1	; 0x01
      f8:	01 96       	adiw	r24, 0x01	; 1
      fa:	64 81       	ldd	r22, Z+4	; 0x04
      fc:	75 81       	ldd	r23, Z+5	; 0x05
      fe:	0e 94 3a 06 	call	0xc74	; 0xc74 <__udivmodhi4>
     102:	91 83       	std	Z+1, r25	; 0x01
     104:	80 83       	st	Z, r24
     106:	08 95       	ret

00000108 <buffer_write_bytes>:
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	7c 01       	movw	r14, r24
     116:	eb 01       	movw	r28, r22
     118:	41 15       	cp	r20, r1
     11a:	51 05       	cpc	r21, r1
     11c:	51 f0       	breq	.+20     	; 0x132 <buffer_write_bytes+0x2a>
     11e:	8b 01       	movw	r16, r22
     120:	04 0f       	add	r16, r20
     122:	15 1f       	adc	r17, r21
     124:	69 91       	ld	r22, Y+
     126:	c7 01       	movw	r24, r14
     128:	0e 94 72 00 	call	0xe4	; 0xe4 <buffer_write>
     12c:	0c 17       	cp	r16, r28
     12e:	1d 07       	cpc	r17, r29
     130:	c9 f7       	brne	.-14     	; 0x124 <buffer_write_bytes+0x1c>
     132:	df 91       	pop	r29
     134:	cf 91       	pop	r28
     136:	1f 91       	pop	r17
     138:	0f 91       	pop	r16
     13a:	ff 90       	pop	r15
     13c:	ef 90       	pop	r14
     13e:	08 95       	ret

00000140 <buffer_read>:
     140:	fc 01       	movw	r30, r24
     142:	82 81       	ldd	r24, Z+2	; 0x02
     144:	93 81       	ldd	r25, Z+3	; 0x03
     146:	a6 81       	ldd	r26, Z+6	; 0x06
     148:	b7 81       	ldd	r27, Z+7	; 0x07
     14a:	a8 0f       	add	r26, r24
     14c:	b9 1f       	adc	r27, r25
     14e:	2c 91       	ld	r18, X
     150:	01 96       	adiw	r24, 0x01	; 1
     152:	64 81       	ldd	r22, Z+4	; 0x04
     154:	75 81       	ldd	r23, Z+5	; 0x05
     156:	0e 94 3a 06 	call	0xc74	; 0xc74 <__udivmodhi4>
     15a:	93 83       	std	Z+3, r25	; 0x03
     15c:	82 83       	std	Z+2, r24	; 0x02
     15e:	82 2f       	mov	r24, r18
     160:	08 95       	ret

00000162 <buffer_is_empty>:
}

bool buffer_is_empty(buffer_t buffer)
{
     162:	fc 01       	movw	r30, r24
	return buffer->tail == buffer->head;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	40 81       	ld	r20, Z
     168:	51 81       	ldd	r21, Z+1	; 0x01
     16a:	22 81       	ldd	r18, Z+2	; 0x02
     16c:	33 81       	ldd	r19, Z+3	; 0x03
     16e:	42 17       	cp	r20, r18
     170:	53 07       	cpc	r21, r19
     172:	09 f0       	breq	.+2      	; 0x176 <buffer_is_empty+0x14>
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	08 95       	ret

00000178 <crc_8_checkSum>:
 */ 
  //#include <avr/pgmspace.h>
  #include "crc_8_dallas.h"

  uint8_t crc_8_checkSum( uint8_t *mas, uint8_t Len )
  {
     178:	fc 01       	movw	r30, r24
	  uint8_t i,dat,crc,fb,st_byt;
	  st_byt=0; crc=0;
     17a:	40 e0       	ldi	r20, 0x00	; 0
     17c:	80 e0       	ldi	r24, 0x00	; 0
		  for( i=0; i<8; i++) {  // счетчик битов в байте
			  fb = crc ^ dat;
			  fb &= 1;
			  crc >>= 1;
			  dat >>= 1;
			  if( fb == 1 ) crc ^= 0x8c; // полином
     17e:	5c e8       	ldi	r21, 0x8C	; 140
  uint8_t crc_8_checkSum( uint8_t *mas, uint8_t Len )
  {
	  uint8_t i,dat,crc,fb,st_byt;
	  st_byt=0; crc=0;
	  do{
		  dat=mas[st_byt];
     180:	21 91       	ld	r18, Z+
     182:	98 e0       	ldi	r25, 0x08	; 8
		  for( i=0; i<8; i++) {  // счетчик битов в байте
			  fb = crc ^ dat;
     184:	32 2f       	mov	r19, r18
     186:	38 27       	eor	r19, r24
			  fb &= 1;
			  crc >>= 1;
     188:	86 95       	lsr	r24
			  dat >>= 1;
     18a:	26 95       	lsr	r18
			  if( fb == 1 ) crc ^= 0x8c; // полином
     18c:	30 fd       	sbrc	r19, 0
     18e:	85 27       	eor	r24, r21
     190:	91 50       	subi	r25, 0x01	; 1
  {
	  uint8_t i,dat,crc,fb,st_byt;
	  st_byt=0; crc=0;
	  do{
		  dat=mas[st_byt];
		  for( i=0; i<8; i++) {  // счетчик битов в байте
     192:	c1 f7       	brne	.-16     	; 0x184 <crc_8_checkSum+0xc>
			  fb &= 1;
			  crc >>= 1;
			  dat >>= 1;
			  if( fb == 1 ) crc ^= 0x8c; // полином
		  }
		  st_byt++;
     194:	4f 5f       	subi	r20, 0xFF	; 255
	  } while( st_byt < Len ); // счетчик байтов в массиве
     196:	46 17       	cp	r20, r22
     198:	98 f3       	brcs	.-26     	; 0x180 <crc_8_checkSum+0x8>
	  return crc;
  }
     19a:	08 95       	ret

0000019c <get_temperature>:
#define CONDITIONAL_SEARCH 0xEC // условный поиск - только с устройствами, которые находятся в сигнальном состоянии

uint8_t memory[9];

device_state get_temperature(ds18b20_t *sensor)
{
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	8c 01       	movw	r16, r24
	device_state state = one_wire_reset();
     1a8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <one_wire_reset>
     1ac:	c8 2f       	mov	r28, r24
	if(state == DEVICE_OK)
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <get_temperature+0x18>
     1b2:	65 c0       	rjmp	.+202    	; 0x27e <get_temperature+0xe2>
	{
		write_byte(SKIP_ROM);
     1b4:	8c ec       	ldi	r24, 0xCC	; 204
     1b6:	0e 94 47 03 	call	0x68e	; 0x68e <write_byte>
		write_byte(TEMP_MEASURE);
     1ba:	84 e4       	ldi	r24, 0x44	; 68
     1bc:	0e 94 47 03 	call	0x68e	; 0x68e <write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c0:	87 eb       	ldi	r24, 0xB7	; 183
     1c2:	9b e0       	ldi	r25, 0x0B	; 11
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <get_temperature+0x28>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <get_temperature+0x2e>
     1ca:	00 00       	nop
		_delay_us(750);
		state = one_wire_reset();
     1cc:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <one_wire_reset>
     1d0:	c8 2f       	mov	r28, r24
		if(state == DEVICE_OK)
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	09 f0       	breq	.+2      	; 0x1d8 <get_temperature+0x3c>
     1d6:	53 c0       	rjmp	.+166    	; 0x27e <get_temperature+0xe2>
		{
			write_byte(SKIP_ROM);
     1d8:	8c ec       	ldi	r24, 0xCC	; 204
     1da:	0e 94 47 03 	call	0x68e	; 0x68e <write_byte>
			write_byte(READ_SCRATCHPAD);
     1de:	8e eb       	ldi	r24, 0xBE	; 190
     1e0:	0e 94 47 03 	call	0x68e	; 0x68e <write_byte>
			memory[0] = read_byte();
     1e4:	0e 94 11 03 	call	0x622	; 0x622 <read_byte>
     1e8:	0f 2e       	mov	r0, r31
     1ea:	f8 e3       	ldi	r31, 0x38	; 56
     1ec:	ef 2e       	mov	r14, r31
     1ee:	f1 e0       	ldi	r31, 0x01	; 1
     1f0:	ff 2e       	mov	r15, r31
     1f2:	f0 2d       	mov	r31, r0
     1f4:	d7 01       	movw	r26, r14
     1f6:	8c 93       	st	X, r24
			memory[1] = read_byte();
     1f8:	0e 94 11 03 	call	0x622	; 0x622 <read_byte>
     1fc:	f7 01       	movw	r30, r14
     1fe:	81 83       	std	Z+1, r24	; 0x01
			memory[2] = read_byte();
     200:	0e 94 11 03 	call	0x622	; 0x622 <read_byte>
     204:	d7 01       	movw	r26, r14
     206:	12 96       	adiw	r26, 0x02	; 2
     208:	8c 93       	st	X, r24
			memory[3] = read_byte();
     20a:	0e 94 11 03 	call	0x622	; 0x622 <read_byte>
     20e:	f7 01       	movw	r30, r14
     210:	83 83       	std	Z+3, r24	; 0x03
			memory[4] = read_byte();
     212:	0e 94 11 03 	call	0x622	; 0x622 <read_byte>
     216:	d7 01       	movw	r26, r14
     218:	14 96       	adiw	r26, 0x04	; 4
     21a:	8c 93       	st	X, r24
			memory[5] = read_byte();
     21c:	0e 94 11 03 	call	0x622	; 0x622 <read_byte>
     220:	f7 01       	movw	r30, r14
     222:	85 83       	std	Z+5, r24	; 0x05
			memory[6] = read_byte();
     224:	0e 94 11 03 	call	0x622	; 0x622 <read_byte>
     228:	d7 01       	movw	r26, r14
     22a:	16 96       	adiw	r26, 0x06	; 6
     22c:	8c 93       	st	X, r24
			memory[7] = read_byte();
     22e:	0e 94 11 03 	call	0x622	; 0x622 <read_byte>
     232:	f7 01       	movw	r30, r14
     234:	87 83       	std	Z+7, r24	; 0x07
			memory[8] = read_byte();
     236:	0e 94 11 03 	call	0x622	; 0x622 <read_byte>
     23a:	d7 01       	movw	r26, r14
     23c:	18 96       	adiw	r26, 0x08	; 8
     23e:	8c 93       	st	X, r24
			if(crc_8_checkSum(memory,9)==0){
     240:	69 e0       	ldi	r22, 0x09	; 9
     242:	c7 01       	movw	r24, r14
     244:	0e 94 bc 00 	call	0x178	; 0x178 <crc_8_checkSum>
     248:	81 11       	cpse	r24, r1
     24a:	18 c0       	rjmp	.+48     	; 0x27c <get_temperature+0xe0>
				sensor->temperature = memory[1];
     24c:	f7 01       	movw	r30, r14
				sensor->temperature <<= 8;
				sensor->temperature = sensor->temperature|memory[0];
     24e:	81 81       	ldd	r24, Z+1	; 0x01
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	98 2f       	mov	r25, r24
     254:	88 27       	eor	r24, r24
     256:	20 81       	ld	r18, Z
     258:	82 2b       	or	r24, r18
     25a:	d8 01       	movw	r26, r16
     25c:	19 96       	adiw	r26, 0x09	; 9
     25e:	9c 93       	st	X, r25
     260:	8e 93       	st	-X, r24
     262:	18 97       	sbiw	r26, 0x08	; 8
				sensor->high_level_temp = memory[2];
     264:	82 81       	ldd	r24, Z+2	; 0x02
     266:	1a 96       	adiw	r26, 0x0a	; 10
     268:	8c 93       	st	X, r24
     26a:	1a 97       	sbiw	r26, 0x0a	; 10
				sensor->low_level_temp = memory[3];
     26c:	83 81       	ldd	r24, Z+3	; 0x03
     26e:	1b 96       	adiw	r26, 0x0b	; 11
     270:	8c 93       	st	X, r24
     272:	1b 97       	sbiw	r26, 0x0b	; 11
				sensor->config = memory[4];
     274:	84 81       	ldd	r24, Z+4	; 0x04
     276:	1c 96       	adiw	r26, 0x0c	; 12
     278:	8c 93       	st	X, r24
     27a:	01 c0       	rjmp	.+2      	; 0x27e <get_temperature+0xe2>
			}else{
				state = CRC_ERROR;
     27c:	c3 e0       	ldi	r28, 0x03	; 3
			}
		}
		
	}
	return(state);
     27e:	8c 2f       	mov	r24, r28
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	08 95       	ret

0000028c <main>:
//uint8_t test[3] = {0xFF,0xAA,0xEA};
menu_t menu = {0};
ds18b20_t sensor;
int main(void)
{
	DDRD = 0xFF;
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x0F;
     290:	8f e0       	ldi	r24, 0x0F	; 15
     292:	82 bb       	out	0x12, r24	; 18
	uint8_t count = 0;
	display_usart = usart_create(1,9600,128);
     294:	40 e8       	ldi	r20, 0x80	; 128
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	60 e8       	ldi	r22, 0x80	; 128
     29a:	75 e2       	ldi	r23, 0x25	; 37
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <usart_create>
     2a2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <display_usart+0x1>
     2a6:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <display_usart>
	pc_usart = usart_create(0,9600,128);
     2aa:	40 e8       	ldi	r20, 0x80	; 128
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	60 e8       	ldi	r22, 0x80	; 128
     2b0:	75 e2       	ldi	r23, 0x25	; 37
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <usart_create>
     2b8:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <pc_usart+0x1>
     2bc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <pc_usart>
	nextion_display_init(&display_usart);
     2c0:	81 e4       	ldi	r24, 0x41	; 65
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 02 02 	call	0x404	; 0x404 <nextion_display_init>
	menu = nextion_display_create_menu(1);
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	0e 94 c2 01 	call	0x384	; 0x384 <nextion_display_create_menu>
     2ce:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <__data_end>
     2d2:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <__data_end+0x1>
     2d6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end+0x2>
	nextion_display_add_page(&menu,2);
     2da:	62 e0       	ldi	r22, 0x02	; 2
     2dc:	82 e3       	ldi	r24, 0x32	; 50
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	0e 94 ce 01 	call	0x39c	; 0x39c <nextion_display_add_page>
	nextion_display_add_element(&menu.pages[0],"n0.val=");
     2e4:	c2 e3       	ldi	r28, 0x32	; 50
     2e6:	d1 e0       	ldi	r29, 0x01	; 1
     2e8:	6a e1       	ldi	r22, 0x1A	; 26
     2ea:	71 e0       	ldi	r23, 0x01	; 1
     2ec:	88 81       	ld	r24, Y
     2ee:	99 81       	ldd	r25, Y+1	; 0x01
     2f0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <nextion_display_add_element>
	nextion_display_add_element(&menu.pages[0],"n1.val=");
     2f4:	62 e2       	ldi	r22, 0x22	; 34
     2f6:	71 e0       	ldi	r23, 0x01	; 1
     2f8:	88 81       	ld	r24, Y
     2fa:	99 81       	ldd	r25, Y+1	; 0x01
     2fc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <nextion_display_add_element>
	asm("sei");
     300:	78 94       	sei
ds18b20_t sensor;
int main(void)
{
	DDRD = 0xFF;
	PORTD = 0x0F;
	uint8_t count = 0;
     302:	f1 2c       	mov	r15, r1
		float temp = (float)frac;
		temp /=16.0f;
		temp*=100.0;
		frac = (uint8_t)temp;
		
		menu.pages[0].items[0].value = value>>4;
     304:	8e 01       	movw	r16, r28
	nextion_display_add_element(&menu.pages[0],"n1.val=");
	asm("sei");
	while (1)
	{
		
		device_state state = get_temperature(&sensor);
     306:	85 e4       	ldi	r24, 0x45	; 69
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 ce 00 	call	0x19c	; 0x19c <get_temperature>
		//PORTD = sensor.temperature>>4;
		uint16_t value = sensor.temperature;
     30e:	c0 91 4d 01 	lds	r28, 0x014D	; 0x80014d <sensor+0x8>
     312:	d0 91 4e 01 	lds	r29, 0x014E	; 0x80014e <sensor+0x9>
		PORTD = count;
     316:	f2 ba       	out	0x12, r15	; 18
		uint8_t frac = value & 0x000F;		 
		float temp = (float)frac;
     318:	6c 2f       	mov	r22, r28
     31a:	6f 70       	andi	r22, 0x0F	; 15
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__floatunsisf>
		temp /=16.0f;
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	40 e8       	ldi	r20, 0x80	; 128
     32c:	5d e3       	ldi	r21, 0x3D	; 61
     32e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__mulsf3>
		temp*=100.0;
		frac = (uint8_t)temp;
		
		menu.pages[0].items[0].value = value>>4;
     332:	d8 01       	movw	r26, r16
     334:	ed 91       	ld	r30, X+
     336:	fc 91       	ld	r31, X
     338:	01 90       	ld	r0, Z+
     33a:	f0 81       	ld	r31, Z
     33c:	e0 2d       	mov	r30, r0
     33e:	d2 95       	swap	r29
     340:	c2 95       	swap	r28
     342:	cf 70       	andi	r28, 0x0F	; 15
     344:	cd 27       	eor	r28, r29
     346:	df 70       	andi	r29, 0x0F	; 15
     348:	cd 27       	eor	r28, r29
     34a:	c0 83       	st	Z, r28
		menu.pages[0].items[1].value = frac;
     34c:	d8 01       	movw	r26, r16
     34e:	ed 91       	ld	r30, X+
     350:	fc 91       	ld	r31, X
     352:	c0 81       	ld	r28, Z
     354:	d1 81       	ldd	r29, Z+1	; 0x01
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	48 ec       	ldi	r20, 0xC8	; 200
     35c:	52 e4       	ldi	r21, 0x42	; 66
     35e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__mulsf3>
     362:	0e 94 10 05 	call	0xa20	; 0xa20 <__fixunssfsi>
     366:	6b 83       	std	Y+3, r22	; 0x03
		//PORTD = menu.pages[0].items[0].value;
		nextion_display_refresh(&menu);	
     368:	c8 01       	movw	r24, r16
     36a:	0e 94 2a 02 	call	0x454	; 0x454 <nextion_display_refresh>
		count++;
     36e:	f3 94       	inc	r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     370:	bf ef       	ldi	r27, 0xFF	; 255
     372:	29 e6       	ldi	r18, 0x69	; 105
     374:	88 e1       	ldi	r24, 0x18	; 24
     376:	b1 50       	subi	r27, 0x01	; 1
     378:	20 40       	sbci	r18, 0x00	; 0
     37a:	80 40       	sbci	r24, 0x00	; 0
     37c:	e1 f7       	brne	.-8      	; 0x376 <main+0xea>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0xf4>
     380:	00 00       	nop
     382:	c1 cf       	rjmp	.-126    	; 0x306 <main+0x7a>

00000384 <nextion_display_create_menu>:

usart_t _usart = NULL;
void send_ffffff();

menu_t nextion_display_create_menu(const uint8_t page_count)
{
     384:	cf 93       	push	r28
     386:	c8 2f       	mov	r28, r24
	menu_t menu;
	menu.page_count = page_count;
	menu.pages = calloc(page_count, sizeof(page_t));
     388:	63 e0       	ldi	r22, 0x03	; 3
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 70 06 	call	0xce0	; 0xce0 <calloc>
	return menu;
}
     392:	68 2f       	mov	r22, r24
     394:	79 2f       	mov	r23, r25
     396:	8c 2f       	mov	r24, r28
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <nextion_display_add_page>:

void nextion_display_add_page(menu_t *menu, const uint8_t item_count)
{
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
	static uint8_t current=0;
	if(current < menu->page_count)
     3a2:	fc 01       	movw	r30, r24
     3a4:	22 81       	ldd	r18, Z+2	; 0x02
     3a6:	22 23       	and	r18, r18
     3a8:	69 f0       	breq	.+26     	; 0x3c4 <nextion_display_add_page+0x28>
     3aa:	16 2f       	mov	r17, r22
     3ac:	ec 01       	movw	r28, r24
	{
		page_t page;
		page.item_count = item_count;
		page.items = calloc(item_count, sizeof(item_t));
     3ae:	63 e0       	ldi	r22, 0x03	; 3
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	81 2f       	mov	r24, r17
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 70 06 	call	0xce0	; 0xce0 <calloc>
		menu->pages[current] = page;
     3ba:	e8 81       	ld	r30, Y
     3bc:	f9 81       	ldd	r31, Y+1	; 0x01
     3be:	91 83       	std	Z+1, r25	; 0x01
     3c0:	80 83       	st	Z, r24
     3c2:	12 83       	std	Z+2, r17	; 0x02
	}
	
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	08 95       	ret

000003cc <nextion_display_add_element>:

uint8_t nextion_display_add_element(page_t *page, char *id){
     3cc:	dc 01       	movw	r26, r24
	static uint8_t current = 0;
	if(current < page->item_count){
     3ce:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <current.2172>
     3d2:	12 96       	adiw	r26, 0x02	; 2
     3d4:	8c 91       	ld	r24, X
     3d6:	12 97       	sbiw	r26, 0x02	; 2
     3d8:	98 17       	cp	r25, r24
     3da:	90 f4       	brcc	.+36     	; 0x400 <__LOCK_REGION_LENGTH__>
		page->items[current].string_id = id;
     3dc:	29 2f       	mov	r18, r25
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	f9 01       	movw	r30, r18
     3e2:	ee 0f       	add	r30, r30
     3e4:	ff 1f       	adc	r31, r31
     3e6:	2e 0f       	add	r18, r30
     3e8:	3f 1f       	adc	r19, r31
     3ea:	ed 91       	ld	r30, X+
     3ec:	fc 91       	ld	r31, X
     3ee:	e2 0f       	add	r30, r18
     3f0:	f3 1f       	adc	r31, r19
     3f2:	72 83       	std	Z+2, r23	; 0x02
     3f4:	61 83       	std	Z+1, r22	; 0x01
		current++;
     3f6:	9f 5f       	subi	r25, 0xFF	; 255
     3f8:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <current.2172>
		return 1;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	08 95       	ret
	}
	return 0;
     400:	80 e0       	ldi	r24, 0x00	; 0
}
     402:	08 95       	ret

00000404 <nextion_display_init>:

void nextion_display_init(usart_t *usart)
{
	_usart = *usart;
     404:	fc 01       	movw	r30, r24
     406:	80 81       	ld	r24, Z
     408:	91 81       	ldd	r25, Z+1	; 0x01
     40a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <_usart+0x1>
     40e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <_usart>
     412:	08 95       	ret

00000414 <send_ffffff>:
		}
	}
}

void send_ffffff()
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	00 d0       	rcall	.+0      	; 0x41a <send_ffffff+0x6>
     41a:	00 d0       	rcall	.+0      	; 0x41c <send_ffffff+0x8>
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
	uint32_t var = 0xFFFFFF;
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	9f ef       	ldi	r25, 0xFF	; 255
     424:	af ef       	ldi	r26, 0xFF	; 255
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	89 83       	std	Y+1, r24	; 0x01
     42a:	9a 83       	std	Y+2, r25	; 0x02
     42c:	ab 83       	std	Y+3, r26	; 0x03
     42e:	bc 83       	std	Y+4, r27	; 0x04
	usart_write(_usart,&var,3);
     430:	43 e0       	ldi	r20, 0x03	; 3
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	be 01       	movw	r22, r28
     436:	6f 5f       	subi	r22, 0xFF	; 255
     438:	7f 4f       	sbci	r23, 0xFF	; 255
     43a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <_usart>
     43e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <_usart+0x1>
     442:	0e 94 45 04 	call	0x88a	; 0x88a <usart_write>
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <nextion_display_refresh>:
{
	_usart = *usart;
}

void nextion_display_refresh(menu_t *menu)
{
     454:	4f 92       	push	r4
     456:	5f 92       	push	r5
     458:	6f 92       	push	r6
     45a:	7f 92       	push	r7
     45c:	8f 92       	push	r8
     45e:	9f 92       	push	r9
     460:	af 92       	push	r10
     462:	bf 92       	push	r11
     464:	cf 92       	push	r12
     466:	df 92       	push	r13
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
	char *value=NULL;
	for(uint8_t i = 0; i<menu->page_count; i++)
     474:	dc 01       	movw	r26, r24
     476:	12 96       	adiw	r26, 0x02	; 2
     478:	2c 91       	ld	r18, X
     47a:	21 11       	cpse	r18, r1
     47c:	7d c0       	rjmp	.+250    	; 0x578 <__stack+0x79>
     47e:	9b c0       	rjmp	.+310    	; 0x5b6 <__stack+0xb7>
	{
		for(uint8_t j = 0;j<menu->pages[i].item_count; j++)
     480:	71 2c       	mov	r7, r1
		{
			value = calloc(3, sizeof(uint8_t));
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	83 e0       	ldi	r24, 0x03	; 3
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 70 06 	call	0xce0	; 0xce0 <calloc>
     48e:	58 2e       	mov	r5, r24
     490:	69 2e       	mov	r6, r25
			if(menu->pages[i].items[j].value>=0)
     492:	87 2d       	mov	r24, r7
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	ec 01       	movw	r28, r24
     498:	cc 0f       	add	r28, r28
     49a:	dd 1f       	adc	r29, r29
     49c:	c8 0f       	add	r28, r24
     49e:	d9 1f       	adc	r29, r25
     4a0:	d4 01       	movw	r26, r8
     4a2:	ed 91       	ld	r30, X+
     4a4:	fc 91       	ld	r31, X
     4a6:	ec 0f       	add	r30, r28
     4a8:	fd 1f       	adc	r31, r29
     4aa:	80 81       	ld	r24, Z
     4ac:	88 23       	and	r24, r24
     4ae:	9c f0       	brlt	.+38     	; 0x4d6 <nextion_display_refresh+0x82>
				sprintf(value,"%d",menu->pages[i].items[j].value);	
     4b0:	28 2f       	mov	r18, r24
     4b2:	08 2e       	mov	r0, r24
     4b4:	00 0c       	add	r0, r0
     4b6:	33 0b       	sbc	r19, r19
     4b8:	3f 93       	push	r19
     4ba:	8f 93       	push	r24
     4bc:	df 92       	push	r13
     4be:	cf 92       	push	r12
     4c0:	6f 92       	push	r6
     4c2:	5f 92       	push	r5
     4c4:	0e 94 b9 07 	call	0xf72	; 0xf72 <sprintf>
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	12 c0       	rjmp	.+36     	; 0x4fa <nextion_display_refresh+0xa6>
			else
				sprintf(value,"%+d",menu->pages[i].items[j].value);			
     4d6:	28 2f       	mov	r18, r24
     4d8:	08 2e       	mov	r0, r24
     4da:	00 0c       	add	r0, r0
     4dc:	33 0b       	sbc	r19, r19
     4de:	3f 93       	push	r19
     4e0:	8f 93       	push	r24
     4e2:	bf 92       	push	r11
     4e4:	af 92       	push	r10
     4e6:	6f 92       	push	r6
     4e8:	5f 92       	push	r5
     4ea:	0e 94 b9 07 	call	0xf72	; 0xf72 <sprintf>
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
			usart_write(_usart, menu->pages[i].items[j].string_id, strlen(menu->pages[i].items[j].string_id));
     4fa:	d7 01       	movw	r26, r14
     4fc:	ed 91       	ld	r30, X+
     4fe:	fc 91       	ld	r31, X
     500:	e0 0f       	add	r30, r16
     502:	f1 1f       	adc	r31, r17
     504:	80 81       	ld	r24, Z
     506:	91 81       	ldd	r25, Z+1	; 0x01
     508:	c8 0f       	add	r28, r24
     50a:	d9 1f       	adc	r29, r25
     50c:	69 81       	ldd	r22, Y+1	; 0x01
     50e:	7a 81       	ldd	r23, Y+2	; 0x02
     510:	fb 01       	movw	r30, r22
     512:	01 90       	ld	r0, Z+
     514:	00 20       	and	r0, r0
     516:	e9 f7       	brne	.-6      	; 0x512 <__stack+0x13>
     518:	31 97       	sbiw	r30, 0x01	; 1
     51a:	af 01       	movw	r20, r30
     51c:	46 1b       	sub	r20, r22
     51e:	57 0b       	sbc	r21, r23
     520:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <_usart>
     524:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <_usart+0x1>
     528:	0e 94 45 04 	call	0x88a	; 0x88a <usart_write>
			usart_write(_usart, value, strlen(value));
     52c:	a5 2d       	mov	r26, r5
     52e:	b6 2d       	mov	r27, r6
     530:	fd 01       	movw	r30, r26
     532:	01 90       	ld	r0, Z+
     534:	00 20       	and	r0, r0
     536:	e9 f7       	brne	.-6      	; 0x532 <__stack+0x33>
     538:	31 97       	sbiw	r30, 0x01	; 1
     53a:	af 01       	movw	r20, r30
     53c:	4a 1b       	sub	r20, r26
     53e:	5b 0b       	sbc	r21, r27
     540:	65 2d       	mov	r22, r5
     542:	76 2d       	mov	r23, r6
     544:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <_usart>
     548:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <_usart+0x1>
     54c:	0e 94 45 04 	call	0x88a	; 0x88a <usart_write>
			send_ffffff();
     550:	0e 94 0a 02 	call	0x414	; 0x414 <send_ffffff>
void nextion_display_refresh(menu_t *menu)
{
	char *value=NULL;
	for(uint8_t i = 0; i<menu->page_count; i++)
	{
		for(uint8_t j = 0;j<menu->pages[i].item_count; j++)
     554:	73 94       	inc	r7
     556:	f7 01       	movw	r30, r14
     558:	80 80       	ld	r8, Z
     55a:	91 80       	ldd	r9, Z+1	; 0x01
     55c:	80 0e       	add	r8, r16
     55e:	91 1e       	adc	r9, r17
     560:	d4 01       	movw	r26, r8
     562:	12 96       	adiw	r26, 0x02	; 2
     564:	8c 91       	ld	r24, X
     566:	78 16       	cp	r7, r24
     568:	08 f4       	brcc	.+2      	; 0x56c <__stack+0x6d>
     56a:	8b cf       	rjmp	.-234    	; 0x482 <nextion_display_refresh+0x2e>
}

void nextion_display_refresh(menu_t *menu)
{
	char *value=NULL;
	for(uint8_t i = 0; i<menu->page_count; i++)
     56c:	43 94       	inc	r4
     56e:	f7 01       	movw	r30, r14
     570:	82 81       	ldd	r24, Z+2	; 0x02
     572:	48 16       	cp	r4, r24
     574:	78 f0       	brcs	.+30     	; 0x594 <__stack+0x95>
     576:	1f c0       	rjmp	.+62     	; 0x5b6 <__stack+0xb7>
     578:	7c 01       	movw	r14, r24
     57a:	41 2c       	mov	r4, r1
		{
			value = calloc(3, sizeof(uint8_t));
			if(menu->pages[i].items[j].value>=0)
				sprintf(value,"%d",menu->pages[i].items[j].value);	
			else
				sprintf(value,"%+d",menu->pages[i].items[j].value);			
     57c:	0f 2e       	mov	r0, r31
     57e:	fd e2       	ldi	r31, 0x2D	; 45
     580:	af 2e       	mov	r10, r31
     582:	f1 e0       	ldi	r31, 0x01	; 1
     584:	bf 2e       	mov	r11, r31
     586:	f0 2d       	mov	r31, r0
	{
		for(uint8_t j = 0;j<menu->pages[i].item_count; j++)
		{
			value = calloc(3, sizeof(uint8_t));
			if(menu->pages[i].items[j].value>=0)
				sprintf(value,"%d",menu->pages[i].items[j].value);	
     588:	0f 2e       	mov	r0, r31
     58a:	fa e2       	ldi	r31, 0x2A	; 42
     58c:	cf 2e       	mov	r12, r31
     58e:	f1 e0       	ldi	r31, 0x01	; 1
     590:	df 2e       	mov	r13, r31
     592:	f0 2d       	mov	r31, r0
void nextion_display_refresh(menu_t *menu)
{
	char *value=NULL;
	for(uint8_t i = 0; i<menu->page_count; i++)
	{
		for(uint8_t j = 0;j<menu->pages[i].item_count; j++)
     594:	84 2d       	mov	r24, r4
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	8c 01       	movw	r16, r24
     59a:	00 0f       	add	r16, r16
     59c:	11 1f       	adc	r17, r17
     59e:	08 0f       	add	r16, r24
     5a0:	19 1f       	adc	r17, r25
     5a2:	d7 01       	movw	r26, r14
     5a4:	8d 90       	ld	r8, X+
     5a6:	9c 90       	ld	r9, X
     5a8:	80 0e       	add	r8, r16
     5aa:	91 1e       	adc	r9, r17
     5ac:	f4 01       	movw	r30, r8
     5ae:	82 81       	ldd	r24, Z+2	; 0x02
     5b0:	81 11       	cpse	r24, r1
     5b2:	66 cf       	rjmp	.-308    	; 0x480 <nextion_display_refresh+0x2c>
     5b4:	db cf       	rjmp	.-74     	; 0x56c <__stack+0x6d>
			usart_write(_usart, menu->pages[i].items[j].string_id, strlen(menu->pages[i].items[j].string_id));
			usart_write(_usart, value, strlen(value));
			send_ffffff();
		}
	}
}
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	9f 90       	pop	r9
     5cc:	8f 90       	pop	r8
     5ce:	7f 90       	pop	r7
     5d0:	6f 90       	pop	r6
     5d2:	5f 90       	pop	r5
     5d4:	4f 90       	pop	r4
     5d6:	08 95       	ret

000005d8 <one_wire_reset>:
void write_1();

// Установить сигнал сброса на линии 1-wire
device_state one_wire_reset()
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     5d8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5da:	f8 94       	cli
		SET_IOPIN_TO_OUT;
     5dc:	d0 9a       	sbi	0x1a, 0	; 26
		PULL_DOWN_IOPIN;
     5de:	d8 98       	cbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e0:	ef ee       	ldi	r30, 0xEF	; 239
     5e2:	fa e0       	ldi	r31, 0x0A	; 10
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <one_wire_reset+0xc>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <one_wire_reset+0x12>
     5ea:	00 00       	nop
		_delay_us(700);
		PULL_UP_IOPIN;
     5ec:	d8 9a       	sbi	0x1b, 0	; 27
     5ee:	eb e2       	ldi	r30, 0x2B	; 43
     5f0:	f1 e0       	ldi	r31, 0x01	; 1
     5f2:	31 97       	sbiw	r30, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <one_wire_reset+0x1a>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <one_wire_reset+0x20>
     5f8:	00 00       	nop
		_delay_us(75);
		SET_IOPIN_TO_IN;
     5fa:	d0 98       	cbi	0x1a, 0	; 26
		if(GET_IOPIN_STATE)
     5fc:	c8 99       	sbic	0x19, 0	; 25
     5fe:	0c c0       	rjmp	.+24     	; 0x618 <one_wire_reset+0x40>
     600:	ef ee       	ldi	r30, 0xEF	; 239
     602:	fa e0       	ldi	r31, 0x0A	; 10
     604:	31 97       	sbiw	r30, 0x01	; 1
     606:	f1 f7       	brne	.-4      	; 0x604 <one_wire_reset+0x2c>
     608:	00 c0       	rjmp	.+0      	; 0x60a <one_wire_reset+0x32>
     60a:	00 00       	nop
		return DEVICE_MISSED;
		_delay_us(700);
		if(!GET_IOPIN_STATE)
     60c:	89 b3       	in	r24, 0x19	; 25
     60e:	88 23       	and	r24, r24
     610:	29 f0       	breq	.+10     	; 0x61c <one_wire_reset+0x44>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     612:	9f bf       	out	0x3f, r25	; 63
		return DEVICE_SHORT;
	}
	return DEVICE_OK;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	08 95       	ret
		_delay_us(700);
		PULL_UP_IOPIN;
		_delay_us(75);
		SET_IOPIN_TO_IN;
		if(GET_IOPIN_STATE)
		return DEVICE_MISSED;
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	01 c0       	rjmp	.+2      	; 0x61e <one_wire_reset+0x46>
		_delay_us(700);
		if(!GET_IOPIN_STATE)
		return DEVICE_SHORT;
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	9f bf       	out	0x3f, r25	; 63
	}
	return DEVICE_OK;
}
     620:	08 95       	ret

00000622 <read_byte>:
}

uint8_t read_byte()
{
	uint8_t data = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     622:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     624:	f8 94       	cli
	{
		SET_IOPIN_TO_OUT;
     626:	d0 9a       	sbi	0x1a, 0	; 26
     628:	98 e0       	ldi	r25, 0x08	; 8
     62a:	80 e0       	ldi	r24, 0x00	; 0
		for(uint8_t i=8;i>0;--i)
		{
			data>>=1; // если эту строку пеенести в конец цикла - функция перестает работать
     62c:	86 95       	lsr	r24
			PULL_DOWN_IOPIN;
     62e:	d8 98       	cbi	0x1b, 0	; 27
     630:	30 e1       	ldi	r19, 0x10	; 16
     632:	3a 95       	dec	r19
     634:	f1 f7       	brne	.-4      	; 0x632 <read_byte+0x10>
			
			_delay_us(3);
			PULL_UP_IOPIN;
     636:	d8 9a       	sbi	0x1b, 0	; 27
			SET_IOPIN_TO_IN;
     638:	d0 98       	cbi	0x1a, 0	; 26
     63a:	e0 e4       	ldi	r30, 0x40	; 64
     63c:	ea 95       	dec	r30
     63e:	f1 f7       	brne	.-4      	; 0x63c <read_byte+0x1a>
			_delay_us(12);
			
			if(GET_IOPIN_STATE)
     640:	c8 99       	sbic	0x19, 0	; 25
			{
				data|=0x80;
     642:	80 68       	ori	r24, 0x80	; 128
			}
			SET_IOPIN_TO_OUT;
     644:	d0 9a       	sbi	0x1a, 0	; 26
			PULL_UP_IOPIN;
     646:	d8 9a       	sbi	0x1b, 0	; 27
     648:	eb e2       	ldi	r30, 0x2B	; 43
     64a:	f1 e0       	ldi	r31, 0x01	; 1
     64c:	31 97       	sbiw	r30, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <read_byte+0x2a>
     650:	00 c0       	rjmp	.+0      	; 0x652 <read_byte+0x30>
     652:	00 00       	nop
     654:	91 50       	subi	r25, 0x01	; 1
{
	uint8_t data = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		SET_IOPIN_TO_OUT;
		for(uint8_t i=8;i>0;--i)
     656:	51 f7       	brne	.-44     	; 0x62c <read_byte+0xa>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     658:	2f bf       	out	0x3f, r18	; 63
			_delay_us(75);
			
		}
	}
	return data;
}
     65a:	08 95       	ret

0000065c <write_0>:


void write_0(){
	SET_IOPIN_TO_OUT;
     65c:	d0 9a       	sbi	0x1a, 0	; 26
	PULL_DOWN_IOPIN;
     65e:	d8 98       	cbi	0x1b, 0	; 27
     660:	80 e5       	ldi	r24, 0x50	; 80
     662:	8a 95       	dec	r24
     664:	f1 f7       	brne	.-4      	; 0x662 <write_0+0x6>
     666:	80 ef       	ldi	r24, 0xF0	; 240
     668:	8a 95       	dec	r24
     66a:	f1 f7       	brne	.-4      	; 0x668 <write_0+0xc>
	_delay_us(15);
	_delay_us(45);
	PULL_UP_IOPIN;
     66c:	d8 9a       	sbi	0x1b, 0	; 27
     66e:	8a e0       	ldi	r24, 0x0A	; 10
     670:	8a 95       	dec	r24
     672:	f1 f7       	brne	.-4      	; 0x670 <write_0+0x14>
     674:	00 c0       	rjmp	.+0      	; 0x676 <write_0+0x1a>
     676:	08 95       	ret

00000678 <write_1>:
	_delay_us(2);
}

void write_1(){
	SET_IOPIN_TO_OUT;
     678:	d0 9a       	sbi	0x1a, 0	; 26
	PULL_DOWN_IOPIN;
     67a:	d8 98       	cbi	0x1b, 0	; 27
     67c:	80 e5       	ldi	r24, 0x50	; 80
     67e:	8a 95       	dec	r24
     680:	f1 f7       	brne	.-4      	; 0x67e <write_1+0x6>
	_delay_us(15);
	PULL_UP_IOPIN;
     682:	d8 9a       	sbi	0x1b, 0	; 27
     684:	8a ef       	ldi	r24, 0xFA	; 250
     686:	8a 95       	dec	r24
     688:	f1 f7       	brne	.-4      	; 0x686 <write_1+0xe>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <write_1+0x14>
     68c:	08 95       	ret

0000068e <write_byte>:
	}
	return DEVICE_OK;
}

void write_byte(uint8_t data)
{
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     69c:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     69e:	f8 94       	cli
     6a0:	08 e0       	ldi	r16, 0x08	; 8
     6a2:	10 e0       	ldi	r17, 0x00	; 0
     6a4:	c1 e0       	ldi	r28, 0x01	; 1
     6a6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(uint16_t i=1;i<=128;i*=2){
			if(data & i)
     6a8:	e8 2e       	mov	r14, r24
     6aa:	f1 2c       	mov	r15, r1
     6ac:	c7 01       	movw	r24, r14
     6ae:	8c 23       	and	r24, r28
     6b0:	9d 23       	and	r25, r29
     6b2:	89 2b       	or	r24, r25
     6b4:	19 f0       	breq	.+6      	; 0x6bc <write_byte+0x2e>
			write_1();
     6b6:	0e 94 3c 03 	call	0x678	; 0x678 <write_1>
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <write_byte+0x32>
			else
			write_0();
     6bc:	0e 94 2e 03 	call	0x65c	; 0x65c <write_0>

void write_byte(uint8_t data)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		for(uint16_t i=1;i<=128;i*=2){
     6c0:	cc 0f       	add	r28, r28
     6c2:	dd 1f       	adc	r29, r29
     6c4:	01 50       	subi	r16, 0x01	; 1
     6c6:	11 09       	sbc	r17, r1
     6c8:	89 f7       	brne	.-30     	; 0x6ac <write_byte+0x1e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6ca:	df be       	out	0x3f, r13	; 63
			write_1();
			else
			write_0();
		}
	}
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	df 90       	pop	r13
     6da:	08 95       	ret

000006dc <usart_0_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		buffer_read_bytes(port->rx_buffer, data, length);
	}
}
     6dc:	a0 e0       	ldi	r26, 0x00	; 0
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	aa 1f       	adc	r26, r26
     6e6:	bb 1f       	adc	r27, r27
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	aa 1f       	adc	r26, r26
     6ee:	bb 1f       	adc	r27, r27
     6f0:	9c 01       	movw	r18, r24
     6f2:	ad 01       	movw	r20, r26
     6f4:	22 0f       	add	r18, r18
     6f6:	33 1f       	adc	r19, r19
     6f8:	44 1f       	adc	r20, r20
     6fa:	55 1f       	adc	r21, r21
     6fc:	22 0f       	add	r18, r18
     6fe:	33 1f       	adc	r19, r19
     700:	44 1f       	adc	r20, r20
     702:	55 1f       	adc	r21, r21
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	74 e2       	ldi	r23, 0x24	; 36
     708:	84 ef       	ldi	r24, 0xF4	; 244
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__udivmodsi4>
     710:	da 01       	movw	r26, r20
     712:	c9 01       	movw	r24, r18
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	a1 09       	sbc	r26, r1
     718:	b1 09       	sbc	r27, r1
     71a:	89 b9       	out	0x09, r24	; 9
     71c:	89 2f       	mov	r24, r25
     71e:	9a 2f       	mov	r25, r26
     720:	ab 2f       	mov	r26, r27
     722:	bb 27       	eor	r27, r27
     724:	a7 fd       	sbrc	r26, 7
     726:	ba 95       	dec	r27
     728:	80 bd       	out	0x20, r24	; 32
     72a:	1b b8       	out	0x0b, r1	; 11
     72c:	88 ed       	ldi	r24, 0xD8	; 216
     72e:	8a b9       	out	0x0a, r24	; 10
     730:	86 e0       	ldi	r24, 0x06	; 6
     732:	80 bd       	out	0x20, r24	; 32
     734:	08 95       	ret

00000736 <usart_1_init>:
     736:	a0 e0       	ldi	r26, 0x00	; 0
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	aa 1f       	adc	r26, r26
     740:	bb 1f       	adc	r27, r27
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	aa 1f       	adc	r26, r26
     748:	bb 1f       	adc	r27, r27
     74a:	9c 01       	movw	r18, r24
     74c:	ad 01       	movw	r20, r26
     74e:	22 0f       	add	r18, r18
     750:	33 1f       	adc	r19, r19
     752:	44 1f       	adc	r20, r20
     754:	55 1f       	adc	r21, r21
     756:	22 0f       	add	r18, r18
     758:	33 1f       	adc	r19, r19
     75a:	44 1f       	adc	r20, r20
     75c:	55 1f       	adc	r21, r21
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	74 e2       	ldi	r23, 0x24	; 36
     762:	84 ef       	ldi	r24, 0xF4	; 244
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__udivmodsi4>
     76a:	21 50       	subi	r18, 0x01	; 1
     76c:	31 09       	sbc	r19, r1
     76e:	20 b9       	out	0x00, r18	; 0
     770:	3c bf       	out	0x3c, r19	; 60
     772:	12 b8       	out	0x02, r1	; 2
     774:	88 ed       	ldi	r24, 0xD8	; 216
     776:	81 b9       	out	0x01, r24	; 1
     778:	86 e0       	ldi	r24, 0x06	; 6
     77a:	8c bf       	out	0x3c, r24	; 60
     77c:	08 95       	ret

0000077e <usart_1_ensure_write>:
     77e:	cf 93       	push	r28
     780:	cf b7       	in	r28, 0x3f	; 63
     782:	f8 94       	cli
     784:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usarts+0xe>
     788:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <usarts+0xf>
     78c:	0e 94 b1 00 	call	0x162	; 0x162 <buffer_is_empty>
     790:	81 11       	cpse	r24, r1
     792:	0b c0       	rjmp	.+22     	; 0x7aa <usart_1_ensure_write+0x2c>
     794:	15 9b       	sbis	0x02, 5	; 2
     796:	07 c0       	rjmp	.+14     	; 0x7a6 <usart_1_ensure_write+0x28>
     798:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usarts+0xe>
     79c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <usarts+0xf>
     7a0:	0e 94 a0 00 	call	0x140	; 0x140 <buffer_read>
     7a4:	83 b9       	out	0x03, r24	; 3
     7a6:	cf bf       	out	0x3f, r28	; 63
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <usart_1_ensure_write+0x2e>
     7aa:	cf bf       	out	0x3f, r28	; 63
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <usart_0_ensure_write>:
     7b0:	cf 93       	push	r28
     7b2:	cf b7       	in	r28, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <usarts+0x4>
     7ba:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usarts+0x5>
     7be:	0e 94 b1 00 	call	0x162	; 0x162 <buffer_is_empty>
     7c2:	81 11       	cpse	r24, r1
     7c4:	0b c0       	rjmp	.+22     	; 0x7dc <usart_0_ensure_write+0x2c>
     7c6:	5d 9b       	sbis	0x0b, 5	; 11
     7c8:	07 c0       	rjmp	.+14     	; 0x7d8 <usart_0_ensure_write+0x28>
     7ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <usarts+0x4>
     7ce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usarts+0x5>
     7d2:	0e 94 a0 00 	call	0x140	; 0x140 <buffer_read>
     7d6:	8c b9       	out	0x0c, r24	; 12
     7d8:	cf bf       	out	0x3f, r28	; 63
     7da:	01 c0       	rjmp	.+2      	; 0x7de <usart_0_ensure_write+0x2e>
     7dc:	cf bf       	out	0x3f, r28	; 63
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <usart_create>:
     7e2:	9f 92       	push	r9
     7e4:	af 92       	push	r10
     7e6:	bf 92       	push	r11
     7e8:	cf 92       	push	r12
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	98 2e       	mov	r9, r24
     7fa:	6b 01       	movw	r12, r22
     7fc:	7a 01       	movw	r14, r20
     7fe:	21 e0       	ldi	r18, 0x01	; 1
     800:	28 17       	cp	r18, r24
     802:	10 f4       	brcc	.+4      	; 0x808 <usart_create+0x26>
     804:	0e 94 ad 07 	call	0xf5a	; 0xf5a <abort>
     808:	08 2f       	mov	r16, r24
     80a:	10 e0       	ldi	r17, 0x00	; 0
     80c:	58 01       	movw	r10, r16
     80e:	aa 0c       	add	r10, r10
     810:	bb 1c       	adc	r11, r11
     812:	c8 01       	movw	r24, r16
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	8a 0d       	add	r24, r10
     822:	9b 1d       	adc	r25, r11
     824:	fc 01       	movw	r30, r24
     826:	ea 5f       	subi	r30, 0xFA	; 250
     828:	fe 4f       	sbci	r31, 0xFE	; 254
     82a:	5f 01       	movw	r10, r30
     82c:	80 81       	ld	r24, Z
     82e:	81 11       	cpse	r24, r1
     830:	0e 94 ad 07 	call	0xf5a	; 0xf5a <abort>
     834:	ca 01       	movw	r24, r20
     836:	0e 94 57 00 	call	0xae	; 0xae <buffer_create>
     83a:	e8 01       	movw	r28, r16
     83c:	cc 0f       	add	r28, r28
     83e:	dd 1f       	adc	r29, r29
     840:	00 0f       	add	r16, r16
     842:	11 1f       	adc	r17, r17
     844:	00 0f       	add	r16, r16
     846:	11 1f       	adc	r17, r17
     848:	00 0f       	add	r16, r16
     84a:	11 1f       	adc	r17, r17
     84c:	c0 0f       	add	r28, r16
     84e:	d1 1f       	adc	r29, r17
     850:	ca 5f       	subi	r28, 0xFA	; 250
     852:	de 4f       	sbci	r29, 0xFE	; 254
     854:	9b 83       	std	Y+3, r25	; 0x03
     856:	8a 83       	std	Y+2, r24	; 0x02
     858:	c7 01       	movw	r24, r14
     85a:	0e 94 57 00 	call	0xae	; 0xae <buffer_create>
     85e:	9d 83       	std	Y+5, r25	; 0x05
     860:	8c 83       	std	Y+4, r24	; 0x04
     862:	99 82       	std	Y+1, r9	; 0x01
     864:	ee 81       	ldd	r30, Y+6	; 0x06
     866:	ff 81       	ldd	r31, Y+7	; 0x07
     868:	c6 01       	movw	r24, r12
     86a:	09 95       	icall
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	88 83       	st	Y, r24
     870:	c5 01       	movw	r24, r10
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	bf 90       	pop	r11
     884:	af 90       	pop	r10
     886:	9f 90       	pop	r9
     888:	08 95       	ret

0000088a <usart_write>:
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	ec 01       	movw	r28, r24
     892:	41 15       	cp	r20, r1
     894:	51 05       	cpc	r21, r1
     896:	11 f4       	brne	.+4      	; 0x89c <usart_write+0x12>
     898:	0e 94 ad 07 	call	0xf5a	; 0xf5a <abort>
     89c:	1f b7       	in	r17, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	8c 81       	ldd	r24, Y+4	; 0x04
     8a2:	9d 81       	ldd	r25, Y+5	; 0x05
     8a4:	0e 94 84 00 	call	0x108	; 0x108 <buffer_write_bytes>
     8a8:	1f bf       	out	0x3f, r17	; 63
     8aa:	e8 85       	ldd	r30, Y+8	; 0x08
     8ac:	f9 85       	ldd	r31, Y+9	; 0x09
     8ae:	09 95       	icall
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	08 95       	ret

000008b8 <__vector_20>:
			UDR1 = buffer_read(USART_1->tx_buffer);
		}
	}
}

ISR(USART1_RXC_vect){
     8b8:	1f 92       	push	r1
     8ba:	0f 92       	push	r0
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	0f 92       	push	r0
     8c0:	11 24       	eor	r1, r1
     8c2:	2f 93       	push	r18
     8c4:	3f 93       	push	r19
     8c6:	4f 93       	push	r20
     8c8:	5f 93       	push	r21
     8ca:	6f 93       	push	r22
     8cc:	7f 93       	push	r23
     8ce:	8f 93       	push	r24
     8d0:	9f 93       	push	r25
     8d2:	af 93       	push	r26
     8d4:	bf 93       	push	r27
     8d6:	ef 93       	push	r30
     8d8:	ff 93       	push	r31
	buffer_write(USART_1->rx_buffer, UDR1);
     8da:	63 b1       	in	r22, 0x03	; 3
     8dc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <usarts+0xc>
     8e0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <usarts+0xd>
     8e4:	0e 94 72 00 	call	0xe4	; 0xe4 <buffer_write>
}
     8e8:	ff 91       	pop	r31
     8ea:	ef 91       	pop	r30
     8ec:	bf 91       	pop	r27
     8ee:	af 91       	pop	r26
     8f0:	9f 91       	pop	r25
     8f2:	8f 91       	pop	r24
     8f4:	7f 91       	pop	r23
     8f6:	6f 91       	pop	r22
     8f8:	5f 91       	pop	r21
     8fa:	4f 91       	pop	r20
     8fc:	3f 91       	pop	r19
     8fe:	2f 91       	pop	r18
     900:	0f 90       	pop	r0
     902:	0f be       	out	0x3f, r0	; 63
     904:	0f 90       	pop	r0
     906:	1f 90       	pop	r1
     908:	18 95       	reti

0000090a <__vector_24>:

ISR(USART1_TXC_vect){
     90a:	1f 92       	push	r1
     90c:	0f 92       	push	r0
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	0f 92       	push	r0
     912:	11 24       	eor	r1, r1
     914:	2f 93       	push	r18
     916:	3f 93       	push	r19
     918:	4f 93       	push	r20
     91a:	5f 93       	push	r21
     91c:	6f 93       	push	r22
     91e:	7f 93       	push	r23
     920:	8f 93       	push	r24
     922:	9f 93       	push	r25
     924:	af 93       	push	r26
     926:	bf 93       	push	r27
     928:	ef 93       	push	r30
     92a:	ff 93       	push	r31
	if(!buffer_is_empty(USART_1->tx_buffer))
     92c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usarts+0xe>
     930:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <usarts+0xf>
     934:	0e 94 b1 00 	call	0x162	; 0x162 <buffer_is_empty>
     938:	81 11       	cpse	r24, r1
     93a:	07 c0       	rjmp	.+14     	; 0x94a <__vector_24+0x40>
	{
		UDR1 = buffer_read(USART_1->tx_buffer);
     93c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usarts+0xe>
     940:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <usarts+0xf>
     944:	0e 94 a0 00 	call	0x140	; 0x140 <buffer_read>
     948:	83 b9       	out	0x03, r24	; 3
	}
}
     94a:	ff 91       	pop	r31
     94c:	ef 91       	pop	r30
     94e:	bf 91       	pop	r27
     950:	af 91       	pop	r26
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	7f 91       	pop	r23
     958:	6f 91       	pop	r22
     95a:	5f 91       	pop	r21
     95c:	4f 91       	pop	r20
     95e:	3f 91       	pop	r19
     960:	2f 91       	pop	r18
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	0f 90       	pop	r0
     968:	1f 90       	pop	r1
     96a:	18 95       	reti

0000096c <__vector_19>:

ISR(USART0_RXC_vect){
     96c:	1f 92       	push	r1
     96e:	0f 92       	push	r0
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	0f 92       	push	r0
     974:	11 24       	eor	r1, r1
     976:	2f 93       	push	r18
     978:	3f 93       	push	r19
     97a:	4f 93       	push	r20
     97c:	5f 93       	push	r21
     97e:	6f 93       	push	r22
     980:	7f 93       	push	r23
     982:	8f 93       	push	r24
     984:	9f 93       	push	r25
     986:	af 93       	push	r26
     988:	bf 93       	push	r27
     98a:	ef 93       	push	r30
     98c:	ff 93       	push	r31
	buffer_write(USART_0->rx_buffer, UDR0);
     98e:	6c b1       	in	r22, 0x0c	; 12
     990:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <usarts+0x2>
     994:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <usarts+0x3>
     998:	0e 94 72 00 	call	0xe4	; 0xe4 <buffer_write>
}
     99c:	ff 91       	pop	r31
     99e:	ef 91       	pop	r30
     9a0:	bf 91       	pop	r27
     9a2:	af 91       	pop	r26
     9a4:	9f 91       	pop	r25
     9a6:	8f 91       	pop	r24
     9a8:	7f 91       	pop	r23
     9aa:	6f 91       	pop	r22
     9ac:	5f 91       	pop	r21
     9ae:	4f 91       	pop	r20
     9b0:	3f 91       	pop	r19
     9b2:	2f 91       	pop	r18
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	0f 90       	pop	r0
     9ba:	1f 90       	pop	r1
     9bc:	18 95       	reti

000009be <__vector_23>:

ISR(USART0_TXC_vect){
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	11 24       	eor	r1, r1
     9c8:	2f 93       	push	r18
     9ca:	3f 93       	push	r19
     9cc:	4f 93       	push	r20
     9ce:	5f 93       	push	r21
     9d0:	6f 93       	push	r22
     9d2:	7f 93       	push	r23
     9d4:	8f 93       	push	r24
     9d6:	9f 93       	push	r25
     9d8:	af 93       	push	r26
     9da:	bf 93       	push	r27
     9dc:	ef 93       	push	r30
     9de:	ff 93       	push	r31

	if(!buffer_is_empty(USART_0->tx_buffer))
     9e0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <usarts+0x4>
     9e4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usarts+0x5>
     9e8:	0e 94 b1 00 	call	0x162	; 0x162 <buffer_is_empty>
     9ec:	81 11       	cpse	r24, r1
     9ee:	07 c0       	rjmp	.+14     	; 0x9fe <__vector_23+0x40>
	{
		 UDR0 = buffer_read(USART_0->tx_buffer);
     9f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <usarts+0x4>
     9f4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usarts+0x5>
     9f8:	0e 94 a0 00 	call	0x140	; 0x140 <buffer_read>
     9fc:	8c b9       	out	0x0c, r24	; 12
	}
}
     9fe:	ff 91       	pop	r31
     a00:	ef 91       	pop	r30
     a02:	bf 91       	pop	r27
     a04:	af 91       	pop	r26
     a06:	9f 91       	pop	r25
     a08:	8f 91       	pop	r24
     a0a:	7f 91       	pop	r23
     a0c:	6f 91       	pop	r22
     a0e:	5f 91       	pop	r21
     a10:	4f 91       	pop	r20
     a12:	3f 91       	pop	r19
     a14:	2f 91       	pop	r18
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <__fixunssfsi>:
     a20:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_splitA>
     a24:	88 f0       	brcs	.+34     	; 0xa48 <__fixunssfsi+0x28>
     a26:	9f 57       	subi	r25, 0x7F	; 127
     a28:	98 f0       	brcs	.+38     	; 0xa50 <__fixunssfsi+0x30>
     a2a:	b9 2f       	mov	r27, r25
     a2c:	99 27       	eor	r25, r25
     a2e:	b7 51       	subi	r27, 0x17	; 23
     a30:	b0 f0       	brcs	.+44     	; 0xa5e <__fixunssfsi+0x3e>
     a32:	e1 f0       	breq	.+56     	; 0xa6c <__fixunssfsi+0x4c>
     a34:	66 0f       	add	r22, r22
     a36:	77 1f       	adc	r23, r23
     a38:	88 1f       	adc	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	1a f0       	brmi	.+6      	; 0xa44 <__fixunssfsi+0x24>
     a3e:	ba 95       	dec	r27
     a40:	c9 f7       	brne	.-14     	; 0xa34 <__fixunssfsi+0x14>
     a42:	14 c0       	rjmp	.+40     	; 0xa6c <__fixunssfsi+0x4c>
     a44:	b1 30       	cpi	r27, 0x01	; 1
     a46:	91 f0       	breq	.+36     	; 0xa6c <__fixunssfsi+0x4c>
     a48:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_zero>
     a4c:	b1 e0       	ldi	r27, 0x01	; 1
     a4e:	08 95       	ret
     a50:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__fp_zero>
     a54:	67 2f       	mov	r22, r23
     a56:	78 2f       	mov	r23, r24
     a58:	88 27       	eor	r24, r24
     a5a:	b8 5f       	subi	r27, 0xF8	; 248
     a5c:	39 f0       	breq	.+14     	; 0xa6c <__fixunssfsi+0x4c>
     a5e:	b9 3f       	cpi	r27, 0xF9	; 249
     a60:	cc f3       	brlt	.-14     	; 0xa54 <__fixunssfsi+0x34>
     a62:	86 95       	lsr	r24
     a64:	77 95       	ror	r23
     a66:	67 95       	ror	r22
     a68:	b3 95       	inc	r27
     a6a:	d9 f7       	brne	.-10     	; 0xa62 <__fixunssfsi+0x42>
     a6c:	3e f4       	brtc	.+14     	; 0xa7c <__fixunssfsi+0x5c>
     a6e:	90 95       	com	r25
     a70:	80 95       	com	r24
     a72:	70 95       	com	r23
     a74:	61 95       	neg	r22
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	8f 4f       	sbci	r24, 0xFF	; 255
     a7a:	9f 4f       	sbci	r25, 0xFF	; 255
     a7c:	08 95       	ret

00000a7e <__floatunsisf>:
     a7e:	e8 94       	clt
     a80:	09 c0       	rjmp	.+18     	; 0xa94 <__floatsisf+0x12>

00000a82 <__floatsisf>:
     a82:	97 fb       	bst	r25, 7
     a84:	3e f4       	brtc	.+14     	; 0xa94 <__floatsisf+0x12>
     a86:	90 95       	com	r25
     a88:	80 95       	com	r24
     a8a:	70 95       	com	r23
     a8c:	61 95       	neg	r22
     a8e:	7f 4f       	sbci	r23, 0xFF	; 255
     a90:	8f 4f       	sbci	r24, 0xFF	; 255
     a92:	9f 4f       	sbci	r25, 0xFF	; 255
     a94:	99 23       	and	r25, r25
     a96:	a9 f0       	breq	.+42     	; 0xac2 <__floatsisf+0x40>
     a98:	f9 2f       	mov	r31, r25
     a9a:	96 e9       	ldi	r25, 0x96	; 150
     a9c:	bb 27       	eor	r27, r27
     a9e:	93 95       	inc	r25
     aa0:	f6 95       	lsr	r31
     aa2:	87 95       	ror	r24
     aa4:	77 95       	ror	r23
     aa6:	67 95       	ror	r22
     aa8:	b7 95       	ror	r27
     aaa:	f1 11       	cpse	r31, r1
     aac:	f8 cf       	rjmp	.-16     	; 0xa9e <__floatsisf+0x1c>
     aae:	fa f4       	brpl	.+62     	; 0xaee <__floatsisf+0x6c>
     ab0:	bb 0f       	add	r27, r27
     ab2:	11 f4       	brne	.+4      	; 0xab8 <__floatsisf+0x36>
     ab4:	60 ff       	sbrs	r22, 0
     ab6:	1b c0       	rjmp	.+54     	; 0xaee <__floatsisf+0x6c>
     ab8:	6f 5f       	subi	r22, 0xFF	; 255
     aba:	7f 4f       	sbci	r23, 0xFF	; 255
     abc:	8f 4f       	sbci	r24, 0xFF	; 255
     abe:	9f 4f       	sbci	r25, 0xFF	; 255
     ac0:	16 c0       	rjmp	.+44     	; 0xaee <__floatsisf+0x6c>
     ac2:	88 23       	and	r24, r24
     ac4:	11 f0       	breq	.+4      	; 0xaca <__floatsisf+0x48>
     ac6:	96 e9       	ldi	r25, 0x96	; 150
     ac8:	11 c0       	rjmp	.+34     	; 0xaec <__floatsisf+0x6a>
     aca:	77 23       	and	r23, r23
     acc:	21 f0       	breq	.+8      	; 0xad6 <__floatsisf+0x54>
     ace:	9e e8       	ldi	r25, 0x8E	; 142
     ad0:	87 2f       	mov	r24, r23
     ad2:	76 2f       	mov	r23, r22
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <__floatsisf+0x5e>
     ad6:	66 23       	and	r22, r22
     ad8:	71 f0       	breq	.+28     	; 0xaf6 <__floatsisf+0x74>
     ada:	96 e8       	ldi	r25, 0x86	; 134
     adc:	86 2f       	mov	r24, r22
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	2a f0       	brmi	.+10     	; 0xaee <__floatsisf+0x6c>
     ae4:	9a 95       	dec	r25
     ae6:	66 0f       	add	r22, r22
     ae8:	77 1f       	adc	r23, r23
     aea:	88 1f       	adc	r24, r24
     aec:	da f7       	brpl	.-10     	; 0xae4 <__floatsisf+0x62>
     aee:	88 0f       	add	r24, r24
     af0:	96 95       	lsr	r25
     af2:	87 95       	ror	r24
     af4:	97 f9       	bld	r25, 7
     af6:	08 95       	ret

00000af8 <__fp_split3>:
     af8:	57 fd       	sbrc	r21, 7
     afa:	90 58       	subi	r25, 0x80	; 128
     afc:	44 0f       	add	r20, r20
     afe:	55 1f       	adc	r21, r21
     b00:	59 f0       	breq	.+22     	; 0xb18 <__fp_splitA+0x10>
     b02:	5f 3f       	cpi	r21, 0xFF	; 255
     b04:	71 f0       	breq	.+28     	; 0xb22 <__fp_splitA+0x1a>
     b06:	47 95       	ror	r20

00000b08 <__fp_splitA>:
     b08:	88 0f       	add	r24, r24
     b0a:	97 fb       	bst	r25, 7
     b0c:	99 1f       	adc	r25, r25
     b0e:	61 f0       	breq	.+24     	; 0xb28 <__fp_splitA+0x20>
     b10:	9f 3f       	cpi	r25, 0xFF	; 255
     b12:	79 f0       	breq	.+30     	; 0xb32 <__fp_splitA+0x2a>
     b14:	87 95       	ror	r24
     b16:	08 95       	ret
     b18:	12 16       	cp	r1, r18
     b1a:	13 06       	cpc	r1, r19
     b1c:	14 06       	cpc	r1, r20
     b1e:	55 1f       	adc	r21, r21
     b20:	f2 cf       	rjmp	.-28     	; 0xb06 <__fp_split3+0xe>
     b22:	46 95       	lsr	r20
     b24:	f1 df       	rcall	.-30     	; 0xb08 <__fp_splitA>
     b26:	08 c0       	rjmp	.+16     	; 0xb38 <__fp_splitA+0x30>
     b28:	16 16       	cp	r1, r22
     b2a:	17 06       	cpc	r1, r23
     b2c:	18 06       	cpc	r1, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	f1 cf       	rjmp	.-30     	; 0xb14 <__fp_splitA+0xc>
     b32:	86 95       	lsr	r24
     b34:	71 05       	cpc	r23, r1
     b36:	61 05       	cpc	r22, r1
     b38:	08 94       	sec
     b3a:	08 95       	ret

00000b3c <__fp_zero>:
     b3c:	e8 94       	clt

00000b3e <__fp_szero>:
     b3e:	bb 27       	eor	r27, r27
     b40:	66 27       	eor	r22, r22
     b42:	77 27       	eor	r23, r23
     b44:	cb 01       	movw	r24, r22
     b46:	97 f9       	bld	r25, 7
     b48:	08 95       	ret

00000b4a <__mulsf3>:
     b4a:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3x>
     b4e:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_round>
     b52:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_pscA>
     b56:	38 f0       	brcs	.+14     	; 0xb66 <__mulsf3+0x1c>
     b58:	0e 94 22 06 	call	0xc44	; 0xc44 <__fp_pscB>
     b5c:	20 f0       	brcs	.+8      	; 0xb66 <__mulsf3+0x1c>
     b5e:	95 23       	and	r25, r21
     b60:	11 f0       	breq	.+4      	; 0xb66 <__mulsf3+0x1c>
     b62:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_inf>
     b66:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_nan>
     b6a:	11 24       	eor	r1, r1
     b6c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_szero>

00000b70 <__mulsf3x>:
     b70:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_split3>
     b74:	70 f3       	brcs	.-36     	; 0xb52 <__mulsf3+0x8>

00000b76 <__mulsf3_pse>:
     b76:	95 9f       	mul	r25, r21
     b78:	c1 f3       	breq	.-16     	; 0xb6a <__mulsf3+0x20>
     b7a:	95 0f       	add	r25, r21
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	55 1f       	adc	r21, r21
     b80:	62 9f       	mul	r22, r18
     b82:	f0 01       	movw	r30, r0
     b84:	72 9f       	mul	r23, r18
     b86:	bb 27       	eor	r27, r27
     b88:	f0 0d       	add	r31, r0
     b8a:	b1 1d       	adc	r27, r1
     b8c:	63 9f       	mul	r22, r19
     b8e:	aa 27       	eor	r26, r26
     b90:	f0 0d       	add	r31, r0
     b92:	b1 1d       	adc	r27, r1
     b94:	aa 1f       	adc	r26, r26
     b96:	64 9f       	mul	r22, r20
     b98:	66 27       	eor	r22, r22
     b9a:	b0 0d       	add	r27, r0
     b9c:	a1 1d       	adc	r26, r1
     b9e:	66 1f       	adc	r22, r22
     ba0:	82 9f       	mul	r24, r18
     ba2:	22 27       	eor	r18, r18
     ba4:	b0 0d       	add	r27, r0
     ba6:	a1 1d       	adc	r26, r1
     ba8:	62 1f       	adc	r22, r18
     baa:	73 9f       	mul	r23, r19
     bac:	b0 0d       	add	r27, r0
     bae:	a1 1d       	adc	r26, r1
     bb0:	62 1f       	adc	r22, r18
     bb2:	83 9f       	mul	r24, r19
     bb4:	a0 0d       	add	r26, r0
     bb6:	61 1d       	adc	r22, r1
     bb8:	22 1f       	adc	r18, r18
     bba:	74 9f       	mul	r23, r20
     bbc:	33 27       	eor	r19, r19
     bbe:	a0 0d       	add	r26, r0
     bc0:	61 1d       	adc	r22, r1
     bc2:	23 1f       	adc	r18, r19
     bc4:	84 9f       	mul	r24, r20
     bc6:	60 0d       	add	r22, r0
     bc8:	21 1d       	adc	r18, r1
     bca:	82 2f       	mov	r24, r18
     bcc:	76 2f       	mov	r23, r22
     bce:	6a 2f       	mov	r22, r26
     bd0:	11 24       	eor	r1, r1
     bd2:	9f 57       	subi	r25, 0x7F	; 127
     bd4:	50 40       	sbci	r21, 0x00	; 0
     bd6:	9a f0       	brmi	.+38     	; 0xbfe <__mulsf3_pse+0x88>
     bd8:	f1 f0       	breq	.+60     	; 0xc16 <__mulsf3_pse+0xa0>
     bda:	88 23       	and	r24, r24
     bdc:	4a f0       	brmi	.+18     	; 0xbf0 <__mulsf3_pse+0x7a>
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	bb 1f       	adc	r27, r27
     be4:	66 1f       	adc	r22, r22
     be6:	77 1f       	adc	r23, r23
     be8:	88 1f       	adc	r24, r24
     bea:	91 50       	subi	r25, 0x01	; 1
     bec:	50 40       	sbci	r21, 0x00	; 0
     bee:	a9 f7       	brne	.-22     	; 0xbda <__mulsf3_pse+0x64>
     bf0:	9e 3f       	cpi	r25, 0xFE	; 254
     bf2:	51 05       	cpc	r21, r1
     bf4:	80 f0       	brcs	.+32     	; 0xc16 <__mulsf3_pse+0xa0>
     bf6:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_inf>
     bfa:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_szero>
     bfe:	5f 3f       	cpi	r21, 0xFF	; 255
     c00:	e4 f3       	brlt	.-8      	; 0xbfa <__mulsf3_pse+0x84>
     c02:	98 3e       	cpi	r25, 0xE8	; 232
     c04:	d4 f3       	brlt	.-12     	; 0xbfa <__mulsf3_pse+0x84>
     c06:	86 95       	lsr	r24
     c08:	77 95       	ror	r23
     c0a:	67 95       	ror	r22
     c0c:	b7 95       	ror	r27
     c0e:	f7 95       	ror	r31
     c10:	e7 95       	ror	r30
     c12:	9f 5f       	subi	r25, 0xFF	; 255
     c14:	c1 f7       	brne	.-16     	; 0xc06 <__mulsf3_pse+0x90>
     c16:	fe 2b       	or	r31, r30
     c18:	88 0f       	add	r24, r24
     c1a:	91 1d       	adc	r25, r1
     c1c:	96 95       	lsr	r25
     c1e:	87 95       	ror	r24
     c20:	97 f9       	bld	r25, 7
     c22:	08 95       	ret

00000c24 <__fp_inf>:
     c24:	97 f9       	bld	r25, 7
     c26:	9f 67       	ori	r25, 0x7F	; 127
     c28:	80 e8       	ldi	r24, 0x80	; 128
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	08 95       	ret

00000c30 <__fp_nan>:
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	80 ec       	ldi	r24, 0xC0	; 192
     c34:	08 95       	ret

00000c36 <__fp_pscA>:
     c36:	00 24       	eor	r0, r0
     c38:	0a 94       	dec	r0
     c3a:	16 16       	cp	r1, r22
     c3c:	17 06       	cpc	r1, r23
     c3e:	18 06       	cpc	r1, r24
     c40:	09 06       	cpc	r0, r25
     c42:	08 95       	ret

00000c44 <__fp_pscB>:
     c44:	00 24       	eor	r0, r0
     c46:	0a 94       	dec	r0
     c48:	12 16       	cp	r1, r18
     c4a:	13 06       	cpc	r1, r19
     c4c:	14 06       	cpc	r1, r20
     c4e:	05 06       	cpc	r0, r21
     c50:	08 95       	ret

00000c52 <__fp_round>:
     c52:	09 2e       	mov	r0, r25
     c54:	03 94       	inc	r0
     c56:	00 0c       	add	r0, r0
     c58:	11 f4       	brne	.+4      	; 0xc5e <__fp_round+0xc>
     c5a:	88 23       	and	r24, r24
     c5c:	52 f0       	brmi	.+20     	; 0xc72 <__fp_round+0x20>
     c5e:	bb 0f       	add	r27, r27
     c60:	40 f4       	brcc	.+16     	; 0xc72 <__fp_round+0x20>
     c62:	bf 2b       	or	r27, r31
     c64:	11 f4       	brne	.+4      	; 0xc6a <__fp_round+0x18>
     c66:	60 ff       	sbrs	r22, 0
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <__fp_round+0x20>
     c6a:	6f 5f       	subi	r22, 0xFF	; 255
     c6c:	7f 4f       	sbci	r23, 0xFF	; 255
     c6e:	8f 4f       	sbci	r24, 0xFF	; 255
     c70:	9f 4f       	sbci	r25, 0xFF	; 255
     c72:	08 95       	ret

00000c74 <__udivmodhi4>:
     c74:	aa 1b       	sub	r26, r26
     c76:	bb 1b       	sub	r27, r27
     c78:	51 e1       	ldi	r21, 0x11	; 17
     c7a:	07 c0       	rjmp	.+14     	; 0xc8a <__udivmodhi4_ep>

00000c7c <__udivmodhi4_loop>:
     c7c:	aa 1f       	adc	r26, r26
     c7e:	bb 1f       	adc	r27, r27
     c80:	a6 17       	cp	r26, r22
     c82:	b7 07       	cpc	r27, r23
     c84:	10 f0       	brcs	.+4      	; 0xc8a <__udivmodhi4_ep>
     c86:	a6 1b       	sub	r26, r22
     c88:	b7 0b       	sbc	r27, r23

00000c8a <__udivmodhi4_ep>:
     c8a:	88 1f       	adc	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	5a 95       	dec	r21
     c90:	a9 f7       	brne	.-22     	; 0xc7c <__udivmodhi4_loop>
     c92:	80 95       	com	r24
     c94:	90 95       	com	r25
     c96:	bc 01       	movw	r22, r24
     c98:	cd 01       	movw	r24, r26
     c9a:	08 95       	ret

00000c9c <__udivmodsi4>:
     c9c:	a1 e2       	ldi	r26, 0x21	; 33
     c9e:	1a 2e       	mov	r1, r26
     ca0:	aa 1b       	sub	r26, r26
     ca2:	bb 1b       	sub	r27, r27
     ca4:	fd 01       	movw	r30, r26
     ca6:	0d c0       	rjmp	.+26     	; 0xcc2 <__udivmodsi4_ep>

00000ca8 <__udivmodsi4_loop>:
     ca8:	aa 1f       	adc	r26, r26
     caa:	bb 1f       	adc	r27, r27
     cac:	ee 1f       	adc	r30, r30
     cae:	ff 1f       	adc	r31, r31
     cb0:	a2 17       	cp	r26, r18
     cb2:	b3 07       	cpc	r27, r19
     cb4:	e4 07       	cpc	r30, r20
     cb6:	f5 07       	cpc	r31, r21
     cb8:	20 f0       	brcs	.+8      	; 0xcc2 <__udivmodsi4_ep>
     cba:	a2 1b       	sub	r26, r18
     cbc:	b3 0b       	sbc	r27, r19
     cbe:	e4 0b       	sbc	r30, r20
     cc0:	f5 0b       	sbc	r31, r21

00000cc2 <__udivmodsi4_ep>:
     cc2:	66 1f       	adc	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	88 1f       	adc	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	1a 94       	dec	r1
     ccc:	69 f7       	brne	.-38     	; 0xca8 <__udivmodsi4_loop>
     cce:	60 95       	com	r22
     cd0:	70 95       	com	r23
     cd2:	80 95       	com	r24
     cd4:	90 95       	com	r25
     cd6:	9b 01       	movw	r18, r22
     cd8:	ac 01       	movw	r20, r24
     cda:	bd 01       	movw	r22, r26
     cdc:	cf 01       	movw	r24, r30
     cde:	08 95       	ret

00000ce0 <calloc>:
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	86 9f       	mul	r24, r22
     cea:	80 01       	movw	r16, r0
     cec:	87 9f       	mul	r24, r23
     cee:	10 0d       	add	r17, r0
     cf0:	96 9f       	mul	r25, r22
     cf2:	10 0d       	add	r17, r0
     cf4:	11 24       	eor	r1, r1
     cf6:	c8 01       	movw	r24, r16
     cf8:	0e 94 8c 06 	call	0xd18	; 0xd18 <malloc>
     cfc:	ec 01       	movw	r28, r24
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	29 f0       	breq	.+10     	; 0xd0c <calloc+0x2c>
     d02:	a8 01       	movw	r20, r16
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	0e 94 b2 07 	call	0xf64	; 0xf64 <memset>
     d0c:	ce 01       	movw	r24, r28
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	08 95       	ret

00000d18 <malloc>:
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	82 30       	cpi	r24, 0x02	; 2
     d22:	91 05       	cpc	r25, r1
     d24:	10 f4       	brcc	.+4      	; 0xd2a <malloc+0x12>
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <__flp>
     d2e:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <__flp+0x1>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	a0 e0       	ldi	r26, 0x00	; 0
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	30 97       	sbiw	r30, 0x00	; 0
     d3c:	19 f1       	breq	.+70     	; 0xd84 <malloc+0x6c>
     d3e:	40 81       	ld	r20, Z
     d40:	51 81       	ldd	r21, Z+1	; 0x01
     d42:	02 81       	ldd	r16, Z+2	; 0x02
     d44:	13 81       	ldd	r17, Z+3	; 0x03
     d46:	48 17       	cp	r20, r24
     d48:	59 07       	cpc	r21, r25
     d4a:	c8 f0       	brcs	.+50     	; 0xd7e <malloc+0x66>
     d4c:	84 17       	cp	r24, r20
     d4e:	95 07       	cpc	r25, r21
     d50:	69 f4       	brne	.+26     	; 0xd6c <malloc+0x54>
     d52:	10 97       	sbiw	r26, 0x00	; 0
     d54:	31 f0       	breq	.+12     	; 0xd62 <malloc+0x4a>
     d56:	12 96       	adiw	r26, 0x02	; 2
     d58:	0c 93       	st	X, r16
     d5a:	12 97       	sbiw	r26, 0x02	; 2
     d5c:	13 96       	adiw	r26, 0x03	; 3
     d5e:	1c 93       	st	X, r17
     d60:	27 c0       	rjmp	.+78     	; 0xdb0 <malloc+0x98>
     d62:	00 93 54 01 	sts	0x0154, r16	; 0x800154 <__flp>
     d66:	10 93 55 01 	sts	0x0155, r17	; 0x800155 <__flp+0x1>
     d6a:	22 c0       	rjmp	.+68     	; 0xdb0 <malloc+0x98>
     d6c:	21 15       	cp	r18, r1
     d6e:	31 05       	cpc	r19, r1
     d70:	19 f0       	breq	.+6      	; 0xd78 <malloc+0x60>
     d72:	42 17       	cp	r20, r18
     d74:	53 07       	cpc	r21, r19
     d76:	18 f4       	brcc	.+6      	; 0xd7e <malloc+0x66>
     d78:	9a 01       	movw	r18, r20
     d7a:	bd 01       	movw	r22, r26
     d7c:	ef 01       	movw	r28, r30
     d7e:	df 01       	movw	r26, r30
     d80:	f8 01       	movw	r30, r16
     d82:	db cf       	rjmp	.-74     	; 0xd3a <malloc+0x22>
     d84:	21 15       	cp	r18, r1
     d86:	31 05       	cpc	r19, r1
     d88:	f9 f0       	breq	.+62     	; 0xdc8 <malloc+0xb0>
     d8a:	28 1b       	sub	r18, r24
     d8c:	39 0b       	sbc	r19, r25
     d8e:	24 30       	cpi	r18, 0x04	; 4
     d90:	31 05       	cpc	r19, r1
     d92:	80 f4       	brcc	.+32     	; 0xdb4 <malloc+0x9c>
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	9b 81       	ldd	r25, Y+3	; 0x03
     d98:	61 15       	cp	r22, r1
     d9a:	71 05       	cpc	r23, r1
     d9c:	21 f0       	breq	.+8      	; 0xda6 <malloc+0x8e>
     d9e:	fb 01       	movw	r30, r22
     da0:	93 83       	std	Z+3, r25	; 0x03
     da2:	82 83       	std	Z+2, r24	; 0x02
     da4:	04 c0       	rjmp	.+8      	; 0xdae <malloc+0x96>
     da6:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__flp+0x1>
     daa:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__flp>
     dae:	fe 01       	movw	r30, r28
     db0:	32 96       	adiw	r30, 0x02	; 2
     db2:	44 c0       	rjmp	.+136    	; 0xe3c <malloc+0x124>
     db4:	fe 01       	movw	r30, r28
     db6:	e2 0f       	add	r30, r18
     db8:	f3 1f       	adc	r31, r19
     dba:	81 93       	st	Z+, r24
     dbc:	91 93       	st	Z+, r25
     dbe:	22 50       	subi	r18, 0x02	; 2
     dc0:	31 09       	sbc	r19, r1
     dc2:	39 83       	std	Y+1, r19	; 0x01
     dc4:	28 83       	st	Y, r18
     dc6:	3a c0       	rjmp	.+116    	; 0xe3c <malloc+0x124>
     dc8:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__brkval>
     dcc:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__brkval+0x1>
     dd0:	23 2b       	or	r18, r19
     dd2:	41 f4       	brne	.+16     	; 0xde4 <malloc+0xcc>
     dd4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     dd8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     ddc:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <__brkval+0x1>
     de0:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <__brkval>
     de4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     de8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     dec:	21 15       	cp	r18, r1
     dee:	31 05       	cpc	r19, r1
     df0:	41 f4       	brne	.+16     	; 0xe02 <malloc+0xea>
     df2:	2d b7       	in	r18, 0x3d	; 61
     df4:	3e b7       	in	r19, 0x3e	; 62
     df6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     dfa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     dfe:	24 1b       	sub	r18, r20
     e00:	35 0b       	sbc	r19, r21
     e02:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <__brkval>
     e06:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <__brkval+0x1>
     e0a:	e2 17       	cp	r30, r18
     e0c:	f3 07       	cpc	r31, r19
     e0e:	a0 f4       	brcc	.+40     	; 0xe38 <malloc+0x120>
     e10:	2e 1b       	sub	r18, r30
     e12:	3f 0b       	sbc	r19, r31
     e14:	28 17       	cp	r18, r24
     e16:	39 07       	cpc	r19, r25
     e18:	78 f0       	brcs	.+30     	; 0xe38 <malloc+0x120>
     e1a:	ac 01       	movw	r20, r24
     e1c:	4e 5f       	subi	r20, 0xFE	; 254
     e1e:	5f 4f       	sbci	r21, 0xFF	; 255
     e20:	24 17       	cp	r18, r20
     e22:	35 07       	cpc	r19, r21
     e24:	48 f0       	brcs	.+18     	; 0xe38 <malloc+0x120>
     e26:	4e 0f       	add	r20, r30
     e28:	5f 1f       	adc	r21, r31
     e2a:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <__brkval+0x1>
     e2e:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <__brkval>
     e32:	81 93       	st	Z+, r24
     e34:	91 93       	st	Z+, r25
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <malloc+0x124>
     e38:	e0 e0       	ldi	r30, 0x00	; 0
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	cf 01       	movw	r24, r30
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	08 95       	ret

00000e48 <free>:
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	09 f4       	brne	.+2      	; 0xe52 <free+0xa>
     e50:	81 c0       	rjmp	.+258    	; 0xf54 <free+0x10c>
     e52:	fc 01       	movw	r30, r24
     e54:	32 97       	sbiw	r30, 0x02	; 2
     e56:	13 82       	std	Z+3, r1	; 0x03
     e58:	12 82       	std	Z+2, r1	; 0x02
     e5a:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <__flp>
     e5e:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <__flp+0x1>
     e62:	10 97       	sbiw	r26, 0x00	; 0
     e64:	81 f4       	brne	.+32     	; 0xe86 <free+0x3e>
     e66:	20 81       	ld	r18, Z
     e68:	31 81       	ldd	r19, Z+1	; 0x01
     e6a:	82 0f       	add	r24, r18
     e6c:	93 1f       	adc	r25, r19
     e6e:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__brkval>
     e72:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__brkval+0x1>
     e76:	28 17       	cp	r18, r24
     e78:	39 07       	cpc	r19, r25
     e7a:	51 f5       	brne	.+84     	; 0xed0 <free+0x88>
     e7c:	f0 93 53 01 	sts	0x0153, r31	; 0x800153 <__brkval+0x1>
     e80:	e0 93 52 01 	sts	0x0152, r30	; 0x800152 <__brkval>
     e84:	67 c0       	rjmp	.+206    	; 0xf54 <free+0x10c>
     e86:	ed 01       	movw	r28, r26
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	ce 17       	cp	r28, r30
     e8e:	df 07       	cpc	r29, r31
     e90:	40 f4       	brcc	.+16     	; 0xea2 <free+0x5a>
     e92:	4a 81       	ldd	r20, Y+2	; 0x02
     e94:	5b 81       	ldd	r21, Y+3	; 0x03
     e96:	9e 01       	movw	r18, r28
     e98:	41 15       	cp	r20, r1
     e9a:	51 05       	cpc	r21, r1
     e9c:	f1 f0       	breq	.+60     	; 0xeda <free+0x92>
     e9e:	ea 01       	movw	r28, r20
     ea0:	f5 cf       	rjmp	.-22     	; 0xe8c <free+0x44>
     ea2:	d3 83       	std	Z+3, r29	; 0x03
     ea4:	c2 83       	std	Z+2, r28	; 0x02
     ea6:	40 81       	ld	r20, Z
     ea8:	51 81       	ldd	r21, Z+1	; 0x01
     eaa:	84 0f       	add	r24, r20
     eac:	95 1f       	adc	r25, r21
     eae:	c8 17       	cp	r28, r24
     eb0:	d9 07       	cpc	r29, r25
     eb2:	59 f4       	brne	.+22     	; 0xeca <free+0x82>
     eb4:	88 81       	ld	r24, Y
     eb6:	99 81       	ldd	r25, Y+1	; 0x01
     eb8:	84 0f       	add	r24, r20
     eba:	95 1f       	adc	r25, r21
     ebc:	02 96       	adiw	r24, 0x02	; 2
     ebe:	91 83       	std	Z+1, r25	; 0x01
     ec0:	80 83       	st	Z, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	9b 81       	ldd	r25, Y+3	; 0x03
     ec6:	93 83       	std	Z+3, r25	; 0x03
     ec8:	82 83       	std	Z+2, r24	; 0x02
     eca:	21 15       	cp	r18, r1
     ecc:	31 05       	cpc	r19, r1
     ece:	29 f4       	brne	.+10     	; 0xeda <free+0x92>
     ed0:	f0 93 55 01 	sts	0x0155, r31	; 0x800155 <__flp+0x1>
     ed4:	e0 93 54 01 	sts	0x0154, r30	; 0x800154 <__flp>
     ed8:	3d c0       	rjmp	.+122    	; 0xf54 <free+0x10c>
     eda:	e9 01       	movw	r28, r18
     edc:	fb 83       	std	Y+3, r31	; 0x03
     ede:	ea 83       	std	Y+2, r30	; 0x02
     ee0:	49 91       	ld	r20, Y+
     ee2:	59 91       	ld	r21, Y+
     ee4:	c4 0f       	add	r28, r20
     ee6:	d5 1f       	adc	r29, r21
     ee8:	ec 17       	cp	r30, r28
     eea:	fd 07       	cpc	r31, r29
     eec:	61 f4       	brne	.+24     	; 0xf06 <free+0xbe>
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	84 0f       	add	r24, r20
     ef4:	95 1f       	adc	r25, r21
     ef6:	02 96       	adiw	r24, 0x02	; 2
     ef8:	e9 01       	movw	r28, r18
     efa:	99 83       	std	Y+1, r25	; 0x01
     efc:	88 83       	st	Y, r24
     efe:	82 81       	ldd	r24, Z+2	; 0x02
     f00:	93 81       	ldd	r25, Z+3	; 0x03
     f02:	9b 83       	std	Y+3, r25	; 0x03
     f04:	8a 83       	std	Y+2, r24	; 0x02
     f06:	e0 e0       	ldi	r30, 0x00	; 0
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	12 96       	adiw	r26, 0x02	; 2
     f0c:	8d 91       	ld	r24, X+
     f0e:	9c 91       	ld	r25, X
     f10:	13 97       	sbiw	r26, 0x03	; 3
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	19 f0       	breq	.+6      	; 0xf1c <free+0xd4>
     f16:	fd 01       	movw	r30, r26
     f18:	dc 01       	movw	r26, r24
     f1a:	f7 cf       	rjmp	.-18     	; 0xf0a <free+0xc2>
     f1c:	8d 91       	ld	r24, X+
     f1e:	9c 91       	ld	r25, X
     f20:	11 97       	sbiw	r26, 0x01	; 1
     f22:	9d 01       	movw	r18, r26
     f24:	2e 5f       	subi	r18, 0xFE	; 254
     f26:	3f 4f       	sbci	r19, 0xFF	; 255
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__brkval>
     f30:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__brkval+0x1>
     f34:	28 17       	cp	r18, r24
     f36:	39 07       	cpc	r19, r25
     f38:	69 f4       	brne	.+26     	; 0xf54 <free+0x10c>
     f3a:	30 97       	sbiw	r30, 0x00	; 0
     f3c:	29 f4       	brne	.+10     	; 0xf48 <free+0x100>
     f3e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__flp+0x1>
     f42:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__flp>
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <free+0x104>
     f48:	13 82       	std	Z+3, r1	; 0x03
     f4a:	12 82       	std	Z+2, r1	; 0x02
     f4c:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <__brkval+0x1>
     f50:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <__brkval>
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <abort>:
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	f8 94       	cli
     f60:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <_exit>

00000f64 <memset>:
     f64:	dc 01       	movw	r26, r24
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <memset+0x6>
     f68:	6d 93       	st	X+, r22
     f6a:	41 50       	subi	r20, 0x01	; 1
     f6c:	50 40       	sbci	r21, 0x00	; 0
     f6e:	e0 f7       	brcc	.-8      	; 0xf68 <memset+0x4>
     f70:	08 95       	ret

00000f72 <sprintf>:
     f72:	ae e0       	ldi	r26, 0x0E	; 14
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ef eb       	ldi	r30, 0xBF	; 191
     f78:	f7 e0       	ldi	r31, 0x07	; 7
     f7a:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__prologue_saves__+0x1c>
     f7e:	0d 89       	ldd	r16, Y+21	; 0x15
     f80:	1e 89       	ldd	r17, Y+22	; 0x16
     f82:	86 e0       	ldi	r24, 0x06	; 6
     f84:	8c 83       	std	Y+4, r24	; 0x04
     f86:	1a 83       	std	Y+2, r17	; 0x02
     f88:	09 83       	std	Y+1, r16	; 0x01
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	9f e7       	ldi	r25, 0x7F	; 127
     f8e:	9e 83       	std	Y+6, r25	; 0x06
     f90:	8d 83       	std	Y+5, r24	; 0x05
     f92:	ae 01       	movw	r20, r28
     f94:	47 5e       	subi	r20, 0xE7	; 231
     f96:	5f 4f       	sbci	r21, 0xFF	; 255
     f98:	6f 89       	ldd	r22, Y+23	; 0x17
     f9a:	78 8d       	ldd	r23, Y+24	; 0x18
     f9c:	ce 01       	movw	r24, r28
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <vfprintf>
     fa4:	ef 81       	ldd	r30, Y+7	; 0x07
     fa6:	f8 85       	ldd	r31, Y+8	; 0x08
     fa8:	e0 0f       	add	r30, r16
     faa:	f1 1f       	adc	r31, r17
     fac:	10 82       	st	Z, r1
     fae:	2e 96       	adiw	r28, 0x0e	; 14
     fb0:	e4 e0       	ldi	r30, 0x04	; 4
     fb2:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__epilogue_restores__+0x1c>

00000fb6 <vfprintf>:
     fb6:	ab e0       	ldi	r26, 0x0B	; 11
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e1 ee       	ldi	r30, 0xE1	; 225
     fbc:	f7 e0       	ldi	r31, 0x07	; 7
     fbe:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__prologue_saves__>
     fc2:	6c 01       	movw	r12, r24
     fc4:	7b 01       	movw	r14, r22
     fc6:	8a 01       	movw	r16, r20
     fc8:	fc 01       	movw	r30, r24
     fca:	17 82       	std	Z+7, r1	; 0x07
     fcc:	16 82       	std	Z+6, r1	; 0x06
     fce:	83 81       	ldd	r24, Z+3	; 0x03
     fd0:	81 ff       	sbrs	r24, 1
     fd2:	cc c1       	rjmp	.+920    	; 0x136c <vfprintf+0x3b6>
     fd4:	ce 01       	movw	r24, r28
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	3c 01       	movw	r6, r24
     fda:	f6 01       	movw	r30, r12
     fdc:	93 81       	ldd	r25, Z+3	; 0x03
     fde:	f7 01       	movw	r30, r14
     fe0:	93 fd       	sbrc	r25, 3
     fe2:	85 91       	lpm	r24, Z+
     fe4:	93 ff       	sbrs	r25, 3
     fe6:	81 91       	ld	r24, Z+
     fe8:	7f 01       	movw	r14, r30
     fea:	88 23       	and	r24, r24
     fec:	09 f4       	brne	.+2      	; 0xff0 <vfprintf+0x3a>
     fee:	ba c1       	rjmp	.+884    	; 0x1364 <vfprintf+0x3ae>
     ff0:	85 32       	cpi	r24, 0x25	; 37
     ff2:	39 f4       	brne	.+14     	; 0x1002 <vfprintf+0x4c>
     ff4:	93 fd       	sbrc	r25, 3
     ff6:	85 91       	lpm	r24, Z+
     ff8:	93 ff       	sbrs	r25, 3
     ffa:	81 91       	ld	r24, Z+
     ffc:	7f 01       	movw	r14, r30
     ffe:	85 32       	cpi	r24, 0x25	; 37
    1000:	29 f4       	brne	.+10     	; 0x100c <vfprintf+0x56>
    1002:	b6 01       	movw	r22, r12
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <fputc>
    100a:	e7 cf       	rjmp	.-50     	; 0xfda <vfprintf+0x24>
    100c:	91 2c       	mov	r9, r1
    100e:	21 2c       	mov	r2, r1
    1010:	31 2c       	mov	r3, r1
    1012:	ff e1       	ldi	r31, 0x1F	; 31
    1014:	f3 15       	cp	r31, r3
    1016:	d8 f0       	brcs	.+54     	; 0x104e <vfprintf+0x98>
    1018:	8b 32       	cpi	r24, 0x2B	; 43
    101a:	79 f0       	breq	.+30     	; 0x103a <vfprintf+0x84>
    101c:	38 f4       	brcc	.+14     	; 0x102c <vfprintf+0x76>
    101e:	80 32       	cpi	r24, 0x20	; 32
    1020:	79 f0       	breq	.+30     	; 0x1040 <vfprintf+0x8a>
    1022:	83 32       	cpi	r24, 0x23	; 35
    1024:	a1 f4       	brne	.+40     	; 0x104e <vfprintf+0x98>
    1026:	23 2d       	mov	r18, r3
    1028:	20 61       	ori	r18, 0x10	; 16
    102a:	1d c0       	rjmp	.+58     	; 0x1066 <vfprintf+0xb0>
    102c:	8d 32       	cpi	r24, 0x2D	; 45
    102e:	61 f0       	breq	.+24     	; 0x1048 <vfprintf+0x92>
    1030:	80 33       	cpi	r24, 0x30	; 48
    1032:	69 f4       	brne	.+26     	; 0x104e <vfprintf+0x98>
    1034:	23 2d       	mov	r18, r3
    1036:	21 60       	ori	r18, 0x01	; 1
    1038:	16 c0       	rjmp	.+44     	; 0x1066 <vfprintf+0xb0>
    103a:	83 2d       	mov	r24, r3
    103c:	82 60       	ori	r24, 0x02	; 2
    103e:	38 2e       	mov	r3, r24
    1040:	e3 2d       	mov	r30, r3
    1042:	e4 60       	ori	r30, 0x04	; 4
    1044:	3e 2e       	mov	r3, r30
    1046:	2a c0       	rjmp	.+84     	; 0x109c <vfprintf+0xe6>
    1048:	f3 2d       	mov	r31, r3
    104a:	f8 60       	ori	r31, 0x08	; 8
    104c:	1d c0       	rjmp	.+58     	; 0x1088 <vfprintf+0xd2>
    104e:	37 fc       	sbrc	r3, 7
    1050:	2d c0       	rjmp	.+90     	; 0x10ac <vfprintf+0xf6>
    1052:	20 ed       	ldi	r18, 0xD0	; 208
    1054:	28 0f       	add	r18, r24
    1056:	2a 30       	cpi	r18, 0x0A	; 10
    1058:	40 f0       	brcs	.+16     	; 0x106a <vfprintf+0xb4>
    105a:	8e 32       	cpi	r24, 0x2E	; 46
    105c:	b9 f4       	brne	.+46     	; 0x108c <vfprintf+0xd6>
    105e:	36 fc       	sbrc	r3, 6
    1060:	81 c1       	rjmp	.+770    	; 0x1364 <vfprintf+0x3ae>
    1062:	23 2d       	mov	r18, r3
    1064:	20 64       	ori	r18, 0x40	; 64
    1066:	32 2e       	mov	r3, r18
    1068:	19 c0       	rjmp	.+50     	; 0x109c <vfprintf+0xe6>
    106a:	36 fe       	sbrs	r3, 6
    106c:	06 c0       	rjmp	.+12     	; 0x107a <vfprintf+0xc4>
    106e:	8a e0       	ldi	r24, 0x0A	; 10
    1070:	98 9e       	mul	r9, r24
    1072:	20 0d       	add	r18, r0
    1074:	11 24       	eor	r1, r1
    1076:	92 2e       	mov	r9, r18
    1078:	11 c0       	rjmp	.+34     	; 0x109c <vfprintf+0xe6>
    107a:	ea e0       	ldi	r30, 0x0A	; 10
    107c:	2e 9e       	mul	r2, r30
    107e:	20 0d       	add	r18, r0
    1080:	11 24       	eor	r1, r1
    1082:	22 2e       	mov	r2, r18
    1084:	f3 2d       	mov	r31, r3
    1086:	f0 62       	ori	r31, 0x20	; 32
    1088:	3f 2e       	mov	r3, r31
    108a:	08 c0       	rjmp	.+16     	; 0x109c <vfprintf+0xe6>
    108c:	8c 36       	cpi	r24, 0x6C	; 108
    108e:	21 f4       	brne	.+8      	; 0x1098 <vfprintf+0xe2>
    1090:	83 2d       	mov	r24, r3
    1092:	80 68       	ori	r24, 0x80	; 128
    1094:	38 2e       	mov	r3, r24
    1096:	02 c0       	rjmp	.+4      	; 0x109c <vfprintf+0xe6>
    1098:	88 36       	cpi	r24, 0x68	; 104
    109a:	41 f4       	brne	.+16     	; 0x10ac <vfprintf+0xf6>
    109c:	f7 01       	movw	r30, r14
    109e:	93 fd       	sbrc	r25, 3
    10a0:	85 91       	lpm	r24, Z+
    10a2:	93 ff       	sbrs	r25, 3
    10a4:	81 91       	ld	r24, Z+
    10a6:	7f 01       	movw	r14, r30
    10a8:	81 11       	cpse	r24, r1
    10aa:	b3 cf       	rjmp	.-154    	; 0x1012 <vfprintf+0x5c>
    10ac:	98 2f       	mov	r25, r24
    10ae:	9f 7d       	andi	r25, 0xDF	; 223
    10b0:	95 54       	subi	r25, 0x45	; 69
    10b2:	93 30       	cpi	r25, 0x03	; 3
    10b4:	28 f4       	brcc	.+10     	; 0x10c0 <vfprintf+0x10a>
    10b6:	0c 5f       	subi	r16, 0xFC	; 252
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	9f e3       	ldi	r25, 0x3F	; 63
    10bc:	99 83       	std	Y+1, r25	; 0x01
    10be:	0d c0       	rjmp	.+26     	; 0x10da <vfprintf+0x124>
    10c0:	83 36       	cpi	r24, 0x63	; 99
    10c2:	31 f0       	breq	.+12     	; 0x10d0 <vfprintf+0x11a>
    10c4:	83 37       	cpi	r24, 0x73	; 115
    10c6:	71 f0       	breq	.+28     	; 0x10e4 <vfprintf+0x12e>
    10c8:	83 35       	cpi	r24, 0x53	; 83
    10ca:	09 f0       	breq	.+2      	; 0x10ce <vfprintf+0x118>
    10cc:	59 c0       	rjmp	.+178    	; 0x1180 <vfprintf+0x1ca>
    10ce:	21 c0       	rjmp	.+66     	; 0x1112 <vfprintf+0x15c>
    10d0:	f8 01       	movw	r30, r16
    10d2:	80 81       	ld	r24, Z
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	0e 5f       	subi	r16, 0xFE	; 254
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255
    10da:	88 24       	eor	r8, r8
    10dc:	83 94       	inc	r8
    10de:	91 2c       	mov	r9, r1
    10e0:	53 01       	movw	r10, r6
    10e2:	13 c0       	rjmp	.+38     	; 0x110a <vfprintf+0x154>
    10e4:	28 01       	movw	r4, r16
    10e6:	f2 e0       	ldi	r31, 0x02	; 2
    10e8:	4f 0e       	add	r4, r31
    10ea:	51 1c       	adc	r5, r1
    10ec:	f8 01       	movw	r30, r16
    10ee:	a0 80       	ld	r10, Z
    10f0:	b1 80       	ldd	r11, Z+1	; 0x01
    10f2:	36 fe       	sbrs	r3, 6
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <vfprintf+0x146>
    10f6:	69 2d       	mov	r22, r9
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <vfprintf+0x14a>
    10fc:	6f ef       	ldi	r22, 0xFF	; 255
    10fe:	7f ef       	ldi	r23, 0xFF	; 255
    1100:	c5 01       	movw	r24, r10
    1102:	0e 94 c7 09 	call	0x138e	; 0x138e <strnlen>
    1106:	4c 01       	movw	r8, r24
    1108:	82 01       	movw	r16, r4
    110a:	f3 2d       	mov	r31, r3
    110c:	ff 77       	andi	r31, 0x7F	; 127
    110e:	3f 2e       	mov	r3, r31
    1110:	16 c0       	rjmp	.+44     	; 0x113e <vfprintf+0x188>
    1112:	28 01       	movw	r4, r16
    1114:	22 e0       	ldi	r18, 0x02	; 2
    1116:	42 0e       	add	r4, r18
    1118:	51 1c       	adc	r5, r1
    111a:	f8 01       	movw	r30, r16
    111c:	a0 80       	ld	r10, Z
    111e:	b1 80       	ldd	r11, Z+1	; 0x01
    1120:	36 fe       	sbrs	r3, 6
    1122:	03 c0       	rjmp	.+6      	; 0x112a <vfprintf+0x174>
    1124:	69 2d       	mov	r22, r9
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <vfprintf+0x178>
    112a:	6f ef       	ldi	r22, 0xFF	; 255
    112c:	7f ef       	ldi	r23, 0xFF	; 255
    112e:	c5 01       	movw	r24, r10
    1130:	0e 94 bc 09 	call	0x1378	; 0x1378 <strnlen_P>
    1134:	4c 01       	movw	r8, r24
    1136:	f3 2d       	mov	r31, r3
    1138:	f0 68       	ori	r31, 0x80	; 128
    113a:	3f 2e       	mov	r3, r31
    113c:	82 01       	movw	r16, r4
    113e:	33 fc       	sbrc	r3, 3
    1140:	1b c0       	rjmp	.+54     	; 0x1178 <vfprintf+0x1c2>
    1142:	82 2d       	mov	r24, r2
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	88 16       	cp	r8, r24
    1148:	99 06       	cpc	r9, r25
    114a:	b0 f4       	brcc	.+44     	; 0x1178 <vfprintf+0x1c2>
    114c:	b6 01       	movw	r22, r12
    114e:	80 e2       	ldi	r24, 0x20	; 32
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <fputc>
    1156:	2a 94       	dec	r2
    1158:	f4 cf       	rjmp	.-24     	; 0x1142 <vfprintf+0x18c>
    115a:	f5 01       	movw	r30, r10
    115c:	37 fc       	sbrc	r3, 7
    115e:	85 91       	lpm	r24, Z+
    1160:	37 fe       	sbrs	r3, 7
    1162:	81 91       	ld	r24, Z+
    1164:	5f 01       	movw	r10, r30
    1166:	b6 01       	movw	r22, r12
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <fputc>
    116e:	21 10       	cpse	r2, r1
    1170:	2a 94       	dec	r2
    1172:	21 e0       	ldi	r18, 0x01	; 1
    1174:	82 1a       	sub	r8, r18
    1176:	91 08       	sbc	r9, r1
    1178:	81 14       	cp	r8, r1
    117a:	91 04       	cpc	r9, r1
    117c:	71 f7       	brne	.-36     	; 0x115a <vfprintf+0x1a4>
    117e:	e8 c0       	rjmp	.+464    	; 0x1350 <vfprintf+0x39a>
    1180:	84 36       	cpi	r24, 0x64	; 100
    1182:	11 f0       	breq	.+4      	; 0x1188 <vfprintf+0x1d2>
    1184:	89 36       	cpi	r24, 0x69	; 105
    1186:	41 f5       	brne	.+80     	; 0x11d8 <vfprintf+0x222>
    1188:	f8 01       	movw	r30, r16
    118a:	37 fe       	sbrs	r3, 7
    118c:	07 c0       	rjmp	.+14     	; 0x119c <vfprintf+0x1e6>
    118e:	60 81       	ld	r22, Z
    1190:	71 81       	ldd	r23, Z+1	; 0x01
    1192:	82 81       	ldd	r24, Z+2	; 0x02
    1194:	93 81       	ldd	r25, Z+3	; 0x03
    1196:	0c 5f       	subi	r16, 0xFC	; 252
    1198:	1f 4f       	sbci	r17, 0xFF	; 255
    119a:	08 c0       	rjmp	.+16     	; 0x11ac <vfprintf+0x1f6>
    119c:	60 81       	ld	r22, Z
    119e:	71 81       	ldd	r23, Z+1	; 0x01
    11a0:	07 2e       	mov	r0, r23
    11a2:	00 0c       	add	r0, r0
    11a4:	88 0b       	sbc	r24, r24
    11a6:	99 0b       	sbc	r25, r25
    11a8:	0e 5f       	subi	r16, 0xFE	; 254
    11aa:	1f 4f       	sbci	r17, 0xFF	; 255
    11ac:	f3 2d       	mov	r31, r3
    11ae:	ff 76       	andi	r31, 0x6F	; 111
    11b0:	3f 2e       	mov	r3, r31
    11b2:	97 ff       	sbrs	r25, 7
    11b4:	09 c0       	rjmp	.+18     	; 0x11c8 <vfprintf+0x212>
    11b6:	90 95       	com	r25
    11b8:	80 95       	com	r24
    11ba:	70 95       	com	r23
    11bc:	61 95       	neg	r22
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	8f 4f       	sbci	r24, 0xFF	; 255
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	f0 68       	ori	r31, 0x80	; 128
    11c6:	3f 2e       	mov	r3, r31
    11c8:	2a e0       	ldi	r18, 0x0A	; 10
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	a3 01       	movw	r20, r6
    11ce:	0e 94 0e 0a 	call	0x141c	; 0x141c <__ultoa_invert>
    11d2:	88 2e       	mov	r8, r24
    11d4:	86 18       	sub	r8, r6
    11d6:	45 c0       	rjmp	.+138    	; 0x1262 <vfprintf+0x2ac>
    11d8:	85 37       	cpi	r24, 0x75	; 117
    11da:	31 f4       	brne	.+12     	; 0x11e8 <vfprintf+0x232>
    11dc:	23 2d       	mov	r18, r3
    11de:	2f 7e       	andi	r18, 0xEF	; 239
    11e0:	b2 2e       	mov	r11, r18
    11e2:	2a e0       	ldi	r18, 0x0A	; 10
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	25 c0       	rjmp	.+74     	; 0x1232 <vfprintf+0x27c>
    11e8:	93 2d       	mov	r25, r3
    11ea:	99 7f       	andi	r25, 0xF9	; 249
    11ec:	b9 2e       	mov	r11, r25
    11ee:	8f 36       	cpi	r24, 0x6F	; 111
    11f0:	c1 f0       	breq	.+48     	; 0x1222 <vfprintf+0x26c>
    11f2:	18 f4       	brcc	.+6      	; 0x11fa <vfprintf+0x244>
    11f4:	88 35       	cpi	r24, 0x58	; 88
    11f6:	79 f0       	breq	.+30     	; 0x1216 <vfprintf+0x260>
    11f8:	b5 c0       	rjmp	.+362    	; 0x1364 <vfprintf+0x3ae>
    11fa:	80 37       	cpi	r24, 0x70	; 112
    11fc:	19 f0       	breq	.+6      	; 0x1204 <vfprintf+0x24e>
    11fe:	88 37       	cpi	r24, 0x78	; 120
    1200:	21 f0       	breq	.+8      	; 0x120a <vfprintf+0x254>
    1202:	b0 c0       	rjmp	.+352    	; 0x1364 <vfprintf+0x3ae>
    1204:	e9 2f       	mov	r30, r25
    1206:	e0 61       	ori	r30, 0x10	; 16
    1208:	be 2e       	mov	r11, r30
    120a:	b4 fe       	sbrs	r11, 4
    120c:	0d c0       	rjmp	.+26     	; 0x1228 <vfprintf+0x272>
    120e:	fb 2d       	mov	r31, r11
    1210:	f4 60       	ori	r31, 0x04	; 4
    1212:	bf 2e       	mov	r11, r31
    1214:	09 c0       	rjmp	.+18     	; 0x1228 <vfprintf+0x272>
    1216:	34 fe       	sbrs	r3, 4
    1218:	0a c0       	rjmp	.+20     	; 0x122e <vfprintf+0x278>
    121a:	29 2f       	mov	r18, r25
    121c:	26 60       	ori	r18, 0x06	; 6
    121e:	b2 2e       	mov	r11, r18
    1220:	06 c0       	rjmp	.+12     	; 0x122e <vfprintf+0x278>
    1222:	28 e0       	ldi	r18, 0x08	; 8
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	05 c0       	rjmp	.+10     	; 0x1232 <vfprintf+0x27c>
    1228:	20 e1       	ldi	r18, 0x10	; 16
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <vfprintf+0x27c>
    122e:	20 e1       	ldi	r18, 0x10	; 16
    1230:	32 e0       	ldi	r19, 0x02	; 2
    1232:	f8 01       	movw	r30, r16
    1234:	b7 fe       	sbrs	r11, 7
    1236:	07 c0       	rjmp	.+14     	; 0x1246 <vfprintf+0x290>
    1238:	60 81       	ld	r22, Z
    123a:	71 81       	ldd	r23, Z+1	; 0x01
    123c:	82 81       	ldd	r24, Z+2	; 0x02
    123e:	93 81       	ldd	r25, Z+3	; 0x03
    1240:	0c 5f       	subi	r16, 0xFC	; 252
    1242:	1f 4f       	sbci	r17, 0xFF	; 255
    1244:	06 c0       	rjmp	.+12     	; 0x1252 <vfprintf+0x29c>
    1246:	60 81       	ld	r22, Z
    1248:	71 81       	ldd	r23, Z+1	; 0x01
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 5f       	subi	r16, 0xFE	; 254
    1250:	1f 4f       	sbci	r17, 0xFF	; 255
    1252:	a3 01       	movw	r20, r6
    1254:	0e 94 0e 0a 	call	0x141c	; 0x141c <__ultoa_invert>
    1258:	88 2e       	mov	r8, r24
    125a:	86 18       	sub	r8, r6
    125c:	fb 2d       	mov	r31, r11
    125e:	ff 77       	andi	r31, 0x7F	; 127
    1260:	3f 2e       	mov	r3, r31
    1262:	36 fe       	sbrs	r3, 6
    1264:	0d c0       	rjmp	.+26     	; 0x1280 <vfprintf+0x2ca>
    1266:	23 2d       	mov	r18, r3
    1268:	2e 7f       	andi	r18, 0xFE	; 254
    126a:	a2 2e       	mov	r10, r18
    126c:	89 14       	cp	r8, r9
    126e:	58 f4       	brcc	.+22     	; 0x1286 <vfprintf+0x2d0>
    1270:	34 fe       	sbrs	r3, 4
    1272:	0b c0       	rjmp	.+22     	; 0x128a <vfprintf+0x2d4>
    1274:	32 fc       	sbrc	r3, 2
    1276:	09 c0       	rjmp	.+18     	; 0x128a <vfprintf+0x2d4>
    1278:	83 2d       	mov	r24, r3
    127a:	8e 7e       	andi	r24, 0xEE	; 238
    127c:	a8 2e       	mov	r10, r24
    127e:	05 c0       	rjmp	.+10     	; 0x128a <vfprintf+0x2d4>
    1280:	b8 2c       	mov	r11, r8
    1282:	a3 2c       	mov	r10, r3
    1284:	03 c0       	rjmp	.+6      	; 0x128c <vfprintf+0x2d6>
    1286:	b8 2c       	mov	r11, r8
    1288:	01 c0       	rjmp	.+2      	; 0x128c <vfprintf+0x2d6>
    128a:	b9 2c       	mov	r11, r9
    128c:	a4 fe       	sbrs	r10, 4
    128e:	0f c0       	rjmp	.+30     	; 0x12ae <vfprintf+0x2f8>
    1290:	fe 01       	movw	r30, r28
    1292:	e8 0d       	add	r30, r8
    1294:	f1 1d       	adc	r31, r1
    1296:	80 81       	ld	r24, Z
    1298:	80 33       	cpi	r24, 0x30	; 48
    129a:	21 f4       	brne	.+8      	; 0x12a4 <vfprintf+0x2ee>
    129c:	9a 2d       	mov	r25, r10
    129e:	99 7e       	andi	r25, 0xE9	; 233
    12a0:	a9 2e       	mov	r10, r25
    12a2:	09 c0       	rjmp	.+18     	; 0x12b6 <vfprintf+0x300>
    12a4:	a2 fe       	sbrs	r10, 2
    12a6:	06 c0       	rjmp	.+12     	; 0x12b4 <vfprintf+0x2fe>
    12a8:	b3 94       	inc	r11
    12aa:	b3 94       	inc	r11
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <vfprintf+0x300>
    12ae:	8a 2d       	mov	r24, r10
    12b0:	86 78       	andi	r24, 0x86	; 134
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <vfprintf+0x300>
    12b4:	b3 94       	inc	r11
    12b6:	a3 fc       	sbrc	r10, 3
    12b8:	11 c0       	rjmp	.+34     	; 0x12dc <vfprintf+0x326>
    12ba:	a0 fe       	sbrs	r10, 0
    12bc:	06 c0       	rjmp	.+12     	; 0x12ca <vfprintf+0x314>
    12be:	b2 14       	cp	r11, r2
    12c0:	88 f4       	brcc	.+34     	; 0x12e4 <vfprintf+0x32e>
    12c2:	28 0c       	add	r2, r8
    12c4:	92 2c       	mov	r9, r2
    12c6:	9b 18       	sub	r9, r11
    12c8:	0e c0       	rjmp	.+28     	; 0x12e6 <vfprintf+0x330>
    12ca:	b2 14       	cp	r11, r2
    12cc:	60 f4       	brcc	.+24     	; 0x12e6 <vfprintf+0x330>
    12ce:	b6 01       	movw	r22, r12
    12d0:	80 e2       	ldi	r24, 0x20	; 32
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <fputc>
    12d8:	b3 94       	inc	r11
    12da:	f7 cf       	rjmp	.-18     	; 0x12ca <vfprintf+0x314>
    12dc:	b2 14       	cp	r11, r2
    12de:	18 f4       	brcc	.+6      	; 0x12e6 <vfprintf+0x330>
    12e0:	2b 18       	sub	r2, r11
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <vfprintf+0x332>
    12e4:	98 2c       	mov	r9, r8
    12e6:	21 2c       	mov	r2, r1
    12e8:	a4 fe       	sbrs	r10, 4
    12ea:	10 c0       	rjmp	.+32     	; 0x130c <vfprintf+0x356>
    12ec:	b6 01       	movw	r22, r12
    12ee:	80 e3       	ldi	r24, 0x30	; 48
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <fputc>
    12f6:	a2 fe       	sbrs	r10, 2
    12f8:	17 c0       	rjmp	.+46     	; 0x1328 <vfprintf+0x372>
    12fa:	a1 fc       	sbrc	r10, 1
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <vfprintf+0x34e>
    12fe:	88 e7       	ldi	r24, 0x78	; 120
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <vfprintf+0x352>
    1304:	88 e5       	ldi	r24, 0x58	; 88
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	b6 01       	movw	r22, r12
    130a:	0c c0       	rjmp	.+24     	; 0x1324 <vfprintf+0x36e>
    130c:	8a 2d       	mov	r24, r10
    130e:	86 78       	andi	r24, 0x86	; 134
    1310:	59 f0       	breq	.+22     	; 0x1328 <vfprintf+0x372>
    1312:	a1 fe       	sbrs	r10, 1
    1314:	02 c0       	rjmp	.+4      	; 0x131a <vfprintf+0x364>
    1316:	8b e2       	ldi	r24, 0x2B	; 43
    1318:	01 c0       	rjmp	.+2      	; 0x131c <vfprintf+0x366>
    131a:	80 e2       	ldi	r24, 0x20	; 32
    131c:	a7 fc       	sbrc	r10, 7
    131e:	8d e2       	ldi	r24, 0x2D	; 45
    1320:	b6 01       	movw	r22, r12
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <fputc>
    1328:	89 14       	cp	r8, r9
    132a:	38 f4       	brcc	.+14     	; 0x133a <vfprintf+0x384>
    132c:	b6 01       	movw	r22, r12
    132e:	80 e3       	ldi	r24, 0x30	; 48
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <fputc>
    1336:	9a 94       	dec	r9
    1338:	f7 cf       	rjmp	.-18     	; 0x1328 <vfprintf+0x372>
    133a:	8a 94       	dec	r8
    133c:	f3 01       	movw	r30, r6
    133e:	e8 0d       	add	r30, r8
    1340:	f1 1d       	adc	r31, r1
    1342:	80 81       	ld	r24, Z
    1344:	b6 01       	movw	r22, r12
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <fputc>
    134c:	81 10       	cpse	r8, r1
    134e:	f5 cf       	rjmp	.-22     	; 0x133a <vfprintf+0x384>
    1350:	22 20       	and	r2, r2
    1352:	09 f4       	brne	.+2      	; 0x1356 <vfprintf+0x3a0>
    1354:	42 ce       	rjmp	.-892    	; 0xfda <vfprintf+0x24>
    1356:	b6 01       	movw	r22, r12
    1358:	80 e2       	ldi	r24, 0x20	; 32
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <fputc>
    1360:	2a 94       	dec	r2
    1362:	f6 cf       	rjmp	.-20     	; 0x1350 <vfprintf+0x39a>
    1364:	f6 01       	movw	r30, r12
    1366:	86 81       	ldd	r24, Z+6	; 0x06
    1368:	97 81       	ldd	r25, Z+7	; 0x07
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <vfprintf+0x3ba>
    136c:	8f ef       	ldi	r24, 0xFF	; 255
    136e:	9f ef       	ldi	r25, 0xFF	; 255
    1370:	2b 96       	adiw	r28, 0x0b	; 11
    1372:	e2 e1       	ldi	r30, 0x12	; 18
    1374:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__epilogue_restores__>

00001378 <strnlen_P>:
    1378:	fc 01       	movw	r30, r24
    137a:	05 90       	lpm	r0, Z+
    137c:	61 50       	subi	r22, 0x01	; 1
    137e:	70 40       	sbci	r23, 0x00	; 0
    1380:	01 10       	cpse	r0, r1
    1382:	d8 f7       	brcc	.-10     	; 0x137a <strnlen_P+0x2>
    1384:	80 95       	com	r24
    1386:	90 95       	com	r25
    1388:	8e 0f       	add	r24, r30
    138a:	9f 1f       	adc	r25, r31
    138c:	08 95       	ret

0000138e <strnlen>:
    138e:	fc 01       	movw	r30, r24
    1390:	61 50       	subi	r22, 0x01	; 1
    1392:	70 40       	sbci	r23, 0x00	; 0
    1394:	01 90       	ld	r0, Z+
    1396:	01 10       	cpse	r0, r1
    1398:	d8 f7       	brcc	.-10     	; 0x1390 <strnlen+0x2>
    139a:	80 95       	com	r24
    139c:	90 95       	com	r25
    139e:	8e 0f       	add	r24, r30
    13a0:	9f 1f       	adc	r25, r31
    13a2:	08 95       	ret

000013a4 <fputc>:
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	fb 01       	movw	r30, r22
    13ae:	23 81       	ldd	r18, Z+3	; 0x03
    13b0:	21 fd       	sbrc	r18, 1
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <fputc+0x16>
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	9f ef       	ldi	r25, 0xFF	; 255
    13b8:	2c c0       	rjmp	.+88     	; 0x1412 <fputc+0x6e>
    13ba:	22 ff       	sbrs	r18, 2
    13bc:	16 c0       	rjmp	.+44     	; 0x13ea <fputc+0x46>
    13be:	46 81       	ldd	r20, Z+6	; 0x06
    13c0:	57 81       	ldd	r21, Z+7	; 0x07
    13c2:	24 81       	ldd	r18, Z+4	; 0x04
    13c4:	35 81       	ldd	r19, Z+5	; 0x05
    13c6:	42 17       	cp	r20, r18
    13c8:	53 07       	cpc	r21, r19
    13ca:	44 f4       	brge	.+16     	; 0x13dc <fputc+0x38>
    13cc:	a0 81       	ld	r26, Z
    13ce:	b1 81       	ldd	r27, Z+1	; 0x01
    13d0:	9d 01       	movw	r18, r26
    13d2:	2f 5f       	subi	r18, 0xFF	; 255
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	31 83       	std	Z+1, r19	; 0x01
    13d8:	20 83       	st	Z, r18
    13da:	8c 93       	st	X, r24
    13dc:	26 81       	ldd	r18, Z+6	; 0x06
    13de:	37 81       	ldd	r19, Z+7	; 0x07
    13e0:	2f 5f       	subi	r18, 0xFF	; 255
    13e2:	3f 4f       	sbci	r19, 0xFF	; 255
    13e4:	37 83       	std	Z+7, r19	; 0x07
    13e6:	26 83       	std	Z+6, r18	; 0x06
    13e8:	14 c0       	rjmp	.+40     	; 0x1412 <fputc+0x6e>
    13ea:	8b 01       	movw	r16, r22
    13ec:	ec 01       	movw	r28, r24
    13ee:	fb 01       	movw	r30, r22
    13f0:	00 84       	ldd	r0, Z+8	; 0x08
    13f2:	f1 85       	ldd	r31, Z+9	; 0x09
    13f4:	e0 2d       	mov	r30, r0
    13f6:	09 95       	icall
    13f8:	89 2b       	or	r24, r25
    13fa:	e1 f6       	brne	.-72     	; 0x13b4 <fputc+0x10>
    13fc:	d8 01       	movw	r26, r16
    13fe:	16 96       	adiw	r26, 0x06	; 6
    1400:	8d 91       	ld	r24, X+
    1402:	9c 91       	ld	r25, X
    1404:	17 97       	sbiw	r26, 0x07	; 7
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	17 96       	adiw	r26, 0x07	; 7
    140a:	9c 93       	st	X, r25
    140c:	8e 93       	st	-X, r24
    140e:	16 97       	sbiw	r26, 0x06	; 6
    1410:	ce 01       	movw	r24, r28
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	08 95       	ret

0000141c <__ultoa_invert>:
    141c:	fa 01       	movw	r30, r20
    141e:	aa 27       	eor	r26, r26
    1420:	28 30       	cpi	r18, 0x08	; 8
    1422:	51 f1       	breq	.+84     	; 0x1478 <__ultoa_invert+0x5c>
    1424:	20 31       	cpi	r18, 0x10	; 16
    1426:	81 f1       	breq	.+96     	; 0x1488 <__ultoa_invert+0x6c>
    1428:	e8 94       	clt
    142a:	6f 93       	push	r22
    142c:	6e 7f       	andi	r22, 0xFE	; 254
    142e:	6e 5f       	subi	r22, 0xFE	; 254
    1430:	7f 4f       	sbci	r23, 0xFF	; 255
    1432:	8f 4f       	sbci	r24, 0xFF	; 255
    1434:	9f 4f       	sbci	r25, 0xFF	; 255
    1436:	af 4f       	sbci	r26, 0xFF	; 255
    1438:	b1 e0       	ldi	r27, 0x01	; 1
    143a:	3e d0       	rcall	.+124    	; 0x14b8 <__ultoa_invert+0x9c>
    143c:	b4 e0       	ldi	r27, 0x04	; 4
    143e:	3c d0       	rcall	.+120    	; 0x14b8 <__ultoa_invert+0x9c>
    1440:	67 0f       	add	r22, r23
    1442:	78 1f       	adc	r23, r24
    1444:	89 1f       	adc	r24, r25
    1446:	9a 1f       	adc	r25, r26
    1448:	a1 1d       	adc	r26, r1
    144a:	68 0f       	add	r22, r24
    144c:	79 1f       	adc	r23, r25
    144e:	8a 1f       	adc	r24, r26
    1450:	91 1d       	adc	r25, r1
    1452:	a1 1d       	adc	r26, r1
    1454:	6a 0f       	add	r22, r26
    1456:	71 1d       	adc	r23, r1
    1458:	81 1d       	adc	r24, r1
    145a:	91 1d       	adc	r25, r1
    145c:	a1 1d       	adc	r26, r1
    145e:	20 d0       	rcall	.+64     	; 0x14a0 <__ultoa_invert+0x84>
    1460:	09 f4       	brne	.+2      	; 0x1464 <__ultoa_invert+0x48>
    1462:	68 94       	set
    1464:	3f 91       	pop	r19
    1466:	2a e0       	ldi	r18, 0x0A	; 10
    1468:	26 9f       	mul	r18, r22
    146a:	11 24       	eor	r1, r1
    146c:	30 19       	sub	r19, r0
    146e:	30 5d       	subi	r19, 0xD0	; 208
    1470:	31 93       	st	Z+, r19
    1472:	de f6       	brtc	.-74     	; 0x142a <__ultoa_invert+0xe>
    1474:	cf 01       	movw	r24, r30
    1476:	08 95       	ret
    1478:	46 2f       	mov	r20, r22
    147a:	47 70       	andi	r20, 0x07	; 7
    147c:	40 5d       	subi	r20, 0xD0	; 208
    147e:	41 93       	st	Z+, r20
    1480:	b3 e0       	ldi	r27, 0x03	; 3
    1482:	0f d0       	rcall	.+30     	; 0x14a2 <__ultoa_invert+0x86>
    1484:	c9 f7       	brne	.-14     	; 0x1478 <__ultoa_invert+0x5c>
    1486:	f6 cf       	rjmp	.-20     	; 0x1474 <__ultoa_invert+0x58>
    1488:	46 2f       	mov	r20, r22
    148a:	4f 70       	andi	r20, 0x0F	; 15
    148c:	40 5d       	subi	r20, 0xD0	; 208
    148e:	4a 33       	cpi	r20, 0x3A	; 58
    1490:	18 f0       	brcs	.+6      	; 0x1498 <__ultoa_invert+0x7c>
    1492:	49 5d       	subi	r20, 0xD9	; 217
    1494:	31 fd       	sbrc	r19, 1
    1496:	40 52       	subi	r20, 0x20	; 32
    1498:	41 93       	st	Z+, r20
    149a:	02 d0       	rcall	.+4      	; 0x14a0 <__ultoa_invert+0x84>
    149c:	a9 f7       	brne	.-22     	; 0x1488 <__ultoa_invert+0x6c>
    149e:	ea cf       	rjmp	.-44     	; 0x1474 <__ultoa_invert+0x58>
    14a0:	b4 e0       	ldi	r27, 0x04	; 4
    14a2:	a6 95       	lsr	r26
    14a4:	97 95       	ror	r25
    14a6:	87 95       	ror	r24
    14a8:	77 95       	ror	r23
    14aa:	67 95       	ror	r22
    14ac:	ba 95       	dec	r27
    14ae:	c9 f7       	brne	.-14     	; 0x14a2 <__ultoa_invert+0x86>
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	61 05       	cpc	r22, r1
    14b4:	71 05       	cpc	r23, r1
    14b6:	08 95       	ret
    14b8:	9b 01       	movw	r18, r22
    14ba:	ac 01       	movw	r20, r24
    14bc:	0a 2e       	mov	r0, r26
    14be:	06 94       	lsr	r0
    14c0:	57 95       	ror	r21
    14c2:	47 95       	ror	r20
    14c4:	37 95       	ror	r19
    14c6:	27 95       	ror	r18
    14c8:	ba 95       	dec	r27
    14ca:	c9 f7       	brne	.-14     	; 0x14be <__ultoa_invert+0xa2>
    14cc:	62 0f       	add	r22, r18
    14ce:	73 1f       	adc	r23, r19
    14d0:	84 1f       	adc	r24, r20
    14d2:	95 1f       	adc	r25, r21
    14d4:	a0 1d       	adc	r26, r0
    14d6:	08 95       	ret

000014d8 <__prologue_saves__>:
    14d8:	2f 92       	push	r2
    14da:	3f 92       	push	r3
    14dc:	4f 92       	push	r4
    14de:	5f 92       	push	r5
    14e0:	6f 92       	push	r6
    14e2:	7f 92       	push	r7
    14e4:	8f 92       	push	r8
    14e6:	9f 92       	push	r9
    14e8:	af 92       	push	r10
    14ea:	bf 92       	push	r11
    14ec:	cf 92       	push	r12
    14ee:	df 92       	push	r13
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	ca 1b       	sub	r28, r26
    1502:	db 0b       	sbc	r29, r27
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	09 94       	ijmp

00001510 <__epilogue_restores__>:
    1510:	2a 88       	ldd	r2, Y+18	; 0x12
    1512:	39 88       	ldd	r3, Y+17	; 0x11
    1514:	48 88       	ldd	r4, Y+16	; 0x10
    1516:	5f 84       	ldd	r5, Y+15	; 0x0f
    1518:	6e 84       	ldd	r6, Y+14	; 0x0e
    151a:	7d 84       	ldd	r7, Y+13	; 0x0d
    151c:	8c 84       	ldd	r8, Y+12	; 0x0c
    151e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1520:	aa 84       	ldd	r10, Y+10	; 0x0a
    1522:	b9 84       	ldd	r11, Y+9	; 0x09
    1524:	c8 84       	ldd	r12, Y+8	; 0x08
    1526:	df 80       	ldd	r13, Y+7	; 0x07
    1528:	ee 80       	ldd	r14, Y+6	; 0x06
    152a:	fd 80       	ldd	r15, Y+5	; 0x05
    152c:	0c 81       	ldd	r16, Y+4	; 0x04
    152e:	1b 81       	ldd	r17, Y+3	; 0x03
    1530:	aa 81       	ldd	r26, Y+2	; 0x02
    1532:	b9 81       	ldd	r27, Y+1	; 0x01
    1534:	ce 0f       	add	r28, r30
    1536:	d1 1d       	adc	r29, r1
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	ed 01       	movw	r28, r26
    1544:	08 95       	ret

00001546 <_exit>:
    1546:	f8 94       	cli

00001548 <__stop_program>:
    1548:	ff cf       	rjmp	.-2      	; 0x1548 <__stop_program>
