
TempControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00001598  0000162c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800132  00800132  0000165e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000165e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002743  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000108d  00000000  00000000  0000401b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013d0  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000624  00000000  00000000  00006478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008de  00000000  00000000  00006a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d1d  00000000  00000000  0000737a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00009097  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__vector_19>
      50:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__vector_20>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__vector_23>
      60:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_24>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e8 e9       	ldi	r30, 0x98	; 152
      84:	f5 e1       	ldi	r31, 0x15	; 21
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a2 33       	cpi	r26, 0x32	; 50
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	a2 e3       	ldi	r26, 0x32	; 50
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a3 36       	cpi	r26, 0x63	; 99
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
      a6:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <buffer_create>:
	}
}

void buffer_clear(buffer_t buffer)
{
	buffer->tail = buffer->head = 0;
      ae:	0f 93       	push	r16
      b0:	1f 93       	push	r17
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	8c 01       	movw	r16, r24
      b8:	68 e0       	ldi	r22, 0x08	; 8
      ba:	70 e0       	ldi	r23, 0x00	; 0
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <calloc>
      c4:	ec 01       	movw	r28, r24
      c6:	b8 01       	movw	r22, r16
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <calloc>
      d0:	9f 83       	std	Y+7, r25	; 0x07
      d2:	8e 83       	std	Y+6, r24	; 0x06
      d4:	1d 83       	std	Y+5, r17	; 0x05
      d6:	0c 83       	std	Y+4, r16	; 0x04
      d8:	ce 01       	movw	r24, r28
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	1f 91       	pop	r17
      e0:	0f 91       	pop	r16
      e2:	08 95       	ret

000000e4 <buffer_write>:
      e4:	fc 01       	movw	r30, r24
      e6:	a6 81       	ldd	r26, Z+6	; 0x06
      e8:	b7 81       	ldd	r27, Z+7	; 0x07
      ea:	80 81       	ld	r24, Z
      ec:	91 81       	ldd	r25, Z+1	; 0x01
      ee:	a8 0f       	add	r26, r24
      f0:	b9 1f       	adc	r27, r25
      f2:	6c 93       	st	X, r22
      f4:	80 81       	ld	r24, Z
      f6:	91 81       	ldd	r25, Z+1	; 0x01
      f8:	01 96       	adiw	r24, 0x01	; 1
      fa:	64 81       	ldd	r22, Z+4	; 0x04
      fc:	75 81       	ldd	r23, Z+5	; 0x05
      fe:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__udivmodhi4>
     102:	91 83       	std	Z+1, r25	; 0x01
     104:	80 83       	st	Z, r24
     106:	08 95       	ret

00000108 <buffer_write_bytes>:
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	7c 01       	movw	r14, r24
     116:	eb 01       	movw	r28, r22
     118:	41 15       	cp	r20, r1
     11a:	51 05       	cpc	r21, r1
     11c:	51 f0       	breq	.+20     	; 0x132 <buffer_write_bytes+0x2a>
     11e:	8b 01       	movw	r16, r22
     120:	04 0f       	add	r16, r20
     122:	15 1f       	adc	r17, r21
     124:	69 91       	ld	r22, Y+
     126:	c7 01       	movw	r24, r14
     128:	0e 94 72 00 	call	0xe4	; 0xe4 <buffer_write>
     12c:	0c 17       	cp	r16, r28
     12e:	1d 07       	cpc	r17, r29
     130:	c9 f7       	brne	.-14     	; 0x124 <buffer_write_bytes+0x1c>
     132:	df 91       	pop	r29
     134:	cf 91       	pop	r28
     136:	1f 91       	pop	r17
     138:	0f 91       	pop	r16
     13a:	ff 90       	pop	r15
     13c:	ef 90       	pop	r14
     13e:	08 95       	ret

00000140 <buffer_read>:
     140:	fc 01       	movw	r30, r24
     142:	82 81       	ldd	r24, Z+2	; 0x02
     144:	93 81       	ldd	r25, Z+3	; 0x03
     146:	a6 81       	ldd	r26, Z+6	; 0x06
     148:	b7 81       	ldd	r27, Z+7	; 0x07
     14a:	a8 0f       	add	r26, r24
     14c:	b9 1f       	adc	r27, r25
     14e:	2c 91       	ld	r18, X
     150:	01 96       	adiw	r24, 0x01	; 1
     152:	64 81       	ldd	r22, Z+4	; 0x04
     154:	75 81       	ldd	r23, Z+5	; 0x05
     156:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__udivmodhi4>
     15a:	93 83       	std	Z+3, r25	; 0x03
     15c:	82 83       	std	Z+2, r24	; 0x02
     15e:	82 2f       	mov	r24, r18
     160:	08 95       	ret

00000162 <buffer_is_empty>:
}

bool buffer_is_empty(buffer_t buffer)
{
     162:	fc 01       	movw	r30, r24
	return buffer->tail == buffer->head;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	40 81       	ld	r20, Z
     168:	51 81       	ldd	r21, Z+1	; 0x01
     16a:	22 81       	ldd	r18, Z+2	; 0x02
     16c:	33 81       	ldd	r19, Z+3	; 0x03
     16e:	42 17       	cp	r20, r18
     170:	53 07       	cpc	r21, r19
     172:	09 f0       	breq	.+2      	; 0x176 <buffer_is_empty+0x14>
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	08 95       	ret

00000178 <crc_8_checkSum>:
#include "crc_8_dallas.h"
#include <stdlib.h>
#include <string.h>

uint8_t crc_8_checkSum( void *mas, uint8_t Len )
{
     178:	cf 92       	push	r12
     17a:	df 92       	push	r13
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	1f 93       	push	r17
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	6c 01       	movw	r12, r24
     188:	c6 2f       	mov	r28, r22
	uint8_t i,dat,crc,fb,st_byt;
	uint8_t * var = calloc(Len, sizeof(uint8_t));//(uint8_t*)mas;
     18a:	e6 2e       	mov	r14, r22
     18c:	f1 2c       	mov	r15, r1
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	c7 01       	movw	r24, r14
     194:	0e 94 8e 06 	call	0xd1c	; 0xd1c <calloc>
     198:	18 2f       	mov	r17, r24
     19a:	d9 2f       	mov	r29, r25
	memcpy(var,mas,Len);
     19c:	a7 01       	movw	r20, r14
     19e:	b6 01       	movw	r22, r12
     1a0:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <memcpy>
     1a4:	e1 2f       	mov	r30, r17
     1a6:	fd 2f       	mov	r31, r29
	st_byt=0; crc=0;
     1a8:	40 e0       	ldi	r20, 0x00	; 0
     1aa:	80 e0       	ldi	r24, 0x00	; 0
		for( i=0; i<8; i++) {  // счетчик битов в байте
			fb = crc ^ dat;
			fb &= 1;
			crc >>= 1;
			dat >>= 1;
			if( fb == 1 ) crc ^= 0x8c; // полином
     1ac:	5c e8       	ldi	r21, 0x8C	; 140
	uint8_t i,dat,crc,fb,st_byt;
	uint8_t * var = calloc(Len, sizeof(uint8_t));//(uint8_t*)mas;
	memcpy(var,mas,Len);
	st_byt=0; crc=0;
	do{
		dat= var[st_byt];
     1ae:	21 91       	ld	r18, Z+
     1b0:	98 e0       	ldi	r25, 0x08	; 8
		for( i=0; i<8; i++) {  // счетчик битов в байте
			fb = crc ^ dat;
     1b2:	32 2f       	mov	r19, r18
     1b4:	38 27       	eor	r19, r24
			fb &= 1;
			crc >>= 1;
     1b6:	86 95       	lsr	r24
			dat >>= 1;
     1b8:	26 95       	lsr	r18
			if( fb == 1 ) crc ^= 0x8c; // полином
     1ba:	30 fd       	sbrc	r19, 0
     1bc:	85 27       	eor	r24, r21
     1be:	91 50       	subi	r25, 0x01	; 1
	uint8_t * var = calloc(Len, sizeof(uint8_t));//(uint8_t*)mas;
	memcpy(var,mas,Len);
	st_byt=0; crc=0;
	do{
		dat= var[st_byt];
		for( i=0; i<8; i++) {  // счетчик битов в байте
     1c0:	c1 f7       	brne	.-16     	; 0x1b2 <crc_8_checkSum+0x3a>
			fb &= 1;
			crc >>= 1;
			dat >>= 1;
			if( fb == 1 ) crc ^= 0x8c; // полином
		}
		st_byt++;
     1c2:	4f 5f       	subi	r20, 0xFF	; 255
	} while( st_byt < Len ); // счетчик байтов в массиве
     1c4:	4c 17       	cp	r20, r28
     1c6:	98 f3       	brcs	.-26     	; 0x1ae <crc_8_checkSum+0x36>
	return crc;
}
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	df 90       	pop	r13
     1d4:	cf 90       	pop	r12
     1d6:	08 95       	ret

000001d8 <ds18b20_get_temperature>:
		return CRC_ERROR;
	}
}

device_state ds18b20_get_temperature(ds18b20_t *sensor)
{
     1d8:	ef 92       	push	r14
     1da:	ff 92       	push	r15
     1dc:	0f 93       	push	r16
     1de:	1f 93       	push	r17
     1e0:	cf 93       	push	r28
     1e2:	8c 01       	movw	r16, r24
	device_state state = one_wire_reset();
     1e4:	0e 94 0a 03 	call	0x614	; 0x614 <one_wire_reset>
     1e8:	c8 2f       	mov	r28, r24
	if(state == DEVICE_OK)
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <ds18b20_get_temperature+0x18>
     1ee:	65 c0       	rjmp	.+202    	; 0x2ba <ds18b20_get_temperature+0xe2>
	{
		write_byte(SKIP_ROM);
     1f0:	8c ec       	ldi	r24, 0xCC	; 204
     1f2:	0e 94 65 03 	call	0x6ca	; 0x6ca <write_byte>
		write_byte(TEMP_MEASURE);
     1f6:	84 e4       	ldi	r24, 0x44	; 68
     1f8:	0e 94 65 03 	call	0x6ca	; 0x6ca <write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fc:	87 eb       	ldi	r24, 0xB7	; 183
     1fe:	9b e0       	ldi	r25, 0x0B	; 11
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <ds18b20_get_temperature+0x28>
     204:	00 c0       	rjmp	.+0      	; 0x206 <ds18b20_get_temperature+0x2e>
     206:	00 00       	nop
		_delay_us(750);
		state = one_wire_reset();
     208:	0e 94 0a 03 	call	0x614	; 0x614 <one_wire_reset>
     20c:	c8 2f       	mov	r28, r24
		if(state == DEVICE_OK)
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	09 f0       	breq	.+2      	; 0x214 <ds18b20_get_temperature+0x3c>
     212:	53 c0       	rjmp	.+166    	; 0x2ba <ds18b20_get_temperature+0xe2>
		{
			write_byte(SKIP_ROM);
     214:	8c ec       	ldi	r24, 0xCC	; 204
     216:	0e 94 65 03 	call	0x6ca	; 0x6ca <write_byte>
			write_byte(READ_SCRATCHPAD);
     21a:	8e eb       	ldi	r24, 0xBE	; 190
     21c:	0e 94 65 03 	call	0x6ca	; 0x6ca <write_byte>
			memory[0] = read_byte();
     220:	0e 94 2f 03 	call	0x65e	; 0x65e <read_byte>
     224:	0f 2e       	mov	r0, r31
     226:	f8 e3       	ldi	r31, 0x38	; 56
     228:	ef 2e       	mov	r14, r31
     22a:	f1 e0       	ldi	r31, 0x01	; 1
     22c:	ff 2e       	mov	r15, r31
     22e:	f0 2d       	mov	r31, r0
     230:	d7 01       	movw	r26, r14
     232:	8c 93       	st	X, r24
			memory[1] = read_byte();
     234:	0e 94 2f 03 	call	0x65e	; 0x65e <read_byte>
     238:	f7 01       	movw	r30, r14
     23a:	81 83       	std	Z+1, r24	; 0x01
			memory[2] = read_byte();
     23c:	0e 94 2f 03 	call	0x65e	; 0x65e <read_byte>
     240:	d7 01       	movw	r26, r14
     242:	12 96       	adiw	r26, 0x02	; 2
     244:	8c 93       	st	X, r24
			memory[3] = read_byte();
     246:	0e 94 2f 03 	call	0x65e	; 0x65e <read_byte>
     24a:	f7 01       	movw	r30, r14
     24c:	83 83       	std	Z+3, r24	; 0x03
			memory[4] = read_byte();
     24e:	0e 94 2f 03 	call	0x65e	; 0x65e <read_byte>
     252:	d7 01       	movw	r26, r14
     254:	14 96       	adiw	r26, 0x04	; 4
     256:	8c 93       	st	X, r24
			memory[5] = read_byte();
     258:	0e 94 2f 03 	call	0x65e	; 0x65e <read_byte>
     25c:	f7 01       	movw	r30, r14
     25e:	85 83       	std	Z+5, r24	; 0x05
			memory[6] = read_byte();
     260:	0e 94 2f 03 	call	0x65e	; 0x65e <read_byte>
     264:	d7 01       	movw	r26, r14
     266:	16 96       	adiw	r26, 0x06	; 6
     268:	8c 93       	st	X, r24
			memory[7] = read_byte();
     26a:	0e 94 2f 03 	call	0x65e	; 0x65e <read_byte>
     26e:	f7 01       	movw	r30, r14
     270:	87 83       	std	Z+7, r24	; 0x07
			memory[8] = read_byte();
     272:	0e 94 2f 03 	call	0x65e	; 0x65e <read_byte>
     276:	d7 01       	movw	r26, r14
     278:	18 96       	adiw	r26, 0x08	; 8
     27a:	8c 93       	st	X, r24
			if(crc_8_checkSum(memory,9)==0){
     27c:	69 e0       	ldi	r22, 0x09	; 9
     27e:	c7 01       	movw	r24, r14
     280:	0e 94 bc 00 	call	0x178	; 0x178 <crc_8_checkSum>
     284:	81 11       	cpse	r24, r1
     286:	18 c0       	rjmp	.+48     	; 0x2b8 <ds18b20_get_temperature+0xe0>
				sensor->temperature = memory[1];
     288:	f7 01       	movw	r30, r14
				sensor->temperature <<= 8;
				sensor->temperature = sensor->temperature|memory[0];
     28a:	81 81       	ldd	r24, Z+1	; 0x01
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	98 2f       	mov	r25, r24
     290:	88 27       	eor	r24, r24
     292:	20 81       	ld	r18, Z
     294:	82 2b       	or	r24, r18
     296:	d8 01       	movw	r26, r16
     298:	19 96       	adiw	r26, 0x09	; 9
     29a:	9c 93       	st	X, r25
     29c:	8e 93       	st	-X, r24
     29e:	18 97       	sbiw	r26, 0x08	; 8
				sensor->high_level_temp = memory[2];
     2a0:	82 81       	ldd	r24, Z+2	; 0x02
     2a2:	1a 96       	adiw	r26, 0x0a	; 10
     2a4:	8c 93       	st	X, r24
     2a6:	1a 97       	sbiw	r26, 0x0a	; 10
				sensor->low_level_temp = memory[3];
     2a8:	83 81       	ldd	r24, Z+3	; 0x03
     2aa:	1b 96       	adiw	r26, 0x0b	; 11
     2ac:	8c 93       	st	X, r24
     2ae:	1b 97       	sbiw	r26, 0x0b	; 11
				sensor->config = memory[4];
     2b0:	84 81       	ldd	r24, Z+4	; 0x04
     2b2:	1c 96       	adiw	r26, 0x0c	; 12
     2b4:	8c 93       	st	X, r24
     2b6:	01 c0       	rjmp	.+2      	; 0x2ba <ds18b20_get_temperature+0xe2>
				}else{
				state = CRC_ERROR;
     2b8:	c3 e0       	ldi	r28, 0x03	; 3
			}
		}
		
	}
	return(state);
}
     2ba:	8c 2f       	mov	r24, r28
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	08 95       	ret

000002c8 <main>:
//uint8_t test[3] = {0xFF,0xAA,0xEA};
menu_t menu = {0};
ds18b20_t sensor;
int main(void)
{
	DDRD = 0xFF;
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x0F;
     2cc:	8f e0       	ldi	r24, 0x0F	; 15
     2ce:	82 bb       	out	0x12, r24	; 18
	uint8_t count = 0;
	display_usart = usart_create(1,9600,128);
     2d0:	40 e8       	ldi	r20, 0x80	; 128
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	60 e8       	ldi	r22, 0x80	; 128
     2d6:	75 e2       	ldi	r23, 0x25	; 37
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	0e 94 0f 04 	call	0x81e	; 0x81e <usart_create>
     2de:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <display_usart+0x1>
     2e2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <display_usart>
	pc_usart = usart_create(0,9600,128);
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	60 e8       	ldi	r22, 0x80	; 128
     2ec:	75 e2       	ldi	r23, 0x25	; 37
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	0e 94 0f 04 	call	0x81e	; 0x81e <usart_create>
     2f4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <pc_usart+0x1>
     2f8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <pc_usart>
	nextion_display_init(&display_usart);
     2fc:	8e e4       	ldi	r24, 0x4E	; 78
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0e 94 20 02 	call	0x440	; 0x440 <nextion_display_init>
	menu = nextion_display_create_menu(1);
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <nextion_display_create_menu>
     30a:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <__data_end>
     30e:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <__data_end+0x1>
     312:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end+0x2>
	nextion_display_add_page(&menu,2);
     316:	62 e0       	ldi	r22, 0x02	; 2
     318:	82 e3       	ldi	r24, 0x32	; 50
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nextion_display_add_page>
	nextion_display_add_element(&menu.pages[0],"n0.val=");
     320:	c2 e3       	ldi	r28, 0x32	; 50
     322:	d1 e0       	ldi	r29, 0x01	; 1
     324:	6a e1       	ldi	r22, 0x1A	; 26
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	88 81       	ld	r24, Y
     32a:	99 81       	ldd	r25, Y+1	; 0x01
     32c:	0e 94 04 02 	call	0x408	; 0x408 <nextion_display_add_element>
	nextion_display_add_element(&menu.pages[0],"n1.val=");
     330:	62 e2       	ldi	r22, 0x22	; 34
     332:	71 e0       	ldi	r23, 0x01	; 1
     334:	88 81       	ld	r24, Y
     336:	99 81       	ldd	r25, Y+1	; 0x01
     338:	0e 94 04 02 	call	0x408	; 0x408 <nextion_display_add_element>
	asm("sei");
     33c:	78 94       	sei
ds18b20_t sensor;
int main(void)
{
	DDRD = 0xFF;
	PORTD = 0x0F;
	uint8_t count = 0;
     33e:	f1 2c       	mov	r15, r1
		float temp = (float)frac;
		temp /=16.0f;
		temp*=100.0;
		frac = (uint8_t)temp;
		
		menu.pages[0].items[0].value = value>>4;
     340:	8e 01       	movw	r16, r28
	nextion_display_add_element(&menu.pages[0],"n1.val=");
	asm("sei");
	while (1)
	{
		
		device_state state = ds18b20_get_temperature(&sensor);
     342:	82 e5       	ldi	r24, 0x52	; 82
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <ds18b20_get_temperature>
		//PORTD = sensor.temperature>>4;
		uint16_t value = sensor.temperature;
     34a:	c0 91 5a 01 	lds	r28, 0x015A	; 0x80015a <sensor+0x8>
     34e:	d0 91 5b 01 	lds	r29, 0x015B	; 0x80015b <sensor+0x9>
		PORTD = count;
     352:	f2 ba       	out	0x12, r15	; 18
		uint8_t frac = value & 0x000F;		 
		float temp = (float)frac;
     354:	6c 2f       	mov	r22, r28
     356:	6f 70       	andi	r22, 0x0F	; 15
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 5d 05 	call	0xaba	; 0xaba <__floatunsisf>
		temp /=16.0f;
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e8       	ldi	r20, 0x80	; 128
     368:	5d e3       	ldi	r21, 0x3D	; 61
     36a:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
		temp*=100.0;
		frac = (uint8_t)temp;
		
		menu.pages[0].items[0].value = value>>4;
     36e:	d8 01       	movw	r26, r16
     370:	ed 91       	ld	r30, X+
     372:	fc 91       	ld	r31, X
     374:	01 90       	ld	r0, Z+
     376:	f0 81       	ld	r31, Z
     378:	e0 2d       	mov	r30, r0
     37a:	d2 95       	swap	r29
     37c:	c2 95       	swap	r28
     37e:	cf 70       	andi	r28, 0x0F	; 15
     380:	cd 27       	eor	r28, r29
     382:	df 70       	andi	r29, 0x0F	; 15
     384:	cd 27       	eor	r28, r29
     386:	c0 83       	st	Z, r28
		menu.pages[0].items[1].value = frac;
     388:	d8 01       	movw	r26, r16
     38a:	ed 91       	ld	r30, X+
     38c:	fc 91       	ld	r31, X
     38e:	c0 81       	ld	r28, Z
     390:	d1 81       	ldd	r29, Z+1	; 0x01
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	48 ec       	ldi	r20, 0xC8	; 200
     398:	52 e4       	ldi	r21, 0x42	; 66
     39a:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
     39e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fixunssfsi>
     3a2:	6b 83       	std	Y+3, r22	; 0x03
		//PORTD = menu.pages[0].items[0].value;
		nextion_display_refresh(&menu);	
     3a4:	c8 01       	movw	r24, r16
     3a6:	0e 94 48 02 	call	0x490	; 0x490 <nextion_display_refresh>
		count++;
     3aa:	f3 94       	inc	r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ac:	bf ef       	ldi	r27, 0xFF	; 255
     3ae:	29 e6       	ldi	r18, 0x69	; 105
     3b0:	88 e1       	ldi	r24, 0x18	; 24
     3b2:	b1 50       	subi	r27, 0x01	; 1
     3b4:	20 40       	sbci	r18, 0x00	; 0
     3b6:	80 40       	sbci	r24, 0x00	; 0
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <main+0xea>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <main+0xf4>
     3bc:	00 00       	nop
     3be:	c1 cf       	rjmp	.-126    	; 0x342 <main+0x7a>

000003c0 <nextion_display_create_menu>:

usart_t _usart = NULL;
void send_ffffff();

menu_t nextion_display_create_menu(const uint8_t page_count)
{
     3c0:	cf 93       	push	r28
     3c2:	c8 2f       	mov	r28, r24
	menu_t menu;
	menu.page_count = page_count;
	menu.pages = calloc(page_count, sizeof(page_t));
     3c4:	63 e0       	ldi	r22, 0x03	; 3
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <calloc>
	return menu;
}
     3ce:	68 2f       	mov	r22, r24
     3d0:	79 2f       	mov	r23, r25
     3d2:	8c 2f       	mov	r24, r28
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <nextion_display_add_page>:

void nextion_display_add_page(menu_t *menu, const uint8_t item_count)
{
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
	static uint8_t current=0;
	if(current < menu->page_count)
     3de:	fc 01       	movw	r30, r24
     3e0:	22 81       	ldd	r18, Z+2	; 0x02
     3e2:	22 23       	and	r18, r18
     3e4:	69 f0       	breq	.+26     	; 0x400 <__LOCK_REGION_LENGTH__>
     3e6:	16 2f       	mov	r17, r22
     3e8:	ec 01       	movw	r28, r24
	{
		page_t page;
		page.item_count = item_count;
		page.items = calloc(item_count, sizeof(item_t));
     3ea:	63 e0       	ldi	r22, 0x03	; 3
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	81 2f       	mov	r24, r17
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <calloc>
		menu->pages[current] = page;
     3f6:	e8 81       	ld	r30, Y
     3f8:	f9 81       	ldd	r31, Y+1	; 0x01
     3fa:	91 83       	std	Z+1, r25	; 0x01
     3fc:	80 83       	st	Z, r24
     3fe:	12 83       	std	Z+2, r17	; 0x02
	}
	
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	08 95       	ret

00000408 <nextion_display_add_element>:

uint8_t nextion_display_add_element(page_t *page, char *id){
     408:	dc 01       	movw	r26, r24
	static uint8_t current = 0;
	if(current < page->item_count){
     40a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <current.2172>
     40e:	12 96       	adiw	r26, 0x02	; 2
     410:	8c 91       	ld	r24, X
     412:	12 97       	sbiw	r26, 0x02	; 2
     414:	98 17       	cp	r25, r24
     416:	90 f4       	brcc	.+36     	; 0x43c <nextion_display_add_element+0x34>
		page->items[current].string_id = id;
     418:	29 2f       	mov	r18, r25
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	f9 01       	movw	r30, r18
     41e:	ee 0f       	add	r30, r30
     420:	ff 1f       	adc	r31, r31
     422:	2e 0f       	add	r18, r30
     424:	3f 1f       	adc	r19, r31
     426:	ed 91       	ld	r30, X+
     428:	fc 91       	ld	r31, X
     42a:	e2 0f       	add	r30, r18
     42c:	f3 1f       	adc	r31, r19
     42e:	72 83       	std	Z+2, r23	; 0x02
     430:	61 83       	std	Z+1, r22	; 0x01
		current++;
     432:	9f 5f       	subi	r25, 0xFF	; 255
     434:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <current.2172>
		return 1;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	08 95       	ret
	}
	return 0;
     43c:	80 e0       	ldi	r24, 0x00	; 0
}
     43e:	08 95       	ret

00000440 <nextion_display_init>:

void nextion_display_init(usart_t *usart)
{
	_usart = *usart;
     440:	fc 01       	movw	r30, r24
     442:	80 81       	ld	r24, Z
     444:	91 81       	ldd	r25, Z+1	; 0x01
     446:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <_usart+0x1>
     44a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <_usart>
     44e:	08 95       	ret

00000450 <send_ffffff>:
		}
	}
}

void send_ffffff()
{
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	00 d0       	rcall	.+0      	; 0x456 <send_ffffff+0x6>
     456:	00 d0       	rcall	.+0      	; 0x458 <send_ffffff+0x8>
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	uint32_t var = 0xFFFFFF;
     45c:	8f ef       	ldi	r24, 0xFF	; 255
     45e:	9f ef       	ldi	r25, 0xFF	; 255
     460:	af ef       	ldi	r26, 0xFF	; 255
     462:	b0 e0       	ldi	r27, 0x00	; 0
     464:	89 83       	std	Y+1, r24	; 0x01
     466:	9a 83       	std	Y+2, r25	; 0x02
     468:	ab 83       	std	Y+3, r26	; 0x03
     46a:	bc 83       	std	Y+4, r27	; 0x04
	usart_write(_usart,&var,3);
     46c:	43 e0       	ldi	r20, 0x03	; 3
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	be 01       	movw	r22, r28
     472:	6f 5f       	subi	r22, 0xFF	; 255
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <_usart>
     47a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <_usart+0x1>
     47e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <usart_write>
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <nextion_display_refresh>:
{
	_usart = *usart;
}

void nextion_display_refresh(menu_t *menu)
{
     490:	4f 92       	push	r4
     492:	5f 92       	push	r5
     494:	6f 92       	push	r6
     496:	7f 92       	push	r7
     498:	8f 92       	push	r8
     49a:	9f 92       	push	r9
     49c:	af 92       	push	r10
     49e:	bf 92       	push	r11
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
	char *value=NULL;
	for(uint8_t i = 0; i<menu->page_count; i++)
     4b0:	dc 01       	movw	r26, r24
     4b2:	12 96       	adiw	r26, 0x02	; 2
     4b4:	2c 91       	ld	r18, X
     4b6:	21 11       	cpse	r18, r1
     4b8:	7d c0       	rjmp	.+250    	; 0x5b4 <__stack+0xb5>
     4ba:	9b c0       	rjmp	.+310    	; 0x5f2 <__stack+0xf3>
	{
		for(uint8_t j = 0;j<menu->pages[i].item_count; j++)
     4bc:	71 2c       	mov	r7, r1
		{
			value = calloc(3, sizeof(uint8_t));
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <calloc>
     4ca:	58 2e       	mov	r5, r24
     4cc:	69 2e       	mov	r6, r25
			if(menu->pages[i].items[j].value>=0)
     4ce:	87 2d       	mov	r24, r7
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	ec 01       	movw	r28, r24
     4d4:	cc 0f       	add	r28, r28
     4d6:	dd 1f       	adc	r29, r29
     4d8:	c8 0f       	add	r28, r24
     4da:	d9 1f       	adc	r29, r25
     4dc:	d4 01       	movw	r26, r8
     4de:	ed 91       	ld	r30, X+
     4e0:	fc 91       	ld	r31, X
     4e2:	ec 0f       	add	r30, r28
     4e4:	fd 1f       	adc	r31, r29
     4e6:	80 81       	ld	r24, Z
     4e8:	88 23       	and	r24, r24
     4ea:	9c f0       	brlt	.+38     	; 0x512 <__stack+0x13>
				sprintf(value,"%d",menu->pages[i].items[j].value);	
     4ec:	28 2f       	mov	r18, r24
     4ee:	08 2e       	mov	r0, r24
     4f0:	00 0c       	add	r0, r0
     4f2:	33 0b       	sbc	r19, r19
     4f4:	3f 93       	push	r19
     4f6:	8f 93       	push	r24
     4f8:	df 92       	push	r13
     4fa:	cf 92       	push	r12
     4fc:	6f 92       	push	r6
     4fe:	5f 92       	push	r5
     500:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <sprintf>
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	12 c0       	rjmp	.+36     	; 0x536 <__stack+0x37>
			else
				sprintf(value,"%+d",menu->pages[i].items[j].value);			
     512:	28 2f       	mov	r18, r24
     514:	08 2e       	mov	r0, r24
     516:	00 0c       	add	r0, r0
     518:	33 0b       	sbc	r19, r19
     51a:	3f 93       	push	r19
     51c:	8f 93       	push	r24
     51e:	bf 92       	push	r11
     520:	af 92       	push	r10
     522:	6f 92       	push	r6
     524:	5f 92       	push	r5
     526:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <sprintf>
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
			usart_write(_usart, menu->pages[i].items[j].string_id, strlen(menu->pages[i].items[j].string_id));
     536:	d7 01       	movw	r26, r14
     538:	ed 91       	ld	r30, X+
     53a:	fc 91       	ld	r31, X
     53c:	e0 0f       	add	r30, r16
     53e:	f1 1f       	adc	r31, r17
     540:	80 81       	ld	r24, Z
     542:	91 81       	ldd	r25, Z+1	; 0x01
     544:	c8 0f       	add	r28, r24
     546:	d9 1f       	adc	r29, r25
     548:	69 81       	ldd	r22, Y+1	; 0x01
     54a:	7a 81       	ldd	r23, Y+2	; 0x02
     54c:	fb 01       	movw	r30, r22
     54e:	01 90       	ld	r0, Z+
     550:	00 20       	and	r0, r0
     552:	e9 f7       	brne	.-6      	; 0x54e <__stack+0x4f>
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	af 01       	movw	r20, r30
     558:	46 1b       	sub	r20, r22
     55a:	57 0b       	sbc	r21, r23
     55c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <_usart>
     560:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <_usart+0x1>
     564:	0e 94 63 04 	call	0x8c6	; 0x8c6 <usart_write>
			usart_write(_usart, value, strlen(value));
     568:	a5 2d       	mov	r26, r5
     56a:	b6 2d       	mov	r27, r6
     56c:	fd 01       	movw	r30, r26
     56e:	01 90       	ld	r0, Z+
     570:	00 20       	and	r0, r0
     572:	e9 f7       	brne	.-6      	; 0x56e <__stack+0x6f>
     574:	31 97       	sbiw	r30, 0x01	; 1
     576:	af 01       	movw	r20, r30
     578:	4a 1b       	sub	r20, r26
     57a:	5b 0b       	sbc	r21, r27
     57c:	65 2d       	mov	r22, r5
     57e:	76 2d       	mov	r23, r6
     580:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <_usart>
     584:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <_usart+0x1>
     588:	0e 94 63 04 	call	0x8c6	; 0x8c6 <usart_write>
			send_ffffff();
     58c:	0e 94 28 02 	call	0x450	; 0x450 <send_ffffff>
void nextion_display_refresh(menu_t *menu)
{
	char *value=NULL;
	for(uint8_t i = 0; i<menu->page_count; i++)
	{
		for(uint8_t j = 0;j<menu->pages[i].item_count; j++)
     590:	73 94       	inc	r7
     592:	f7 01       	movw	r30, r14
     594:	80 80       	ld	r8, Z
     596:	91 80       	ldd	r9, Z+1	; 0x01
     598:	80 0e       	add	r8, r16
     59a:	91 1e       	adc	r9, r17
     59c:	d4 01       	movw	r26, r8
     59e:	12 96       	adiw	r26, 0x02	; 2
     5a0:	8c 91       	ld	r24, X
     5a2:	78 16       	cp	r7, r24
     5a4:	08 f4       	brcc	.+2      	; 0x5a8 <__stack+0xa9>
     5a6:	8b cf       	rjmp	.-234    	; 0x4be <nextion_display_refresh+0x2e>
}

void nextion_display_refresh(menu_t *menu)
{
	char *value=NULL;
	for(uint8_t i = 0; i<menu->page_count; i++)
     5a8:	43 94       	inc	r4
     5aa:	f7 01       	movw	r30, r14
     5ac:	82 81       	ldd	r24, Z+2	; 0x02
     5ae:	48 16       	cp	r4, r24
     5b0:	78 f0       	brcs	.+30     	; 0x5d0 <__stack+0xd1>
     5b2:	1f c0       	rjmp	.+62     	; 0x5f2 <__stack+0xf3>
     5b4:	7c 01       	movw	r14, r24
     5b6:	41 2c       	mov	r4, r1
		{
			value = calloc(3, sizeof(uint8_t));
			if(menu->pages[i].items[j].value>=0)
				sprintf(value,"%d",menu->pages[i].items[j].value);	
			else
				sprintf(value,"%+d",menu->pages[i].items[j].value);			
     5b8:	0f 2e       	mov	r0, r31
     5ba:	fd e2       	ldi	r31, 0x2D	; 45
     5bc:	af 2e       	mov	r10, r31
     5be:	f1 e0       	ldi	r31, 0x01	; 1
     5c0:	bf 2e       	mov	r11, r31
     5c2:	f0 2d       	mov	r31, r0
	{
		for(uint8_t j = 0;j<menu->pages[i].item_count; j++)
		{
			value = calloc(3, sizeof(uint8_t));
			if(menu->pages[i].items[j].value>=0)
				sprintf(value,"%d",menu->pages[i].items[j].value);	
     5c4:	0f 2e       	mov	r0, r31
     5c6:	fa e2       	ldi	r31, 0x2A	; 42
     5c8:	cf 2e       	mov	r12, r31
     5ca:	f1 e0       	ldi	r31, 0x01	; 1
     5cc:	df 2e       	mov	r13, r31
     5ce:	f0 2d       	mov	r31, r0
void nextion_display_refresh(menu_t *menu)
{
	char *value=NULL;
	for(uint8_t i = 0; i<menu->page_count; i++)
	{
		for(uint8_t j = 0;j<menu->pages[i].item_count; j++)
     5d0:	84 2d       	mov	r24, r4
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	8c 01       	movw	r16, r24
     5d6:	00 0f       	add	r16, r16
     5d8:	11 1f       	adc	r17, r17
     5da:	08 0f       	add	r16, r24
     5dc:	19 1f       	adc	r17, r25
     5de:	d7 01       	movw	r26, r14
     5e0:	8d 90       	ld	r8, X+
     5e2:	9c 90       	ld	r9, X
     5e4:	80 0e       	add	r8, r16
     5e6:	91 1e       	adc	r9, r17
     5e8:	f4 01       	movw	r30, r8
     5ea:	82 81       	ldd	r24, Z+2	; 0x02
     5ec:	81 11       	cpse	r24, r1
     5ee:	66 cf       	rjmp	.-308    	; 0x4bc <nextion_display_refresh+0x2c>
     5f0:	db cf       	rjmp	.-74     	; 0x5a8 <__stack+0xa9>
			usart_write(_usart, menu->pages[i].items[j].string_id, strlen(menu->pages[i].items[j].string_id));
			usart_write(_usart, value, strlen(value));
			send_ffffff();
		}
	}
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	bf 90       	pop	r11
     604:	af 90       	pop	r10
     606:	9f 90       	pop	r9
     608:	8f 90       	pop	r8
     60a:	7f 90       	pop	r7
     60c:	6f 90       	pop	r6
     60e:	5f 90       	pop	r5
     610:	4f 90       	pop	r4
     612:	08 95       	ret

00000614 <one_wire_reset>:
	}
	SET_IOPIN_TO_OUT;
	PULL_UP_IOPIN;
	_delay_us(75);	
	return data;
}
     614:	9f b7       	in	r25, 0x3f	; 63
     616:	f8 94       	cli
     618:	d0 9a       	sbi	0x1a, 0	; 26
     61a:	d8 98       	cbi	0x1b, 0	; 27
     61c:	ef ee       	ldi	r30, 0xEF	; 239
     61e:	fa e0       	ldi	r31, 0x0A	; 10
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <one_wire_reset+0xc>
     624:	00 c0       	rjmp	.+0      	; 0x626 <one_wire_reset+0x12>
     626:	00 00       	nop
     628:	d8 9a       	sbi	0x1b, 0	; 27
     62a:	eb e2       	ldi	r30, 0x2B	; 43
     62c:	f1 e0       	ldi	r31, 0x01	; 1
     62e:	31 97       	sbiw	r30, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <one_wire_reset+0x1a>
     632:	00 c0       	rjmp	.+0      	; 0x634 <one_wire_reset+0x20>
     634:	00 00       	nop
     636:	d0 98       	cbi	0x1a, 0	; 26
     638:	c8 99       	sbic	0x19, 0	; 25
     63a:	0c c0       	rjmp	.+24     	; 0x654 <one_wire_reset+0x40>
     63c:	ef ee       	ldi	r30, 0xEF	; 239
     63e:	fa e0       	ldi	r31, 0x0A	; 10
     640:	31 97       	sbiw	r30, 0x01	; 1
     642:	f1 f7       	brne	.-4      	; 0x640 <one_wire_reset+0x2c>
     644:	00 c0       	rjmp	.+0      	; 0x646 <one_wire_reset+0x32>
     646:	00 00       	nop
     648:	89 b3       	in	r24, 0x19	; 25
     64a:	88 23       	and	r24, r24
     64c:	29 f0       	breq	.+10     	; 0x658 <one_wire_reset+0x44>
     64e:	9f bf       	out	0x3f, r25	; 63
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	08 95       	ret
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	01 c0       	rjmp	.+2      	; 0x65a <one_wire_reset+0x46>
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	9f bf       	out	0x3f, r25	; 63
     65c:	08 95       	ret

0000065e <read_byte>:
     65e:	2f b7       	in	r18, 0x3f	; 63
     660:	f8 94       	cli
     662:	d0 9a       	sbi	0x1a, 0	; 26
     664:	98 e0       	ldi	r25, 0x08	; 8
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	86 95       	lsr	r24
     66a:	d8 98       	cbi	0x1b, 0	; 27
     66c:	30 e1       	ldi	r19, 0x10	; 16
     66e:	3a 95       	dec	r19
     670:	f1 f7       	brne	.-4      	; 0x66e <read_byte+0x10>
     672:	d8 9a       	sbi	0x1b, 0	; 27
     674:	d0 98       	cbi	0x1a, 0	; 26
     676:	e0 e4       	ldi	r30, 0x40	; 64
     678:	ea 95       	dec	r30
     67a:	f1 f7       	brne	.-4      	; 0x678 <read_byte+0x1a>
     67c:	c8 99       	sbic	0x19, 0	; 25
     67e:	80 68       	ori	r24, 0x80	; 128
     680:	d0 9a       	sbi	0x1a, 0	; 26
     682:	d8 9a       	sbi	0x1b, 0	; 27
     684:	eb e2       	ldi	r30, 0x2B	; 43
     686:	f1 e0       	ldi	r31, 0x01	; 1
     688:	31 97       	sbiw	r30, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <read_byte+0x2a>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <read_byte+0x30>
     68e:	00 00       	nop
     690:	91 50       	subi	r25, 0x01	; 1
     692:	51 f7       	brne	.-44     	; 0x668 <read_byte+0xa>
     694:	2f bf       	out	0x3f, r18	; 63
     696:	08 95       	ret

00000698 <write_0>:

void write_0(){
	SET_IOPIN_TO_OUT;
     698:	d0 9a       	sbi	0x1a, 0	; 26
	PULL_DOWN_IOPIN;
     69a:	d8 98       	cbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     69c:	80 e5       	ldi	r24, 0x50	; 80
     69e:	8a 95       	dec	r24
     6a0:	f1 f7       	brne	.-4      	; 0x69e <write_0+0x6>
     6a2:	80 ef       	ldi	r24, 0xF0	; 240
     6a4:	8a 95       	dec	r24
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <write_0+0xc>
	_delay_us(15);
	_delay_us(45);
	PULL_UP_IOPIN;
     6a8:	d8 9a       	sbi	0x1b, 0	; 27
     6aa:	8a e0       	ldi	r24, 0x0A	; 10
     6ac:	8a 95       	dec	r24
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <write_0+0x14>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <write_0+0x1a>
     6b2:	08 95       	ret

000006b4 <write_1>:
	_delay_us(2);
}

void write_1(){
	SET_IOPIN_TO_OUT;
     6b4:	d0 9a       	sbi	0x1a, 0	; 26
	PULL_DOWN_IOPIN;
     6b6:	d8 98       	cbi	0x1b, 0	; 27
     6b8:	80 e5       	ldi	r24, 0x50	; 80
     6ba:	8a 95       	dec	r24
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <write_1+0x6>
	_delay_us(15);
	PULL_UP_IOPIN;
     6be:	d8 9a       	sbi	0x1b, 0	; 27
     6c0:	8a ef       	ldi	r24, 0xFA	; 250
     6c2:	8a 95       	dec	r24
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <write_1+0xe>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <write_1+0x14>
     6c8:	08 95       	ret

000006ca <write_byte>:
	}
	return DEVICE_OK;
}

void write_byte(uint8_t data)
{
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     6d8:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6da:	f8 94       	cli
     6dc:	08 e0       	ldi	r16, 0x08	; 8
     6de:	10 e0       	ldi	r17, 0x00	; 0
     6e0:	c1 e0       	ldi	r28, 0x01	; 1
     6e2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(uint16_t i=1;i<=128;i*=2){
			if(data & i)
     6e4:	e8 2e       	mov	r14, r24
     6e6:	f1 2c       	mov	r15, r1
     6e8:	c7 01       	movw	r24, r14
     6ea:	8c 23       	and	r24, r28
     6ec:	9d 23       	and	r25, r29
     6ee:	89 2b       	or	r24, r25
     6f0:	19 f0       	breq	.+6      	; 0x6f8 <write_byte+0x2e>
			write_1();
     6f2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <write_1>
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <write_byte+0x32>
			else
			write_0();
     6f8:	0e 94 4c 03 	call	0x698	; 0x698 <write_0>

void write_byte(uint8_t data)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		for(uint16_t i=1;i<=128;i*=2){
     6fc:	cc 0f       	add	r28, r28
     6fe:	dd 1f       	adc	r29, r29
     700:	01 50       	subi	r16, 0x01	; 1
     702:	11 09       	sbc	r17, r1
     704:	89 f7       	brne	.-30     	; 0x6e8 <write_byte+0x1e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     706:	df be       	out	0x3f, r13	; 63
			write_1();
			else
			write_0();
		}
	}
}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	df 90       	pop	r13
     716:	08 95       	ret

00000718 <usart_0_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		buffer_read_bytes(port->rx_buffer, data, length);
	}
}
     718:	a0 e0       	ldi	r26, 0x00	; 0
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	aa 1f       	adc	r26, r26
     722:	bb 1f       	adc	r27, r27
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	aa 1f       	adc	r26, r26
     72a:	bb 1f       	adc	r27, r27
     72c:	9c 01       	movw	r18, r24
     72e:	ad 01       	movw	r20, r26
     730:	22 0f       	add	r18, r18
     732:	33 1f       	adc	r19, r19
     734:	44 1f       	adc	r20, r20
     736:	55 1f       	adc	r21, r21
     738:	22 0f       	add	r18, r18
     73a:	33 1f       	adc	r19, r19
     73c:	44 1f       	adc	r20, r20
     73e:	55 1f       	adc	r21, r21
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	74 e2       	ldi	r23, 0x24	; 36
     744:	84 ef       	ldi	r24, 0xF4	; 244
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__udivmodsi4>
     74c:	da 01       	movw	r26, r20
     74e:	c9 01       	movw	r24, r18
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	a1 09       	sbc	r26, r1
     754:	b1 09       	sbc	r27, r1
     756:	89 b9       	out	0x09, r24	; 9
     758:	89 2f       	mov	r24, r25
     75a:	9a 2f       	mov	r25, r26
     75c:	ab 2f       	mov	r26, r27
     75e:	bb 27       	eor	r27, r27
     760:	a7 fd       	sbrc	r26, 7
     762:	ba 95       	dec	r27
     764:	80 bd       	out	0x20, r24	; 32
     766:	1b b8       	out	0x0b, r1	; 11
     768:	88 ed       	ldi	r24, 0xD8	; 216
     76a:	8a b9       	out	0x0a, r24	; 10
     76c:	86 e0       	ldi	r24, 0x06	; 6
     76e:	80 bd       	out	0x20, r24	; 32
     770:	08 95       	ret

00000772 <usart_1_init>:
     772:	a0 e0       	ldi	r26, 0x00	; 0
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	88 0f       	add	r24, r24
     778:	99 1f       	adc	r25, r25
     77a:	aa 1f       	adc	r26, r26
     77c:	bb 1f       	adc	r27, r27
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	aa 1f       	adc	r26, r26
     784:	bb 1f       	adc	r27, r27
     786:	9c 01       	movw	r18, r24
     788:	ad 01       	movw	r20, r26
     78a:	22 0f       	add	r18, r18
     78c:	33 1f       	adc	r19, r19
     78e:	44 1f       	adc	r20, r20
     790:	55 1f       	adc	r21, r21
     792:	22 0f       	add	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	44 1f       	adc	r20, r20
     798:	55 1f       	adc	r21, r21
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	74 e2       	ldi	r23, 0x24	; 36
     79e:	84 ef       	ldi	r24, 0xF4	; 244
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__udivmodsi4>
     7a6:	21 50       	subi	r18, 0x01	; 1
     7a8:	31 09       	sbc	r19, r1
     7aa:	20 b9       	out	0x00, r18	; 0
     7ac:	3c bf       	out	0x3c, r19	; 60
     7ae:	12 b8       	out	0x02, r1	; 2
     7b0:	88 ed       	ldi	r24, 0xD8	; 216
     7b2:	81 b9       	out	0x01, r24	; 1
     7b4:	86 e0       	ldi	r24, 0x06	; 6
     7b6:	8c bf       	out	0x3c, r24	; 60
     7b8:	08 95       	ret

000007ba <usart_1_ensure_write>:
     7ba:	cf 93       	push	r28
     7bc:	cf b7       	in	r28, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usarts+0xe>
     7c4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <usarts+0xf>
     7c8:	0e 94 b1 00 	call	0x162	; 0x162 <buffer_is_empty>
     7cc:	81 11       	cpse	r24, r1
     7ce:	0b c0       	rjmp	.+22     	; 0x7e6 <usart_1_ensure_write+0x2c>
     7d0:	15 9b       	sbis	0x02, 5	; 2
     7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <usart_1_ensure_write+0x28>
     7d4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usarts+0xe>
     7d8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <usarts+0xf>
     7dc:	0e 94 a0 00 	call	0x140	; 0x140 <buffer_read>
     7e0:	83 b9       	out	0x03, r24	; 3
     7e2:	cf bf       	out	0x3f, r28	; 63
     7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <usart_1_ensure_write+0x2e>
     7e6:	cf bf       	out	0x3f, r28	; 63
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <usart_0_ensure_write>:
     7ec:	cf 93       	push	r28
     7ee:	cf b7       	in	r28, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <usarts+0x4>
     7f6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usarts+0x5>
     7fa:	0e 94 b1 00 	call	0x162	; 0x162 <buffer_is_empty>
     7fe:	81 11       	cpse	r24, r1
     800:	0b c0       	rjmp	.+22     	; 0x818 <usart_0_ensure_write+0x2c>
     802:	5d 9b       	sbis	0x0b, 5	; 11
     804:	07 c0       	rjmp	.+14     	; 0x814 <usart_0_ensure_write+0x28>
     806:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <usarts+0x4>
     80a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usarts+0x5>
     80e:	0e 94 a0 00 	call	0x140	; 0x140 <buffer_read>
     812:	8c b9       	out	0x0c, r24	; 12
     814:	cf bf       	out	0x3f, r28	; 63
     816:	01 c0       	rjmp	.+2      	; 0x81a <usart_0_ensure_write+0x2e>
     818:	cf bf       	out	0x3f, r28	; 63
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <usart_create>:
     81e:	9f 92       	push	r9
     820:	af 92       	push	r10
     822:	bf 92       	push	r11
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	98 2e       	mov	r9, r24
     836:	6b 01       	movw	r12, r22
     838:	7a 01       	movw	r14, r20
     83a:	21 e0       	ldi	r18, 0x01	; 1
     83c:	28 17       	cp	r18, r24
     83e:	10 f4       	brcc	.+4      	; 0x844 <usart_create+0x26>
     840:	0e 94 cb 07 	call	0xf96	; 0xf96 <abort>
     844:	08 2f       	mov	r16, r24
     846:	10 e0       	ldi	r17, 0x00	; 0
     848:	58 01       	movw	r10, r16
     84a:	aa 0c       	add	r10, r10
     84c:	bb 1c       	adc	r11, r11
     84e:	c8 01       	movw	r24, r16
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	88 0f       	add	r24, r24
     856:	99 1f       	adc	r25, r25
     858:	88 0f       	add	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	8a 0d       	add	r24, r10
     85e:	9b 1d       	adc	r25, r11
     860:	fc 01       	movw	r30, r24
     862:	ea 5f       	subi	r30, 0xFA	; 250
     864:	fe 4f       	sbci	r31, 0xFE	; 254
     866:	5f 01       	movw	r10, r30
     868:	80 81       	ld	r24, Z
     86a:	81 11       	cpse	r24, r1
     86c:	0e 94 cb 07 	call	0xf96	; 0xf96 <abort>
     870:	ca 01       	movw	r24, r20
     872:	0e 94 57 00 	call	0xae	; 0xae <buffer_create>
     876:	e8 01       	movw	r28, r16
     878:	cc 0f       	add	r28, r28
     87a:	dd 1f       	adc	r29, r29
     87c:	00 0f       	add	r16, r16
     87e:	11 1f       	adc	r17, r17
     880:	00 0f       	add	r16, r16
     882:	11 1f       	adc	r17, r17
     884:	00 0f       	add	r16, r16
     886:	11 1f       	adc	r17, r17
     888:	c0 0f       	add	r28, r16
     88a:	d1 1f       	adc	r29, r17
     88c:	ca 5f       	subi	r28, 0xFA	; 250
     88e:	de 4f       	sbci	r29, 0xFE	; 254
     890:	9b 83       	std	Y+3, r25	; 0x03
     892:	8a 83       	std	Y+2, r24	; 0x02
     894:	c7 01       	movw	r24, r14
     896:	0e 94 57 00 	call	0xae	; 0xae <buffer_create>
     89a:	9d 83       	std	Y+5, r25	; 0x05
     89c:	8c 83       	std	Y+4, r24	; 0x04
     89e:	99 82       	std	Y+1, r9	; 0x01
     8a0:	ee 81       	ldd	r30, Y+6	; 0x06
     8a2:	ff 81       	ldd	r31, Y+7	; 0x07
     8a4:	c6 01       	movw	r24, r12
     8a6:	09 95       	icall
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	88 83       	st	Y, r24
     8ac:	c5 01       	movw	r24, r10
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	df 90       	pop	r13
     8bc:	cf 90       	pop	r12
     8be:	bf 90       	pop	r11
     8c0:	af 90       	pop	r10
     8c2:	9f 90       	pop	r9
     8c4:	08 95       	ret

000008c6 <usart_write>:
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	ec 01       	movw	r28, r24
     8ce:	41 15       	cp	r20, r1
     8d0:	51 05       	cpc	r21, r1
     8d2:	11 f4       	brne	.+4      	; 0x8d8 <usart_write+0x12>
     8d4:	0e 94 cb 07 	call	0xf96	; 0xf96 <abort>
     8d8:	1f b7       	in	r17, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	8c 81       	ldd	r24, Y+4	; 0x04
     8de:	9d 81       	ldd	r25, Y+5	; 0x05
     8e0:	0e 94 84 00 	call	0x108	; 0x108 <buffer_write_bytes>
     8e4:	1f bf       	out	0x3f, r17	; 63
     8e6:	e8 85       	ldd	r30, Y+8	; 0x08
     8e8:	f9 85       	ldd	r31, Y+9	; 0x09
     8ea:	09 95       	icall
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	08 95       	ret

000008f4 <__vector_20>:
			UDR1 = buffer_read(USART_1->tx_buffer);
		}
	}
}

ISR(USART1_RXC_vect){
     8f4:	1f 92       	push	r1
     8f6:	0f 92       	push	r0
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	0f 92       	push	r0
     8fc:	11 24       	eor	r1, r1
     8fe:	2f 93       	push	r18
     900:	3f 93       	push	r19
     902:	4f 93       	push	r20
     904:	5f 93       	push	r21
     906:	6f 93       	push	r22
     908:	7f 93       	push	r23
     90a:	8f 93       	push	r24
     90c:	9f 93       	push	r25
     90e:	af 93       	push	r26
     910:	bf 93       	push	r27
     912:	ef 93       	push	r30
     914:	ff 93       	push	r31
	buffer_write(USART_1->rx_buffer, UDR1);
     916:	63 b1       	in	r22, 0x03	; 3
     918:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <usarts+0xc>
     91c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <usarts+0xd>
     920:	0e 94 72 00 	call	0xe4	; 0xe4 <buffer_write>
}
     924:	ff 91       	pop	r31
     926:	ef 91       	pop	r30
     928:	bf 91       	pop	r27
     92a:	af 91       	pop	r26
     92c:	9f 91       	pop	r25
     92e:	8f 91       	pop	r24
     930:	7f 91       	pop	r23
     932:	6f 91       	pop	r22
     934:	5f 91       	pop	r21
     936:	4f 91       	pop	r20
     938:	3f 91       	pop	r19
     93a:	2f 91       	pop	r18
     93c:	0f 90       	pop	r0
     93e:	0f be       	out	0x3f, r0	; 63
     940:	0f 90       	pop	r0
     942:	1f 90       	pop	r1
     944:	18 95       	reti

00000946 <__vector_24>:

ISR(USART1_TXC_vect){
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	4f 93       	push	r20
     956:	5f 93       	push	r21
     958:	6f 93       	push	r22
     95a:	7f 93       	push	r23
     95c:	8f 93       	push	r24
     95e:	9f 93       	push	r25
     960:	af 93       	push	r26
     962:	bf 93       	push	r27
     964:	ef 93       	push	r30
     966:	ff 93       	push	r31
	if(!buffer_is_empty(USART_1->tx_buffer))
     968:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usarts+0xe>
     96c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <usarts+0xf>
     970:	0e 94 b1 00 	call	0x162	; 0x162 <buffer_is_empty>
     974:	81 11       	cpse	r24, r1
     976:	07 c0       	rjmp	.+14     	; 0x986 <__vector_24+0x40>
	{
		UDR1 = buffer_read(USART_1->tx_buffer);
     978:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <usarts+0xe>
     97c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <usarts+0xf>
     980:	0e 94 a0 00 	call	0x140	; 0x140 <buffer_read>
     984:	83 b9       	out	0x03, r24	; 3
	}
}
     986:	ff 91       	pop	r31
     988:	ef 91       	pop	r30
     98a:	bf 91       	pop	r27
     98c:	af 91       	pop	r26
     98e:	9f 91       	pop	r25
     990:	8f 91       	pop	r24
     992:	7f 91       	pop	r23
     994:	6f 91       	pop	r22
     996:	5f 91       	pop	r21
     998:	4f 91       	pop	r20
     99a:	3f 91       	pop	r19
     99c:	2f 91       	pop	r18
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	0f 90       	pop	r0
     9a4:	1f 90       	pop	r1
     9a6:	18 95       	reti

000009a8 <__vector_19>:

ISR(USART0_RXC_vect){
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	6f 93       	push	r22
     9bc:	7f 93       	push	r23
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
	buffer_write(USART_0->rx_buffer, UDR0);
     9ca:	6c b1       	in	r22, 0x0c	; 12
     9cc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <usarts+0x2>
     9d0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <usarts+0x3>
     9d4:	0e 94 72 00 	call	0xe4	; 0xe4 <buffer_write>
}
     9d8:	ff 91       	pop	r31
     9da:	ef 91       	pop	r30
     9dc:	bf 91       	pop	r27
     9de:	af 91       	pop	r26
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	7f 91       	pop	r23
     9e6:	6f 91       	pop	r22
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	0f 90       	pop	r0
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	0f 90       	pop	r0
     9f6:	1f 90       	pop	r1
     9f8:	18 95       	reti

000009fa <__vector_23>:

ISR(USART0_TXC_vect){
     9fa:	1f 92       	push	r1
     9fc:	0f 92       	push	r0
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	0f 92       	push	r0
     a02:	11 24       	eor	r1, r1
     a04:	2f 93       	push	r18
     a06:	3f 93       	push	r19
     a08:	4f 93       	push	r20
     a0a:	5f 93       	push	r21
     a0c:	6f 93       	push	r22
     a0e:	7f 93       	push	r23
     a10:	8f 93       	push	r24
     a12:	9f 93       	push	r25
     a14:	af 93       	push	r26
     a16:	bf 93       	push	r27
     a18:	ef 93       	push	r30
     a1a:	ff 93       	push	r31

	if(!buffer_is_empty(USART_0->tx_buffer))
     a1c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <usarts+0x4>
     a20:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usarts+0x5>
     a24:	0e 94 b1 00 	call	0x162	; 0x162 <buffer_is_empty>
     a28:	81 11       	cpse	r24, r1
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <__vector_23+0x40>
	{
		 UDR0 = buffer_read(USART_0->tx_buffer);
     a2c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <usarts+0x4>
     a30:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usarts+0x5>
     a34:	0e 94 a0 00 	call	0x140	; 0x140 <buffer_read>
     a38:	8c b9       	out	0x0c, r24	; 12
	}
}
     a3a:	ff 91       	pop	r31
     a3c:	ef 91       	pop	r30
     a3e:	bf 91       	pop	r27
     a40:	af 91       	pop	r26
     a42:	9f 91       	pop	r25
     a44:	8f 91       	pop	r24
     a46:	7f 91       	pop	r23
     a48:	6f 91       	pop	r22
     a4a:	5f 91       	pop	r21
     a4c:	4f 91       	pop	r20
     a4e:	3f 91       	pop	r19
     a50:	2f 91       	pop	r18
     a52:	0f 90       	pop	r0
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	0f 90       	pop	r0
     a58:	1f 90       	pop	r1
     a5a:	18 95       	reti

00000a5c <__fixunssfsi>:
     a5c:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_splitA>
     a60:	88 f0       	brcs	.+34     	; 0xa84 <__fixunssfsi+0x28>
     a62:	9f 57       	subi	r25, 0x7F	; 127
     a64:	98 f0       	brcs	.+38     	; 0xa8c <__fixunssfsi+0x30>
     a66:	b9 2f       	mov	r27, r25
     a68:	99 27       	eor	r25, r25
     a6a:	b7 51       	subi	r27, 0x17	; 23
     a6c:	b0 f0       	brcs	.+44     	; 0xa9a <__fixunssfsi+0x3e>
     a6e:	e1 f0       	breq	.+56     	; 0xaa8 <__fixunssfsi+0x4c>
     a70:	66 0f       	add	r22, r22
     a72:	77 1f       	adc	r23, r23
     a74:	88 1f       	adc	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	1a f0       	brmi	.+6      	; 0xa80 <__fixunssfsi+0x24>
     a7a:	ba 95       	dec	r27
     a7c:	c9 f7       	brne	.-14     	; 0xa70 <__fixunssfsi+0x14>
     a7e:	14 c0       	rjmp	.+40     	; 0xaa8 <__fixunssfsi+0x4c>
     a80:	b1 30       	cpi	r27, 0x01	; 1
     a82:	91 f0       	breq	.+36     	; 0xaa8 <__fixunssfsi+0x4c>
     a84:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_zero>
     a88:	b1 e0       	ldi	r27, 0x01	; 1
     a8a:	08 95       	ret
     a8c:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_zero>
     a90:	67 2f       	mov	r22, r23
     a92:	78 2f       	mov	r23, r24
     a94:	88 27       	eor	r24, r24
     a96:	b8 5f       	subi	r27, 0xF8	; 248
     a98:	39 f0       	breq	.+14     	; 0xaa8 <__fixunssfsi+0x4c>
     a9a:	b9 3f       	cpi	r27, 0xF9	; 249
     a9c:	cc f3       	brlt	.-14     	; 0xa90 <__fixunssfsi+0x34>
     a9e:	86 95       	lsr	r24
     aa0:	77 95       	ror	r23
     aa2:	67 95       	ror	r22
     aa4:	b3 95       	inc	r27
     aa6:	d9 f7       	brne	.-10     	; 0xa9e <__fixunssfsi+0x42>
     aa8:	3e f4       	brtc	.+14     	; 0xab8 <__fixunssfsi+0x5c>
     aaa:	90 95       	com	r25
     aac:	80 95       	com	r24
     aae:	70 95       	com	r23
     ab0:	61 95       	neg	r22
     ab2:	7f 4f       	sbci	r23, 0xFF	; 255
     ab4:	8f 4f       	sbci	r24, 0xFF	; 255
     ab6:	9f 4f       	sbci	r25, 0xFF	; 255
     ab8:	08 95       	ret

00000aba <__floatunsisf>:
     aba:	e8 94       	clt
     abc:	09 c0       	rjmp	.+18     	; 0xad0 <__floatsisf+0x12>

00000abe <__floatsisf>:
     abe:	97 fb       	bst	r25, 7
     ac0:	3e f4       	brtc	.+14     	; 0xad0 <__floatsisf+0x12>
     ac2:	90 95       	com	r25
     ac4:	80 95       	com	r24
     ac6:	70 95       	com	r23
     ac8:	61 95       	neg	r22
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
     acc:	8f 4f       	sbci	r24, 0xFF	; 255
     ace:	9f 4f       	sbci	r25, 0xFF	; 255
     ad0:	99 23       	and	r25, r25
     ad2:	a9 f0       	breq	.+42     	; 0xafe <__floatsisf+0x40>
     ad4:	f9 2f       	mov	r31, r25
     ad6:	96 e9       	ldi	r25, 0x96	; 150
     ad8:	bb 27       	eor	r27, r27
     ada:	93 95       	inc	r25
     adc:	f6 95       	lsr	r31
     ade:	87 95       	ror	r24
     ae0:	77 95       	ror	r23
     ae2:	67 95       	ror	r22
     ae4:	b7 95       	ror	r27
     ae6:	f1 11       	cpse	r31, r1
     ae8:	f8 cf       	rjmp	.-16     	; 0xada <__floatsisf+0x1c>
     aea:	fa f4       	brpl	.+62     	; 0xb2a <__floatsisf+0x6c>
     aec:	bb 0f       	add	r27, r27
     aee:	11 f4       	brne	.+4      	; 0xaf4 <__floatsisf+0x36>
     af0:	60 ff       	sbrs	r22, 0
     af2:	1b c0       	rjmp	.+54     	; 0xb2a <__floatsisf+0x6c>
     af4:	6f 5f       	subi	r22, 0xFF	; 255
     af6:	7f 4f       	sbci	r23, 0xFF	; 255
     af8:	8f 4f       	sbci	r24, 0xFF	; 255
     afa:	9f 4f       	sbci	r25, 0xFF	; 255
     afc:	16 c0       	rjmp	.+44     	; 0xb2a <__floatsisf+0x6c>
     afe:	88 23       	and	r24, r24
     b00:	11 f0       	breq	.+4      	; 0xb06 <__floatsisf+0x48>
     b02:	96 e9       	ldi	r25, 0x96	; 150
     b04:	11 c0       	rjmp	.+34     	; 0xb28 <__floatsisf+0x6a>
     b06:	77 23       	and	r23, r23
     b08:	21 f0       	breq	.+8      	; 0xb12 <__floatsisf+0x54>
     b0a:	9e e8       	ldi	r25, 0x8E	; 142
     b0c:	87 2f       	mov	r24, r23
     b0e:	76 2f       	mov	r23, r22
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__floatsisf+0x5e>
     b12:	66 23       	and	r22, r22
     b14:	71 f0       	breq	.+28     	; 0xb32 <__floatsisf+0x74>
     b16:	96 e8       	ldi	r25, 0x86	; 134
     b18:	86 2f       	mov	r24, r22
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	2a f0       	brmi	.+10     	; 0xb2a <__floatsisf+0x6c>
     b20:	9a 95       	dec	r25
     b22:	66 0f       	add	r22, r22
     b24:	77 1f       	adc	r23, r23
     b26:	88 1f       	adc	r24, r24
     b28:	da f7       	brpl	.-10     	; 0xb20 <__floatsisf+0x62>
     b2a:	88 0f       	add	r24, r24
     b2c:	96 95       	lsr	r25
     b2e:	87 95       	ror	r24
     b30:	97 f9       	bld	r25, 7
     b32:	08 95       	ret

00000b34 <__fp_split3>:
     b34:	57 fd       	sbrc	r21, 7
     b36:	90 58       	subi	r25, 0x80	; 128
     b38:	44 0f       	add	r20, r20
     b3a:	55 1f       	adc	r21, r21
     b3c:	59 f0       	breq	.+22     	; 0xb54 <__fp_splitA+0x10>
     b3e:	5f 3f       	cpi	r21, 0xFF	; 255
     b40:	71 f0       	breq	.+28     	; 0xb5e <__fp_splitA+0x1a>
     b42:	47 95       	ror	r20

00000b44 <__fp_splitA>:
     b44:	88 0f       	add	r24, r24
     b46:	97 fb       	bst	r25, 7
     b48:	99 1f       	adc	r25, r25
     b4a:	61 f0       	breq	.+24     	; 0xb64 <__fp_splitA+0x20>
     b4c:	9f 3f       	cpi	r25, 0xFF	; 255
     b4e:	79 f0       	breq	.+30     	; 0xb6e <__fp_splitA+0x2a>
     b50:	87 95       	ror	r24
     b52:	08 95       	ret
     b54:	12 16       	cp	r1, r18
     b56:	13 06       	cpc	r1, r19
     b58:	14 06       	cpc	r1, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	f2 cf       	rjmp	.-28     	; 0xb42 <__fp_split3+0xe>
     b5e:	46 95       	lsr	r20
     b60:	f1 df       	rcall	.-30     	; 0xb44 <__fp_splitA>
     b62:	08 c0       	rjmp	.+16     	; 0xb74 <__fp_splitA+0x30>
     b64:	16 16       	cp	r1, r22
     b66:	17 06       	cpc	r1, r23
     b68:	18 06       	cpc	r1, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	f1 cf       	rjmp	.-30     	; 0xb50 <__fp_splitA+0xc>
     b6e:	86 95       	lsr	r24
     b70:	71 05       	cpc	r23, r1
     b72:	61 05       	cpc	r22, r1
     b74:	08 94       	sec
     b76:	08 95       	ret

00000b78 <__fp_zero>:
     b78:	e8 94       	clt

00000b7a <__fp_szero>:
     b7a:	bb 27       	eor	r27, r27
     b7c:	66 27       	eor	r22, r22
     b7e:	77 27       	eor	r23, r23
     b80:	cb 01       	movw	r24, r22
     b82:	97 f9       	bld	r25, 7
     b84:	08 95       	ret

00000b86 <__mulsf3>:
     b86:	0e 94 d6 05 	call	0xbac	; 0xbac <__mulsf3x>
     b8a:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__fp_round>
     b8e:	0e 94 39 06 	call	0xc72	; 0xc72 <__fp_pscA>
     b92:	38 f0       	brcs	.+14     	; 0xba2 <__mulsf3+0x1c>
     b94:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_pscB>
     b98:	20 f0       	brcs	.+8      	; 0xba2 <__mulsf3+0x1c>
     b9a:	95 23       	and	r25, r21
     b9c:	11 f0       	breq	.+4      	; 0xba2 <__mulsf3+0x1c>
     b9e:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_inf>
     ba2:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__fp_nan>
     ba6:	11 24       	eor	r1, r1
     ba8:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__fp_szero>

00000bac <__mulsf3x>:
     bac:	0e 94 9a 05 	call	0xb34	; 0xb34 <__fp_split3>
     bb0:	70 f3       	brcs	.-36     	; 0xb8e <__mulsf3+0x8>

00000bb2 <__mulsf3_pse>:
     bb2:	95 9f       	mul	r25, r21
     bb4:	c1 f3       	breq	.-16     	; 0xba6 <__mulsf3+0x20>
     bb6:	95 0f       	add	r25, r21
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	55 1f       	adc	r21, r21
     bbc:	62 9f       	mul	r22, r18
     bbe:	f0 01       	movw	r30, r0
     bc0:	72 9f       	mul	r23, r18
     bc2:	bb 27       	eor	r27, r27
     bc4:	f0 0d       	add	r31, r0
     bc6:	b1 1d       	adc	r27, r1
     bc8:	63 9f       	mul	r22, r19
     bca:	aa 27       	eor	r26, r26
     bcc:	f0 0d       	add	r31, r0
     bce:	b1 1d       	adc	r27, r1
     bd0:	aa 1f       	adc	r26, r26
     bd2:	64 9f       	mul	r22, r20
     bd4:	66 27       	eor	r22, r22
     bd6:	b0 0d       	add	r27, r0
     bd8:	a1 1d       	adc	r26, r1
     bda:	66 1f       	adc	r22, r22
     bdc:	82 9f       	mul	r24, r18
     bde:	22 27       	eor	r18, r18
     be0:	b0 0d       	add	r27, r0
     be2:	a1 1d       	adc	r26, r1
     be4:	62 1f       	adc	r22, r18
     be6:	73 9f       	mul	r23, r19
     be8:	b0 0d       	add	r27, r0
     bea:	a1 1d       	adc	r26, r1
     bec:	62 1f       	adc	r22, r18
     bee:	83 9f       	mul	r24, r19
     bf0:	a0 0d       	add	r26, r0
     bf2:	61 1d       	adc	r22, r1
     bf4:	22 1f       	adc	r18, r18
     bf6:	74 9f       	mul	r23, r20
     bf8:	33 27       	eor	r19, r19
     bfa:	a0 0d       	add	r26, r0
     bfc:	61 1d       	adc	r22, r1
     bfe:	23 1f       	adc	r18, r19
     c00:	84 9f       	mul	r24, r20
     c02:	60 0d       	add	r22, r0
     c04:	21 1d       	adc	r18, r1
     c06:	82 2f       	mov	r24, r18
     c08:	76 2f       	mov	r23, r22
     c0a:	6a 2f       	mov	r22, r26
     c0c:	11 24       	eor	r1, r1
     c0e:	9f 57       	subi	r25, 0x7F	; 127
     c10:	50 40       	sbci	r21, 0x00	; 0
     c12:	9a f0       	brmi	.+38     	; 0xc3a <__mulsf3_pse+0x88>
     c14:	f1 f0       	breq	.+60     	; 0xc52 <__mulsf3_pse+0xa0>
     c16:	88 23       	and	r24, r24
     c18:	4a f0       	brmi	.+18     	; 0xc2c <__mulsf3_pse+0x7a>
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	bb 1f       	adc	r27, r27
     c20:	66 1f       	adc	r22, r22
     c22:	77 1f       	adc	r23, r23
     c24:	88 1f       	adc	r24, r24
     c26:	91 50       	subi	r25, 0x01	; 1
     c28:	50 40       	sbci	r21, 0x00	; 0
     c2a:	a9 f7       	brne	.-22     	; 0xc16 <__mulsf3_pse+0x64>
     c2c:	9e 3f       	cpi	r25, 0xFE	; 254
     c2e:	51 05       	cpc	r21, r1
     c30:	80 f0       	brcs	.+32     	; 0xc52 <__mulsf3_pse+0xa0>
     c32:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_inf>
     c36:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__fp_szero>
     c3a:	5f 3f       	cpi	r21, 0xFF	; 255
     c3c:	e4 f3       	brlt	.-8      	; 0xc36 <__mulsf3_pse+0x84>
     c3e:	98 3e       	cpi	r25, 0xE8	; 232
     c40:	d4 f3       	brlt	.-12     	; 0xc36 <__mulsf3_pse+0x84>
     c42:	86 95       	lsr	r24
     c44:	77 95       	ror	r23
     c46:	67 95       	ror	r22
     c48:	b7 95       	ror	r27
     c4a:	f7 95       	ror	r31
     c4c:	e7 95       	ror	r30
     c4e:	9f 5f       	subi	r25, 0xFF	; 255
     c50:	c1 f7       	brne	.-16     	; 0xc42 <__mulsf3_pse+0x90>
     c52:	fe 2b       	or	r31, r30
     c54:	88 0f       	add	r24, r24
     c56:	91 1d       	adc	r25, r1
     c58:	96 95       	lsr	r25
     c5a:	87 95       	ror	r24
     c5c:	97 f9       	bld	r25, 7
     c5e:	08 95       	ret

00000c60 <__fp_inf>:
     c60:	97 f9       	bld	r25, 7
     c62:	9f 67       	ori	r25, 0x7F	; 127
     c64:	80 e8       	ldi	r24, 0x80	; 128
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	08 95       	ret

00000c6c <__fp_nan>:
     c6c:	9f ef       	ldi	r25, 0xFF	; 255
     c6e:	80 ec       	ldi	r24, 0xC0	; 192
     c70:	08 95       	ret

00000c72 <__fp_pscA>:
     c72:	00 24       	eor	r0, r0
     c74:	0a 94       	dec	r0
     c76:	16 16       	cp	r1, r22
     c78:	17 06       	cpc	r1, r23
     c7a:	18 06       	cpc	r1, r24
     c7c:	09 06       	cpc	r0, r25
     c7e:	08 95       	ret

00000c80 <__fp_pscB>:
     c80:	00 24       	eor	r0, r0
     c82:	0a 94       	dec	r0
     c84:	12 16       	cp	r1, r18
     c86:	13 06       	cpc	r1, r19
     c88:	14 06       	cpc	r1, r20
     c8a:	05 06       	cpc	r0, r21
     c8c:	08 95       	ret

00000c8e <__fp_round>:
     c8e:	09 2e       	mov	r0, r25
     c90:	03 94       	inc	r0
     c92:	00 0c       	add	r0, r0
     c94:	11 f4       	brne	.+4      	; 0xc9a <__fp_round+0xc>
     c96:	88 23       	and	r24, r24
     c98:	52 f0       	brmi	.+20     	; 0xcae <__fp_round+0x20>
     c9a:	bb 0f       	add	r27, r27
     c9c:	40 f4       	brcc	.+16     	; 0xcae <__fp_round+0x20>
     c9e:	bf 2b       	or	r27, r31
     ca0:	11 f4       	brne	.+4      	; 0xca6 <__fp_round+0x18>
     ca2:	60 ff       	sbrs	r22, 0
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <__fp_round+0x20>
     ca6:	6f 5f       	subi	r22, 0xFF	; 255
     ca8:	7f 4f       	sbci	r23, 0xFF	; 255
     caa:	8f 4f       	sbci	r24, 0xFF	; 255
     cac:	9f 4f       	sbci	r25, 0xFF	; 255
     cae:	08 95       	ret

00000cb0 <__udivmodhi4>:
     cb0:	aa 1b       	sub	r26, r26
     cb2:	bb 1b       	sub	r27, r27
     cb4:	51 e1       	ldi	r21, 0x11	; 17
     cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <__udivmodhi4_ep>

00000cb8 <__udivmodhi4_loop>:
     cb8:	aa 1f       	adc	r26, r26
     cba:	bb 1f       	adc	r27, r27
     cbc:	a6 17       	cp	r26, r22
     cbe:	b7 07       	cpc	r27, r23
     cc0:	10 f0       	brcs	.+4      	; 0xcc6 <__udivmodhi4_ep>
     cc2:	a6 1b       	sub	r26, r22
     cc4:	b7 0b       	sbc	r27, r23

00000cc6 <__udivmodhi4_ep>:
     cc6:	88 1f       	adc	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	5a 95       	dec	r21
     ccc:	a9 f7       	brne	.-22     	; 0xcb8 <__udivmodhi4_loop>
     cce:	80 95       	com	r24
     cd0:	90 95       	com	r25
     cd2:	bc 01       	movw	r22, r24
     cd4:	cd 01       	movw	r24, r26
     cd6:	08 95       	ret

00000cd8 <__udivmodsi4>:
     cd8:	a1 e2       	ldi	r26, 0x21	; 33
     cda:	1a 2e       	mov	r1, r26
     cdc:	aa 1b       	sub	r26, r26
     cde:	bb 1b       	sub	r27, r27
     ce0:	fd 01       	movw	r30, r26
     ce2:	0d c0       	rjmp	.+26     	; 0xcfe <__udivmodsi4_ep>

00000ce4 <__udivmodsi4_loop>:
     ce4:	aa 1f       	adc	r26, r26
     ce6:	bb 1f       	adc	r27, r27
     ce8:	ee 1f       	adc	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	a2 17       	cp	r26, r18
     cee:	b3 07       	cpc	r27, r19
     cf0:	e4 07       	cpc	r30, r20
     cf2:	f5 07       	cpc	r31, r21
     cf4:	20 f0       	brcs	.+8      	; 0xcfe <__udivmodsi4_ep>
     cf6:	a2 1b       	sub	r26, r18
     cf8:	b3 0b       	sbc	r27, r19
     cfa:	e4 0b       	sbc	r30, r20
     cfc:	f5 0b       	sbc	r31, r21

00000cfe <__udivmodsi4_ep>:
     cfe:	66 1f       	adc	r22, r22
     d00:	77 1f       	adc	r23, r23
     d02:	88 1f       	adc	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	1a 94       	dec	r1
     d08:	69 f7       	brne	.-38     	; 0xce4 <__udivmodsi4_loop>
     d0a:	60 95       	com	r22
     d0c:	70 95       	com	r23
     d0e:	80 95       	com	r24
     d10:	90 95       	com	r25
     d12:	9b 01       	movw	r18, r22
     d14:	ac 01       	movw	r20, r24
     d16:	bd 01       	movw	r22, r26
     d18:	cf 01       	movw	r24, r30
     d1a:	08 95       	ret

00000d1c <calloc>:
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	86 9f       	mul	r24, r22
     d26:	80 01       	movw	r16, r0
     d28:	87 9f       	mul	r24, r23
     d2a:	10 0d       	add	r17, r0
     d2c:	96 9f       	mul	r25, r22
     d2e:	10 0d       	add	r17, r0
     d30:	11 24       	eor	r1, r1
     d32:	c8 01       	movw	r24, r16
     d34:	0e 94 aa 06 	call	0xd54	; 0xd54 <malloc>
     d38:	ec 01       	movw	r28, r24
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	29 f0       	breq	.+10     	; 0xd48 <calloc+0x2c>
     d3e:	a8 01       	movw	r20, r16
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <memset>
     d48:	ce 01       	movw	r24, r28
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	08 95       	ret

00000d54 <malloc>:
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	82 30       	cpi	r24, 0x02	; 2
     d5e:	91 05       	cpc	r25, r1
     d60:	10 f4       	brcc	.+4      	; 0xd66 <malloc+0x12>
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <__flp>
     d6a:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <__flp+0x1>
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	a0 e0       	ldi	r26, 0x00	; 0
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	30 97       	sbiw	r30, 0x00	; 0
     d78:	19 f1       	breq	.+70     	; 0xdc0 <malloc+0x6c>
     d7a:	40 81       	ld	r20, Z
     d7c:	51 81       	ldd	r21, Z+1	; 0x01
     d7e:	02 81       	ldd	r16, Z+2	; 0x02
     d80:	13 81       	ldd	r17, Z+3	; 0x03
     d82:	48 17       	cp	r20, r24
     d84:	59 07       	cpc	r21, r25
     d86:	c8 f0       	brcs	.+50     	; 0xdba <malloc+0x66>
     d88:	84 17       	cp	r24, r20
     d8a:	95 07       	cpc	r25, r21
     d8c:	69 f4       	brne	.+26     	; 0xda8 <malloc+0x54>
     d8e:	10 97       	sbiw	r26, 0x00	; 0
     d90:	31 f0       	breq	.+12     	; 0xd9e <malloc+0x4a>
     d92:	12 96       	adiw	r26, 0x02	; 2
     d94:	0c 93       	st	X, r16
     d96:	12 97       	sbiw	r26, 0x02	; 2
     d98:	13 96       	adiw	r26, 0x03	; 3
     d9a:	1c 93       	st	X, r17
     d9c:	27 c0       	rjmp	.+78     	; 0xdec <malloc+0x98>
     d9e:	00 93 61 01 	sts	0x0161, r16	; 0x800161 <__flp>
     da2:	10 93 62 01 	sts	0x0162, r17	; 0x800162 <__flp+0x1>
     da6:	22 c0       	rjmp	.+68     	; 0xdec <malloc+0x98>
     da8:	21 15       	cp	r18, r1
     daa:	31 05       	cpc	r19, r1
     dac:	19 f0       	breq	.+6      	; 0xdb4 <malloc+0x60>
     dae:	42 17       	cp	r20, r18
     db0:	53 07       	cpc	r21, r19
     db2:	18 f4       	brcc	.+6      	; 0xdba <malloc+0x66>
     db4:	9a 01       	movw	r18, r20
     db6:	bd 01       	movw	r22, r26
     db8:	ef 01       	movw	r28, r30
     dba:	df 01       	movw	r26, r30
     dbc:	f8 01       	movw	r30, r16
     dbe:	db cf       	rjmp	.-74     	; 0xd76 <malloc+0x22>
     dc0:	21 15       	cp	r18, r1
     dc2:	31 05       	cpc	r19, r1
     dc4:	f9 f0       	breq	.+62     	; 0xe04 <malloc+0xb0>
     dc6:	28 1b       	sub	r18, r24
     dc8:	39 0b       	sbc	r19, r25
     dca:	24 30       	cpi	r18, 0x04	; 4
     dcc:	31 05       	cpc	r19, r1
     dce:	80 f4       	brcc	.+32     	; 0xdf0 <malloc+0x9c>
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	9b 81       	ldd	r25, Y+3	; 0x03
     dd4:	61 15       	cp	r22, r1
     dd6:	71 05       	cpc	r23, r1
     dd8:	21 f0       	breq	.+8      	; 0xde2 <malloc+0x8e>
     dda:	fb 01       	movw	r30, r22
     ddc:	93 83       	std	Z+3, r25	; 0x03
     dde:	82 83       	std	Z+2, r24	; 0x02
     de0:	04 c0       	rjmp	.+8      	; 0xdea <malloc+0x96>
     de2:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__flp+0x1>
     de6:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__flp>
     dea:	fe 01       	movw	r30, r28
     dec:	32 96       	adiw	r30, 0x02	; 2
     dee:	44 c0       	rjmp	.+136    	; 0xe78 <malloc+0x124>
     df0:	fe 01       	movw	r30, r28
     df2:	e2 0f       	add	r30, r18
     df4:	f3 1f       	adc	r31, r19
     df6:	81 93       	st	Z+, r24
     df8:	91 93       	st	Z+, r25
     dfa:	22 50       	subi	r18, 0x02	; 2
     dfc:	31 09       	sbc	r19, r1
     dfe:	39 83       	std	Y+1, r19	; 0x01
     e00:	28 83       	st	Y, r18
     e02:	3a c0       	rjmp	.+116    	; 0xe78 <malloc+0x124>
     e04:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <__brkval>
     e08:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <__brkval+0x1>
     e0c:	23 2b       	or	r18, r19
     e0e:	41 f4       	brne	.+16     	; 0xe20 <malloc+0xcc>
     e10:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     e14:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     e18:	30 93 60 01 	sts	0x0160, r19	; 0x800160 <__brkval+0x1>
     e1c:	20 93 5f 01 	sts	0x015F, r18	; 0x80015f <__brkval>
     e20:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     e24:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     e28:	21 15       	cp	r18, r1
     e2a:	31 05       	cpc	r19, r1
     e2c:	41 f4       	brne	.+16     	; 0xe3e <malloc+0xea>
     e2e:	2d b7       	in	r18, 0x3d	; 61
     e30:	3e b7       	in	r19, 0x3e	; 62
     e32:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     e36:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     e3a:	24 1b       	sub	r18, r20
     e3c:	35 0b       	sbc	r19, r21
     e3e:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <__brkval>
     e42:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <__brkval+0x1>
     e46:	e2 17       	cp	r30, r18
     e48:	f3 07       	cpc	r31, r19
     e4a:	a0 f4       	brcc	.+40     	; 0xe74 <malloc+0x120>
     e4c:	2e 1b       	sub	r18, r30
     e4e:	3f 0b       	sbc	r19, r31
     e50:	28 17       	cp	r18, r24
     e52:	39 07       	cpc	r19, r25
     e54:	78 f0       	brcs	.+30     	; 0xe74 <malloc+0x120>
     e56:	ac 01       	movw	r20, r24
     e58:	4e 5f       	subi	r20, 0xFE	; 254
     e5a:	5f 4f       	sbci	r21, 0xFF	; 255
     e5c:	24 17       	cp	r18, r20
     e5e:	35 07       	cpc	r19, r21
     e60:	48 f0       	brcs	.+18     	; 0xe74 <malloc+0x120>
     e62:	4e 0f       	add	r20, r30
     e64:	5f 1f       	adc	r21, r31
     e66:	50 93 60 01 	sts	0x0160, r21	; 0x800160 <__brkval+0x1>
     e6a:	40 93 5f 01 	sts	0x015F, r20	; 0x80015f <__brkval>
     e6e:	81 93       	st	Z+, r24
     e70:	91 93       	st	Z+, r25
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <malloc+0x124>
     e74:	e0 e0       	ldi	r30, 0x00	; 0
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	cf 01       	movw	r24, r30
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <free>:
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	09 f4       	brne	.+2      	; 0xe8e <free+0xa>
     e8c:	81 c0       	rjmp	.+258    	; 0xf90 <free+0x10c>
     e8e:	fc 01       	movw	r30, r24
     e90:	32 97       	sbiw	r30, 0x02	; 2
     e92:	13 82       	std	Z+3, r1	; 0x03
     e94:	12 82       	std	Z+2, r1	; 0x02
     e96:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <__flp>
     e9a:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <__flp+0x1>
     e9e:	10 97       	sbiw	r26, 0x00	; 0
     ea0:	81 f4       	brne	.+32     	; 0xec2 <free+0x3e>
     ea2:	20 81       	ld	r18, Z
     ea4:	31 81       	ldd	r19, Z+1	; 0x01
     ea6:	82 0f       	add	r24, r18
     ea8:	93 1f       	adc	r25, r19
     eaa:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <__brkval>
     eae:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <__brkval+0x1>
     eb2:	28 17       	cp	r18, r24
     eb4:	39 07       	cpc	r19, r25
     eb6:	51 f5       	brne	.+84     	; 0xf0c <free+0x88>
     eb8:	f0 93 60 01 	sts	0x0160, r31	; 0x800160 <__brkval+0x1>
     ebc:	e0 93 5f 01 	sts	0x015F, r30	; 0x80015f <__brkval>
     ec0:	67 c0       	rjmp	.+206    	; 0xf90 <free+0x10c>
     ec2:	ed 01       	movw	r28, r26
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	ce 17       	cp	r28, r30
     eca:	df 07       	cpc	r29, r31
     ecc:	40 f4       	brcc	.+16     	; 0xede <free+0x5a>
     ece:	4a 81       	ldd	r20, Y+2	; 0x02
     ed0:	5b 81       	ldd	r21, Y+3	; 0x03
     ed2:	9e 01       	movw	r18, r28
     ed4:	41 15       	cp	r20, r1
     ed6:	51 05       	cpc	r21, r1
     ed8:	f1 f0       	breq	.+60     	; 0xf16 <free+0x92>
     eda:	ea 01       	movw	r28, r20
     edc:	f5 cf       	rjmp	.-22     	; 0xec8 <free+0x44>
     ede:	d3 83       	std	Z+3, r29	; 0x03
     ee0:	c2 83       	std	Z+2, r28	; 0x02
     ee2:	40 81       	ld	r20, Z
     ee4:	51 81       	ldd	r21, Z+1	; 0x01
     ee6:	84 0f       	add	r24, r20
     ee8:	95 1f       	adc	r25, r21
     eea:	c8 17       	cp	r28, r24
     eec:	d9 07       	cpc	r29, r25
     eee:	59 f4       	brne	.+22     	; 0xf06 <free+0x82>
     ef0:	88 81       	ld	r24, Y
     ef2:	99 81       	ldd	r25, Y+1	; 0x01
     ef4:	84 0f       	add	r24, r20
     ef6:	95 1f       	adc	r25, r21
     ef8:	02 96       	adiw	r24, 0x02	; 2
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	9b 81       	ldd	r25, Y+3	; 0x03
     f02:	93 83       	std	Z+3, r25	; 0x03
     f04:	82 83       	std	Z+2, r24	; 0x02
     f06:	21 15       	cp	r18, r1
     f08:	31 05       	cpc	r19, r1
     f0a:	29 f4       	brne	.+10     	; 0xf16 <free+0x92>
     f0c:	f0 93 62 01 	sts	0x0162, r31	; 0x800162 <__flp+0x1>
     f10:	e0 93 61 01 	sts	0x0161, r30	; 0x800161 <__flp>
     f14:	3d c0       	rjmp	.+122    	; 0xf90 <free+0x10c>
     f16:	e9 01       	movw	r28, r18
     f18:	fb 83       	std	Y+3, r31	; 0x03
     f1a:	ea 83       	std	Y+2, r30	; 0x02
     f1c:	49 91       	ld	r20, Y+
     f1e:	59 91       	ld	r21, Y+
     f20:	c4 0f       	add	r28, r20
     f22:	d5 1f       	adc	r29, r21
     f24:	ec 17       	cp	r30, r28
     f26:	fd 07       	cpc	r31, r29
     f28:	61 f4       	brne	.+24     	; 0xf42 <free+0xbe>
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	84 0f       	add	r24, r20
     f30:	95 1f       	adc	r25, r21
     f32:	02 96       	adiw	r24, 0x02	; 2
     f34:	e9 01       	movw	r28, r18
     f36:	99 83       	std	Y+1, r25	; 0x01
     f38:	88 83       	st	Y, r24
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	93 81       	ldd	r25, Z+3	; 0x03
     f3e:	9b 83       	std	Y+3, r25	; 0x03
     f40:	8a 83       	std	Y+2, r24	; 0x02
     f42:	e0 e0       	ldi	r30, 0x00	; 0
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	12 96       	adiw	r26, 0x02	; 2
     f48:	8d 91       	ld	r24, X+
     f4a:	9c 91       	ld	r25, X
     f4c:	13 97       	sbiw	r26, 0x03	; 3
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	19 f0       	breq	.+6      	; 0xf58 <free+0xd4>
     f52:	fd 01       	movw	r30, r26
     f54:	dc 01       	movw	r26, r24
     f56:	f7 cf       	rjmp	.-18     	; 0xf46 <free+0xc2>
     f58:	8d 91       	ld	r24, X+
     f5a:	9c 91       	ld	r25, X
     f5c:	11 97       	sbiw	r26, 0x01	; 1
     f5e:	9d 01       	movw	r18, r26
     f60:	2e 5f       	subi	r18, 0xFE	; 254
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
     f64:	82 0f       	add	r24, r18
     f66:	93 1f       	adc	r25, r19
     f68:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <__brkval>
     f6c:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <__brkval+0x1>
     f70:	28 17       	cp	r18, r24
     f72:	39 07       	cpc	r19, r25
     f74:	69 f4       	brne	.+26     	; 0xf90 <free+0x10c>
     f76:	30 97       	sbiw	r30, 0x00	; 0
     f78:	29 f4       	brne	.+10     	; 0xf84 <free+0x100>
     f7a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__flp+0x1>
     f7e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <__flp>
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <free+0x104>
     f84:	13 82       	std	Z+3, r1	; 0x03
     f86:	12 82       	std	Z+2, r1	; 0x02
     f88:	b0 93 60 01 	sts	0x0160, r27	; 0x800160 <__brkval+0x1>
     f8c:	a0 93 5f 01 	sts	0x015F, r26	; 0x80015f <__brkval>
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <abort>:
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	f8 94       	cli
     f9c:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <_exit>

00000fa0 <memcpy>:
     fa0:	fb 01       	movw	r30, r22
     fa2:	dc 01       	movw	r26, r24
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <memcpy+0xa>
     fa6:	01 90       	ld	r0, Z+
     fa8:	0d 92       	st	X+, r0
     faa:	41 50       	subi	r20, 0x01	; 1
     fac:	50 40       	sbci	r21, 0x00	; 0
     fae:	d8 f7       	brcc	.-10     	; 0xfa6 <memcpy+0x6>
     fb0:	08 95       	ret

00000fb2 <memset>:
     fb2:	dc 01       	movw	r26, r24
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <memset+0x6>
     fb6:	6d 93       	st	X+, r22
     fb8:	41 50       	subi	r20, 0x01	; 1
     fba:	50 40       	sbci	r21, 0x00	; 0
     fbc:	e0 f7       	brcc	.-8      	; 0xfb6 <memset+0x4>
     fbe:	08 95       	ret

00000fc0 <sprintf>:
     fc0:	ae e0       	ldi	r26, 0x0E	; 14
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e6 ee       	ldi	r30, 0xE6	; 230
     fc6:	f7 e0       	ldi	r31, 0x07	; 7
     fc8:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__prologue_saves__+0x1c>
     fcc:	0d 89       	ldd	r16, Y+21	; 0x15
     fce:	1e 89       	ldd	r17, Y+22	; 0x16
     fd0:	86 e0       	ldi	r24, 0x06	; 6
     fd2:	8c 83       	std	Y+4, r24	; 0x04
     fd4:	1a 83       	std	Y+2, r17	; 0x02
     fd6:	09 83       	std	Y+1, r16	; 0x01
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	9f e7       	ldi	r25, 0x7F	; 127
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
     fe0:	ae 01       	movw	r20, r28
     fe2:	47 5e       	subi	r20, 0xE7	; 231
     fe4:	5f 4f       	sbci	r21, 0xFF	; 255
     fe6:	6f 89       	ldd	r22, Y+23	; 0x17
     fe8:	78 8d       	ldd	r23, Y+24	; 0x18
     fea:	ce 01       	movw	r24, r28
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	0e 94 02 08 	call	0x1004	; 0x1004 <vfprintf>
     ff2:	ef 81       	ldd	r30, Y+7	; 0x07
     ff4:	f8 85       	ldd	r31, Y+8	; 0x08
     ff6:	e0 0f       	add	r30, r16
     ff8:	f1 1f       	adc	r31, r17
     ffa:	10 82       	st	Z, r1
     ffc:	2e 96       	adiw	r28, 0x0e	; 14
     ffe:	e4 e0       	ldi	r30, 0x04	; 4
    1000:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__epilogue_restores__+0x1c>

00001004 <vfprintf>:
    1004:	ab e0       	ldi	r26, 0x0B	; 11
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e8 e0       	ldi	r30, 0x08	; 8
    100a:	f8 e0       	ldi	r31, 0x08	; 8
    100c:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__prologue_saves__>
    1010:	6c 01       	movw	r12, r24
    1012:	7b 01       	movw	r14, r22
    1014:	8a 01       	movw	r16, r20
    1016:	fc 01       	movw	r30, r24
    1018:	17 82       	std	Z+7, r1	; 0x07
    101a:	16 82       	std	Z+6, r1	; 0x06
    101c:	83 81       	ldd	r24, Z+3	; 0x03
    101e:	81 ff       	sbrs	r24, 1
    1020:	cc c1       	rjmp	.+920    	; 0x13ba <vfprintf+0x3b6>
    1022:	ce 01       	movw	r24, r28
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	3c 01       	movw	r6, r24
    1028:	f6 01       	movw	r30, r12
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	f7 01       	movw	r30, r14
    102e:	93 fd       	sbrc	r25, 3
    1030:	85 91       	lpm	r24, Z+
    1032:	93 ff       	sbrs	r25, 3
    1034:	81 91       	ld	r24, Z+
    1036:	7f 01       	movw	r14, r30
    1038:	88 23       	and	r24, r24
    103a:	09 f4       	brne	.+2      	; 0x103e <vfprintf+0x3a>
    103c:	ba c1       	rjmp	.+884    	; 0x13b2 <vfprintf+0x3ae>
    103e:	85 32       	cpi	r24, 0x25	; 37
    1040:	39 f4       	brne	.+14     	; 0x1050 <vfprintf+0x4c>
    1042:	93 fd       	sbrc	r25, 3
    1044:	85 91       	lpm	r24, Z+
    1046:	93 ff       	sbrs	r25, 3
    1048:	81 91       	ld	r24, Z+
    104a:	7f 01       	movw	r14, r30
    104c:	85 32       	cpi	r24, 0x25	; 37
    104e:	29 f4       	brne	.+10     	; 0x105a <vfprintf+0x56>
    1050:	b6 01       	movw	r22, r12
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <fputc>
    1058:	e7 cf       	rjmp	.-50     	; 0x1028 <vfprintf+0x24>
    105a:	91 2c       	mov	r9, r1
    105c:	21 2c       	mov	r2, r1
    105e:	31 2c       	mov	r3, r1
    1060:	ff e1       	ldi	r31, 0x1F	; 31
    1062:	f3 15       	cp	r31, r3
    1064:	d8 f0       	brcs	.+54     	; 0x109c <vfprintf+0x98>
    1066:	8b 32       	cpi	r24, 0x2B	; 43
    1068:	79 f0       	breq	.+30     	; 0x1088 <vfprintf+0x84>
    106a:	38 f4       	brcc	.+14     	; 0x107a <vfprintf+0x76>
    106c:	80 32       	cpi	r24, 0x20	; 32
    106e:	79 f0       	breq	.+30     	; 0x108e <vfprintf+0x8a>
    1070:	83 32       	cpi	r24, 0x23	; 35
    1072:	a1 f4       	brne	.+40     	; 0x109c <vfprintf+0x98>
    1074:	23 2d       	mov	r18, r3
    1076:	20 61       	ori	r18, 0x10	; 16
    1078:	1d c0       	rjmp	.+58     	; 0x10b4 <vfprintf+0xb0>
    107a:	8d 32       	cpi	r24, 0x2D	; 45
    107c:	61 f0       	breq	.+24     	; 0x1096 <vfprintf+0x92>
    107e:	80 33       	cpi	r24, 0x30	; 48
    1080:	69 f4       	brne	.+26     	; 0x109c <vfprintf+0x98>
    1082:	23 2d       	mov	r18, r3
    1084:	21 60       	ori	r18, 0x01	; 1
    1086:	16 c0       	rjmp	.+44     	; 0x10b4 <vfprintf+0xb0>
    1088:	83 2d       	mov	r24, r3
    108a:	82 60       	ori	r24, 0x02	; 2
    108c:	38 2e       	mov	r3, r24
    108e:	e3 2d       	mov	r30, r3
    1090:	e4 60       	ori	r30, 0x04	; 4
    1092:	3e 2e       	mov	r3, r30
    1094:	2a c0       	rjmp	.+84     	; 0x10ea <vfprintf+0xe6>
    1096:	f3 2d       	mov	r31, r3
    1098:	f8 60       	ori	r31, 0x08	; 8
    109a:	1d c0       	rjmp	.+58     	; 0x10d6 <vfprintf+0xd2>
    109c:	37 fc       	sbrc	r3, 7
    109e:	2d c0       	rjmp	.+90     	; 0x10fa <vfprintf+0xf6>
    10a0:	20 ed       	ldi	r18, 0xD0	; 208
    10a2:	28 0f       	add	r18, r24
    10a4:	2a 30       	cpi	r18, 0x0A	; 10
    10a6:	40 f0       	brcs	.+16     	; 0x10b8 <vfprintf+0xb4>
    10a8:	8e 32       	cpi	r24, 0x2E	; 46
    10aa:	b9 f4       	brne	.+46     	; 0x10da <vfprintf+0xd6>
    10ac:	36 fc       	sbrc	r3, 6
    10ae:	81 c1       	rjmp	.+770    	; 0x13b2 <vfprintf+0x3ae>
    10b0:	23 2d       	mov	r18, r3
    10b2:	20 64       	ori	r18, 0x40	; 64
    10b4:	32 2e       	mov	r3, r18
    10b6:	19 c0       	rjmp	.+50     	; 0x10ea <vfprintf+0xe6>
    10b8:	36 fe       	sbrs	r3, 6
    10ba:	06 c0       	rjmp	.+12     	; 0x10c8 <vfprintf+0xc4>
    10bc:	8a e0       	ldi	r24, 0x0A	; 10
    10be:	98 9e       	mul	r9, r24
    10c0:	20 0d       	add	r18, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	92 2e       	mov	r9, r18
    10c6:	11 c0       	rjmp	.+34     	; 0x10ea <vfprintf+0xe6>
    10c8:	ea e0       	ldi	r30, 0x0A	; 10
    10ca:	2e 9e       	mul	r2, r30
    10cc:	20 0d       	add	r18, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	22 2e       	mov	r2, r18
    10d2:	f3 2d       	mov	r31, r3
    10d4:	f0 62       	ori	r31, 0x20	; 32
    10d6:	3f 2e       	mov	r3, r31
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <vfprintf+0xe6>
    10da:	8c 36       	cpi	r24, 0x6C	; 108
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <vfprintf+0xe2>
    10de:	83 2d       	mov	r24, r3
    10e0:	80 68       	ori	r24, 0x80	; 128
    10e2:	38 2e       	mov	r3, r24
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <vfprintf+0xe6>
    10e6:	88 36       	cpi	r24, 0x68	; 104
    10e8:	41 f4       	brne	.+16     	; 0x10fa <vfprintf+0xf6>
    10ea:	f7 01       	movw	r30, r14
    10ec:	93 fd       	sbrc	r25, 3
    10ee:	85 91       	lpm	r24, Z+
    10f0:	93 ff       	sbrs	r25, 3
    10f2:	81 91       	ld	r24, Z+
    10f4:	7f 01       	movw	r14, r30
    10f6:	81 11       	cpse	r24, r1
    10f8:	b3 cf       	rjmp	.-154    	; 0x1060 <vfprintf+0x5c>
    10fa:	98 2f       	mov	r25, r24
    10fc:	9f 7d       	andi	r25, 0xDF	; 223
    10fe:	95 54       	subi	r25, 0x45	; 69
    1100:	93 30       	cpi	r25, 0x03	; 3
    1102:	28 f4       	brcc	.+10     	; 0x110e <vfprintf+0x10a>
    1104:	0c 5f       	subi	r16, 0xFC	; 252
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	9f e3       	ldi	r25, 0x3F	; 63
    110a:	99 83       	std	Y+1, r25	; 0x01
    110c:	0d c0       	rjmp	.+26     	; 0x1128 <vfprintf+0x124>
    110e:	83 36       	cpi	r24, 0x63	; 99
    1110:	31 f0       	breq	.+12     	; 0x111e <vfprintf+0x11a>
    1112:	83 37       	cpi	r24, 0x73	; 115
    1114:	71 f0       	breq	.+28     	; 0x1132 <vfprintf+0x12e>
    1116:	83 35       	cpi	r24, 0x53	; 83
    1118:	09 f0       	breq	.+2      	; 0x111c <vfprintf+0x118>
    111a:	59 c0       	rjmp	.+178    	; 0x11ce <vfprintf+0x1ca>
    111c:	21 c0       	rjmp	.+66     	; 0x1160 <vfprintf+0x15c>
    111e:	f8 01       	movw	r30, r16
    1120:	80 81       	ld	r24, Z
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	0e 5f       	subi	r16, 0xFE	; 254
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
    1128:	88 24       	eor	r8, r8
    112a:	83 94       	inc	r8
    112c:	91 2c       	mov	r9, r1
    112e:	53 01       	movw	r10, r6
    1130:	13 c0       	rjmp	.+38     	; 0x1158 <vfprintf+0x154>
    1132:	28 01       	movw	r4, r16
    1134:	f2 e0       	ldi	r31, 0x02	; 2
    1136:	4f 0e       	add	r4, r31
    1138:	51 1c       	adc	r5, r1
    113a:	f8 01       	movw	r30, r16
    113c:	a0 80       	ld	r10, Z
    113e:	b1 80       	ldd	r11, Z+1	; 0x01
    1140:	36 fe       	sbrs	r3, 6
    1142:	03 c0       	rjmp	.+6      	; 0x114a <vfprintf+0x146>
    1144:	69 2d       	mov	r22, r9
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	02 c0       	rjmp	.+4      	; 0x114e <vfprintf+0x14a>
    114a:	6f ef       	ldi	r22, 0xFF	; 255
    114c:	7f ef       	ldi	r23, 0xFF	; 255
    114e:	c5 01       	movw	r24, r10
    1150:	0e 94 ee 09 	call	0x13dc	; 0x13dc <strnlen>
    1154:	4c 01       	movw	r8, r24
    1156:	82 01       	movw	r16, r4
    1158:	f3 2d       	mov	r31, r3
    115a:	ff 77       	andi	r31, 0x7F	; 127
    115c:	3f 2e       	mov	r3, r31
    115e:	16 c0       	rjmp	.+44     	; 0x118c <vfprintf+0x188>
    1160:	28 01       	movw	r4, r16
    1162:	22 e0       	ldi	r18, 0x02	; 2
    1164:	42 0e       	add	r4, r18
    1166:	51 1c       	adc	r5, r1
    1168:	f8 01       	movw	r30, r16
    116a:	a0 80       	ld	r10, Z
    116c:	b1 80       	ldd	r11, Z+1	; 0x01
    116e:	36 fe       	sbrs	r3, 6
    1170:	03 c0       	rjmp	.+6      	; 0x1178 <vfprintf+0x174>
    1172:	69 2d       	mov	r22, r9
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	02 c0       	rjmp	.+4      	; 0x117c <vfprintf+0x178>
    1178:	6f ef       	ldi	r22, 0xFF	; 255
    117a:	7f ef       	ldi	r23, 0xFF	; 255
    117c:	c5 01       	movw	r24, r10
    117e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <strnlen_P>
    1182:	4c 01       	movw	r8, r24
    1184:	f3 2d       	mov	r31, r3
    1186:	f0 68       	ori	r31, 0x80	; 128
    1188:	3f 2e       	mov	r3, r31
    118a:	82 01       	movw	r16, r4
    118c:	33 fc       	sbrc	r3, 3
    118e:	1b c0       	rjmp	.+54     	; 0x11c6 <vfprintf+0x1c2>
    1190:	82 2d       	mov	r24, r2
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	88 16       	cp	r8, r24
    1196:	99 06       	cpc	r9, r25
    1198:	b0 f4       	brcc	.+44     	; 0x11c6 <vfprintf+0x1c2>
    119a:	b6 01       	movw	r22, r12
    119c:	80 e2       	ldi	r24, 0x20	; 32
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <fputc>
    11a4:	2a 94       	dec	r2
    11a6:	f4 cf       	rjmp	.-24     	; 0x1190 <vfprintf+0x18c>
    11a8:	f5 01       	movw	r30, r10
    11aa:	37 fc       	sbrc	r3, 7
    11ac:	85 91       	lpm	r24, Z+
    11ae:	37 fe       	sbrs	r3, 7
    11b0:	81 91       	ld	r24, Z+
    11b2:	5f 01       	movw	r10, r30
    11b4:	b6 01       	movw	r22, r12
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <fputc>
    11bc:	21 10       	cpse	r2, r1
    11be:	2a 94       	dec	r2
    11c0:	21 e0       	ldi	r18, 0x01	; 1
    11c2:	82 1a       	sub	r8, r18
    11c4:	91 08       	sbc	r9, r1
    11c6:	81 14       	cp	r8, r1
    11c8:	91 04       	cpc	r9, r1
    11ca:	71 f7       	brne	.-36     	; 0x11a8 <vfprintf+0x1a4>
    11cc:	e8 c0       	rjmp	.+464    	; 0x139e <vfprintf+0x39a>
    11ce:	84 36       	cpi	r24, 0x64	; 100
    11d0:	11 f0       	breq	.+4      	; 0x11d6 <vfprintf+0x1d2>
    11d2:	89 36       	cpi	r24, 0x69	; 105
    11d4:	41 f5       	brne	.+80     	; 0x1226 <vfprintf+0x222>
    11d6:	f8 01       	movw	r30, r16
    11d8:	37 fe       	sbrs	r3, 7
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <vfprintf+0x1e6>
    11dc:	60 81       	ld	r22, Z
    11de:	71 81       	ldd	r23, Z+1	; 0x01
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	0c 5f       	subi	r16, 0xFC	; 252
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	08 c0       	rjmp	.+16     	; 0x11fa <vfprintf+0x1f6>
    11ea:	60 81       	ld	r22, Z
    11ec:	71 81       	ldd	r23, Z+1	; 0x01
    11ee:	07 2e       	mov	r0, r23
    11f0:	00 0c       	add	r0, r0
    11f2:	88 0b       	sbc	r24, r24
    11f4:	99 0b       	sbc	r25, r25
    11f6:	0e 5f       	subi	r16, 0xFE	; 254
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255
    11fa:	f3 2d       	mov	r31, r3
    11fc:	ff 76       	andi	r31, 0x6F	; 111
    11fe:	3f 2e       	mov	r3, r31
    1200:	97 ff       	sbrs	r25, 7
    1202:	09 c0       	rjmp	.+18     	; 0x1216 <vfprintf+0x212>
    1204:	90 95       	com	r25
    1206:	80 95       	com	r24
    1208:	70 95       	com	r23
    120a:	61 95       	neg	r22
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
    120e:	8f 4f       	sbci	r24, 0xFF	; 255
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	f0 68       	ori	r31, 0x80	; 128
    1214:	3f 2e       	mov	r3, r31
    1216:	2a e0       	ldi	r18, 0x0A	; 10
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	a3 01       	movw	r20, r6
    121c:	0e 94 35 0a 	call	0x146a	; 0x146a <__ultoa_invert>
    1220:	88 2e       	mov	r8, r24
    1222:	86 18       	sub	r8, r6
    1224:	45 c0       	rjmp	.+138    	; 0x12b0 <vfprintf+0x2ac>
    1226:	85 37       	cpi	r24, 0x75	; 117
    1228:	31 f4       	brne	.+12     	; 0x1236 <vfprintf+0x232>
    122a:	23 2d       	mov	r18, r3
    122c:	2f 7e       	andi	r18, 0xEF	; 239
    122e:	b2 2e       	mov	r11, r18
    1230:	2a e0       	ldi	r18, 0x0A	; 10
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	25 c0       	rjmp	.+74     	; 0x1280 <vfprintf+0x27c>
    1236:	93 2d       	mov	r25, r3
    1238:	99 7f       	andi	r25, 0xF9	; 249
    123a:	b9 2e       	mov	r11, r25
    123c:	8f 36       	cpi	r24, 0x6F	; 111
    123e:	c1 f0       	breq	.+48     	; 0x1270 <vfprintf+0x26c>
    1240:	18 f4       	brcc	.+6      	; 0x1248 <vfprintf+0x244>
    1242:	88 35       	cpi	r24, 0x58	; 88
    1244:	79 f0       	breq	.+30     	; 0x1264 <vfprintf+0x260>
    1246:	b5 c0       	rjmp	.+362    	; 0x13b2 <vfprintf+0x3ae>
    1248:	80 37       	cpi	r24, 0x70	; 112
    124a:	19 f0       	breq	.+6      	; 0x1252 <vfprintf+0x24e>
    124c:	88 37       	cpi	r24, 0x78	; 120
    124e:	21 f0       	breq	.+8      	; 0x1258 <vfprintf+0x254>
    1250:	b0 c0       	rjmp	.+352    	; 0x13b2 <vfprintf+0x3ae>
    1252:	e9 2f       	mov	r30, r25
    1254:	e0 61       	ori	r30, 0x10	; 16
    1256:	be 2e       	mov	r11, r30
    1258:	b4 fe       	sbrs	r11, 4
    125a:	0d c0       	rjmp	.+26     	; 0x1276 <vfprintf+0x272>
    125c:	fb 2d       	mov	r31, r11
    125e:	f4 60       	ori	r31, 0x04	; 4
    1260:	bf 2e       	mov	r11, r31
    1262:	09 c0       	rjmp	.+18     	; 0x1276 <vfprintf+0x272>
    1264:	34 fe       	sbrs	r3, 4
    1266:	0a c0       	rjmp	.+20     	; 0x127c <vfprintf+0x278>
    1268:	29 2f       	mov	r18, r25
    126a:	26 60       	ori	r18, 0x06	; 6
    126c:	b2 2e       	mov	r11, r18
    126e:	06 c0       	rjmp	.+12     	; 0x127c <vfprintf+0x278>
    1270:	28 e0       	ldi	r18, 0x08	; 8
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	05 c0       	rjmp	.+10     	; 0x1280 <vfprintf+0x27c>
    1276:	20 e1       	ldi	r18, 0x10	; 16
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <vfprintf+0x27c>
    127c:	20 e1       	ldi	r18, 0x10	; 16
    127e:	32 e0       	ldi	r19, 0x02	; 2
    1280:	f8 01       	movw	r30, r16
    1282:	b7 fe       	sbrs	r11, 7
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <vfprintf+0x290>
    1286:	60 81       	ld	r22, Z
    1288:	71 81       	ldd	r23, Z+1	; 0x01
    128a:	82 81       	ldd	r24, Z+2	; 0x02
    128c:	93 81       	ldd	r25, Z+3	; 0x03
    128e:	0c 5f       	subi	r16, 0xFC	; 252
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	06 c0       	rjmp	.+12     	; 0x12a0 <vfprintf+0x29c>
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 5f       	subi	r16, 0xFE	; 254
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	a3 01       	movw	r20, r6
    12a2:	0e 94 35 0a 	call	0x146a	; 0x146a <__ultoa_invert>
    12a6:	88 2e       	mov	r8, r24
    12a8:	86 18       	sub	r8, r6
    12aa:	fb 2d       	mov	r31, r11
    12ac:	ff 77       	andi	r31, 0x7F	; 127
    12ae:	3f 2e       	mov	r3, r31
    12b0:	36 fe       	sbrs	r3, 6
    12b2:	0d c0       	rjmp	.+26     	; 0x12ce <vfprintf+0x2ca>
    12b4:	23 2d       	mov	r18, r3
    12b6:	2e 7f       	andi	r18, 0xFE	; 254
    12b8:	a2 2e       	mov	r10, r18
    12ba:	89 14       	cp	r8, r9
    12bc:	58 f4       	brcc	.+22     	; 0x12d4 <vfprintf+0x2d0>
    12be:	34 fe       	sbrs	r3, 4
    12c0:	0b c0       	rjmp	.+22     	; 0x12d8 <vfprintf+0x2d4>
    12c2:	32 fc       	sbrc	r3, 2
    12c4:	09 c0       	rjmp	.+18     	; 0x12d8 <vfprintf+0x2d4>
    12c6:	83 2d       	mov	r24, r3
    12c8:	8e 7e       	andi	r24, 0xEE	; 238
    12ca:	a8 2e       	mov	r10, r24
    12cc:	05 c0       	rjmp	.+10     	; 0x12d8 <vfprintf+0x2d4>
    12ce:	b8 2c       	mov	r11, r8
    12d0:	a3 2c       	mov	r10, r3
    12d2:	03 c0       	rjmp	.+6      	; 0x12da <vfprintf+0x2d6>
    12d4:	b8 2c       	mov	r11, r8
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <vfprintf+0x2d6>
    12d8:	b9 2c       	mov	r11, r9
    12da:	a4 fe       	sbrs	r10, 4
    12dc:	0f c0       	rjmp	.+30     	; 0x12fc <vfprintf+0x2f8>
    12de:	fe 01       	movw	r30, r28
    12e0:	e8 0d       	add	r30, r8
    12e2:	f1 1d       	adc	r31, r1
    12e4:	80 81       	ld	r24, Z
    12e6:	80 33       	cpi	r24, 0x30	; 48
    12e8:	21 f4       	brne	.+8      	; 0x12f2 <vfprintf+0x2ee>
    12ea:	9a 2d       	mov	r25, r10
    12ec:	99 7e       	andi	r25, 0xE9	; 233
    12ee:	a9 2e       	mov	r10, r25
    12f0:	09 c0       	rjmp	.+18     	; 0x1304 <vfprintf+0x300>
    12f2:	a2 fe       	sbrs	r10, 2
    12f4:	06 c0       	rjmp	.+12     	; 0x1302 <vfprintf+0x2fe>
    12f6:	b3 94       	inc	r11
    12f8:	b3 94       	inc	r11
    12fa:	04 c0       	rjmp	.+8      	; 0x1304 <vfprintf+0x300>
    12fc:	8a 2d       	mov	r24, r10
    12fe:	86 78       	andi	r24, 0x86	; 134
    1300:	09 f0       	breq	.+2      	; 0x1304 <vfprintf+0x300>
    1302:	b3 94       	inc	r11
    1304:	a3 fc       	sbrc	r10, 3
    1306:	11 c0       	rjmp	.+34     	; 0x132a <vfprintf+0x326>
    1308:	a0 fe       	sbrs	r10, 0
    130a:	06 c0       	rjmp	.+12     	; 0x1318 <vfprintf+0x314>
    130c:	b2 14       	cp	r11, r2
    130e:	88 f4       	brcc	.+34     	; 0x1332 <vfprintf+0x32e>
    1310:	28 0c       	add	r2, r8
    1312:	92 2c       	mov	r9, r2
    1314:	9b 18       	sub	r9, r11
    1316:	0e c0       	rjmp	.+28     	; 0x1334 <vfprintf+0x330>
    1318:	b2 14       	cp	r11, r2
    131a:	60 f4       	brcc	.+24     	; 0x1334 <vfprintf+0x330>
    131c:	b6 01       	movw	r22, r12
    131e:	80 e2       	ldi	r24, 0x20	; 32
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <fputc>
    1326:	b3 94       	inc	r11
    1328:	f7 cf       	rjmp	.-18     	; 0x1318 <vfprintf+0x314>
    132a:	b2 14       	cp	r11, r2
    132c:	18 f4       	brcc	.+6      	; 0x1334 <vfprintf+0x330>
    132e:	2b 18       	sub	r2, r11
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <vfprintf+0x332>
    1332:	98 2c       	mov	r9, r8
    1334:	21 2c       	mov	r2, r1
    1336:	a4 fe       	sbrs	r10, 4
    1338:	10 c0       	rjmp	.+32     	; 0x135a <vfprintf+0x356>
    133a:	b6 01       	movw	r22, r12
    133c:	80 e3       	ldi	r24, 0x30	; 48
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <fputc>
    1344:	a2 fe       	sbrs	r10, 2
    1346:	17 c0       	rjmp	.+46     	; 0x1376 <vfprintf+0x372>
    1348:	a1 fc       	sbrc	r10, 1
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <vfprintf+0x34e>
    134c:	88 e7       	ldi	r24, 0x78	; 120
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <vfprintf+0x352>
    1352:	88 e5       	ldi	r24, 0x58	; 88
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	b6 01       	movw	r22, r12
    1358:	0c c0       	rjmp	.+24     	; 0x1372 <vfprintf+0x36e>
    135a:	8a 2d       	mov	r24, r10
    135c:	86 78       	andi	r24, 0x86	; 134
    135e:	59 f0       	breq	.+22     	; 0x1376 <vfprintf+0x372>
    1360:	a1 fe       	sbrs	r10, 1
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <vfprintf+0x364>
    1364:	8b e2       	ldi	r24, 0x2B	; 43
    1366:	01 c0       	rjmp	.+2      	; 0x136a <vfprintf+0x366>
    1368:	80 e2       	ldi	r24, 0x20	; 32
    136a:	a7 fc       	sbrc	r10, 7
    136c:	8d e2       	ldi	r24, 0x2D	; 45
    136e:	b6 01       	movw	r22, r12
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <fputc>
    1376:	89 14       	cp	r8, r9
    1378:	38 f4       	brcc	.+14     	; 0x1388 <vfprintf+0x384>
    137a:	b6 01       	movw	r22, r12
    137c:	80 e3       	ldi	r24, 0x30	; 48
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <fputc>
    1384:	9a 94       	dec	r9
    1386:	f7 cf       	rjmp	.-18     	; 0x1376 <vfprintf+0x372>
    1388:	8a 94       	dec	r8
    138a:	f3 01       	movw	r30, r6
    138c:	e8 0d       	add	r30, r8
    138e:	f1 1d       	adc	r31, r1
    1390:	80 81       	ld	r24, Z
    1392:	b6 01       	movw	r22, r12
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <fputc>
    139a:	81 10       	cpse	r8, r1
    139c:	f5 cf       	rjmp	.-22     	; 0x1388 <vfprintf+0x384>
    139e:	22 20       	and	r2, r2
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <vfprintf+0x3a0>
    13a2:	42 ce       	rjmp	.-892    	; 0x1028 <vfprintf+0x24>
    13a4:	b6 01       	movw	r22, r12
    13a6:	80 e2       	ldi	r24, 0x20	; 32
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <fputc>
    13ae:	2a 94       	dec	r2
    13b0:	f6 cf       	rjmp	.-20     	; 0x139e <vfprintf+0x39a>
    13b2:	f6 01       	movw	r30, r12
    13b4:	86 81       	ldd	r24, Z+6	; 0x06
    13b6:	97 81       	ldd	r25, Z+7	; 0x07
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <vfprintf+0x3ba>
    13ba:	8f ef       	ldi	r24, 0xFF	; 255
    13bc:	9f ef       	ldi	r25, 0xFF	; 255
    13be:	2b 96       	adiw	r28, 0x0b	; 11
    13c0:	e2 e1       	ldi	r30, 0x12	; 18
    13c2:	0c 94 af 0a 	jmp	0x155e	; 0x155e <__epilogue_restores__>

000013c6 <strnlen_P>:
    13c6:	fc 01       	movw	r30, r24
    13c8:	05 90       	lpm	r0, Z+
    13ca:	61 50       	subi	r22, 0x01	; 1
    13cc:	70 40       	sbci	r23, 0x00	; 0
    13ce:	01 10       	cpse	r0, r1
    13d0:	d8 f7       	brcc	.-10     	; 0x13c8 <strnlen_P+0x2>
    13d2:	80 95       	com	r24
    13d4:	90 95       	com	r25
    13d6:	8e 0f       	add	r24, r30
    13d8:	9f 1f       	adc	r25, r31
    13da:	08 95       	ret

000013dc <strnlen>:
    13dc:	fc 01       	movw	r30, r24
    13de:	61 50       	subi	r22, 0x01	; 1
    13e0:	70 40       	sbci	r23, 0x00	; 0
    13e2:	01 90       	ld	r0, Z+
    13e4:	01 10       	cpse	r0, r1
    13e6:	d8 f7       	brcc	.-10     	; 0x13de <strnlen+0x2>
    13e8:	80 95       	com	r24
    13ea:	90 95       	com	r25
    13ec:	8e 0f       	add	r24, r30
    13ee:	9f 1f       	adc	r25, r31
    13f0:	08 95       	ret

000013f2 <fputc>:
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	fb 01       	movw	r30, r22
    13fc:	23 81       	ldd	r18, Z+3	; 0x03
    13fe:	21 fd       	sbrc	r18, 1
    1400:	03 c0       	rjmp	.+6      	; 0x1408 <fputc+0x16>
    1402:	8f ef       	ldi	r24, 0xFF	; 255
    1404:	9f ef       	ldi	r25, 0xFF	; 255
    1406:	2c c0       	rjmp	.+88     	; 0x1460 <fputc+0x6e>
    1408:	22 ff       	sbrs	r18, 2
    140a:	16 c0       	rjmp	.+44     	; 0x1438 <fputc+0x46>
    140c:	46 81       	ldd	r20, Z+6	; 0x06
    140e:	57 81       	ldd	r21, Z+7	; 0x07
    1410:	24 81       	ldd	r18, Z+4	; 0x04
    1412:	35 81       	ldd	r19, Z+5	; 0x05
    1414:	42 17       	cp	r20, r18
    1416:	53 07       	cpc	r21, r19
    1418:	44 f4       	brge	.+16     	; 0x142a <fputc+0x38>
    141a:	a0 81       	ld	r26, Z
    141c:	b1 81       	ldd	r27, Z+1	; 0x01
    141e:	9d 01       	movw	r18, r26
    1420:	2f 5f       	subi	r18, 0xFF	; 255
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
    1424:	31 83       	std	Z+1, r19	; 0x01
    1426:	20 83       	st	Z, r18
    1428:	8c 93       	st	X, r24
    142a:	26 81       	ldd	r18, Z+6	; 0x06
    142c:	37 81       	ldd	r19, Z+7	; 0x07
    142e:	2f 5f       	subi	r18, 0xFF	; 255
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	37 83       	std	Z+7, r19	; 0x07
    1434:	26 83       	std	Z+6, r18	; 0x06
    1436:	14 c0       	rjmp	.+40     	; 0x1460 <fputc+0x6e>
    1438:	8b 01       	movw	r16, r22
    143a:	ec 01       	movw	r28, r24
    143c:	fb 01       	movw	r30, r22
    143e:	00 84       	ldd	r0, Z+8	; 0x08
    1440:	f1 85       	ldd	r31, Z+9	; 0x09
    1442:	e0 2d       	mov	r30, r0
    1444:	09 95       	icall
    1446:	89 2b       	or	r24, r25
    1448:	e1 f6       	brne	.-72     	; 0x1402 <fputc+0x10>
    144a:	d8 01       	movw	r26, r16
    144c:	16 96       	adiw	r26, 0x06	; 6
    144e:	8d 91       	ld	r24, X+
    1450:	9c 91       	ld	r25, X
    1452:	17 97       	sbiw	r26, 0x07	; 7
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	17 96       	adiw	r26, 0x07	; 7
    1458:	9c 93       	st	X, r25
    145a:	8e 93       	st	-X, r24
    145c:	16 97       	sbiw	r26, 0x06	; 6
    145e:	ce 01       	movw	r24, r28
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	08 95       	ret

0000146a <__ultoa_invert>:
    146a:	fa 01       	movw	r30, r20
    146c:	aa 27       	eor	r26, r26
    146e:	28 30       	cpi	r18, 0x08	; 8
    1470:	51 f1       	breq	.+84     	; 0x14c6 <__ultoa_invert+0x5c>
    1472:	20 31       	cpi	r18, 0x10	; 16
    1474:	81 f1       	breq	.+96     	; 0x14d6 <__ultoa_invert+0x6c>
    1476:	e8 94       	clt
    1478:	6f 93       	push	r22
    147a:	6e 7f       	andi	r22, 0xFE	; 254
    147c:	6e 5f       	subi	r22, 0xFE	; 254
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	8f 4f       	sbci	r24, 0xFF	; 255
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	af 4f       	sbci	r26, 0xFF	; 255
    1486:	b1 e0       	ldi	r27, 0x01	; 1
    1488:	3e d0       	rcall	.+124    	; 0x1506 <__ultoa_invert+0x9c>
    148a:	b4 e0       	ldi	r27, 0x04	; 4
    148c:	3c d0       	rcall	.+120    	; 0x1506 <__ultoa_invert+0x9c>
    148e:	67 0f       	add	r22, r23
    1490:	78 1f       	adc	r23, r24
    1492:	89 1f       	adc	r24, r25
    1494:	9a 1f       	adc	r25, r26
    1496:	a1 1d       	adc	r26, r1
    1498:	68 0f       	add	r22, r24
    149a:	79 1f       	adc	r23, r25
    149c:	8a 1f       	adc	r24, r26
    149e:	91 1d       	adc	r25, r1
    14a0:	a1 1d       	adc	r26, r1
    14a2:	6a 0f       	add	r22, r26
    14a4:	71 1d       	adc	r23, r1
    14a6:	81 1d       	adc	r24, r1
    14a8:	91 1d       	adc	r25, r1
    14aa:	a1 1d       	adc	r26, r1
    14ac:	20 d0       	rcall	.+64     	; 0x14ee <__ultoa_invert+0x84>
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <__ultoa_invert+0x48>
    14b0:	68 94       	set
    14b2:	3f 91       	pop	r19
    14b4:	2a e0       	ldi	r18, 0x0A	; 10
    14b6:	26 9f       	mul	r18, r22
    14b8:	11 24       	eor	r1, r1
    14ba:	30 19       	sub	r19, r0
    14bc:	30 5d       	subi	r19, 0xD0	; 208
    14be:	31 93       	st	Z+, r19
    14c0:	de f6       	brtc	.-74     	; 0x1478 <__ultoa_invert+0xe>
    14c2:	cf 01       	movw	r24, r30
    14c4:	08 95       	ret
    14c6:	46 2f       	mov	r20, r22
    14c8:	47 70       	andi	r20, 0x07	; 7
    14ca:	40 5d       	subi	r20, 0xD0	; 208
    14cc:	41 93       	st	Z+, r20
    14ce:	b3 e0       	ldi	r27, 0x03	; 3
    14d0:	0f d0       	rcall	.+30     	; 0x14f0 <__ultoa_invert+0x86>
    14d2:	c9 f7       	brne	.-14     	; 0x14c6 <__ultoa_invert+0x5c>
    14d4:	f6 cf       	rjmp	.-20     	; 0x14c2 <__ultoa_invert+0x58>
    14d6:	46 2f       	mov	r20, r22
    14d8:	4f 70       	andi	r20, 0x0F	; 15
    14da:	40 5d       	subi	r20, 0xD0	; 208
    14dc:	4a 33       	cpi	r20, 0x3A	; 58
    14de:	18 f0       	brcs	.+6      	; 0x14e6 <__ultoa_invert+0x7c>
    14e0:	49 5d       	subi	r20, 0xD9	; 217
    14e2:	31 fd       	sbrc	r19, 1
    14e4:	40 52       	subi	r20, 0x20	; 32
    14e6:	41 93       	st	Z+, r20
    14e8:	02 d0       	rcall	.+4      	; 0x14ee <__ultoa_invert+0x84>
    14ea:	a9 f7       	brne	.-22     	; 0x14d6 <__ultoa_invert+0x6c>
    14ec:	ea cf       	rjmp	.-44     	; 0x14c2 <__ultoa_invert+0x58>
    14ee:	b4 e0       	ldi	r27, 0x04	; 4
    14f0:	a6 95       	lsr	r26
    14f2:	97 95       	ror	r25
    14f4:	87 95       	ror	r24
    14f6:	77 95       	ror	r23
    14f8:	67 95       	ror	r22
    14fa:	ba 95       	dec	r27
    14fc:	c9 f7       	brne	.-14     	; 0x14f0 <__ultoa_invert+0x86>
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	61 05       	cpc	r22, r1
    1502:	71 05       	cpc	r23, r1
    1504:	08 95       	ret
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	0a 2e       	mov	r0, r26
    150c:	06 94       	lsr	r0
    150e:	57 95       	ror	r21
    1510:	47 95       	ror	r20
    1512:	37 95       	ror	r19
    1514:	27 95       	ror	r18
    1516:	ba 95       	dec	r27
    1518:	c9 f7       	brne	.-14     	; 0x150c <__ultoa_invert+0xa2>
    151a:	62 0f       	add	r22, r18
    151c:	73 1f       	adc	r23, r19
    151e:	84 1f       	adc	r24, r20
    1520:	95 1f       	adc	r25, r21
    1522:	a0 1d       	adc	r26, r0
    1524:	08 95       	ret

00001526 <__prologue_saves__>:
    1526:	2f 92       	push	r2
    1528:	3f 92       	push	r3
    152a:	4f 92       	push	r4
    152c:	5f 92       	push	r5
    152e:	6f 92       	push	r6
    1530:	7f 92       	push	r7
    1532:	8f 92       	push	r8
    1534:	9f 92       	push	r9
    1536:	af 92       	push	r10
    1538:	bf 92       	push	r11
    153a:	cf 92       	push	r12
    153c:	df 92       	push	r13
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	ca 1b       	sub	r28, r26
    1550:	db 0b       	sbc	r29, r27
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	09 94       	ijmp

0000155e <__epilogue_restores__>:
    155e:	2a 88       	ldd	r2, Y+18	; 0x12
    1560:	39 88       	ldd	r3, Y+17	; 0x11
    1562:	48 88       	ldd	r4, Y+16	; 0x10
    1564:	5f 84       	ldd	r5, Y+15	; 0x0f
    1566:	6e 84       	ldd	r6, Y+14	; 0x0e
    1568:	7d 84       	ldd	r7, Y+13	; 0x0d
    156a:	8c 84       	ldd	r8, Y+12	; 0x0c
    156c:	9b 84       	ldd	r9, Y+11	; 0x0b
    156e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1570:	b9 84       	ldd	r11, Y+9	; 0x09
    1572:	c8 84       	ldd	r12, Y+8	; 0x08
    1574:	df 80       	ldd	r13, Y+7	; 0x07
    1576:	ee 80       	ldd	r14, Y+6	; 0x06
    1578:	fd 80       	ldd	r15, Y+5	; 0x05
    157a:	0c 81       	ldd	r16, Y+4	; 0x04
    157c:	1b 81       	ldd	r17, Y+3	; 0x03
    157e:	aa 81       	ldd	r26, Y+2	; 0x02
    1580:	b9 81       	ldd	r27, Y+1	; 0x01
    1582:	ce 0f       	add	r28, r30
    1584:	d1 1d       	adc	r29, r1
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	ed 01       	movw	r28, r26
    1592:	08 95       	ret

00001594 <_exit>:
    1594:	f8 94       	cli

00001596 <__stop_program>:
    1596:	ff cf       	rjmp	.-2      	; 0x1596 <__stop_program>
